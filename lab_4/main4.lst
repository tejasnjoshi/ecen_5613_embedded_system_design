                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Tue Apr 23 02:05:41 2013
                              5 ;--------------------------------------------------------
                              6 	.module main4
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _isr_zero
                             13 	.globl _isr_one
                             14 	.globl _goto_row_column
                             15 	.globl _main
                             16 	.globl __sdcc_external_startup
                             17 	.globl _TF1
                             18 	.globl _TR1
                             19 	.globl _TF0
                             20 	.globl _TR0
                             21 	.globl _IE1
                             22 	.globl _IT1
                             23 	.globl _IE0
                             24 	.globl _IT0
                             25 	.globl _SM0
                             26 	.globl _SM1
                             27 	.globl _SM2
                             28 	.globl _REN
                             29 	.globl _TB8
                             30 	.globl _RB8
                             31 	.globl _TI
                             32 	.globl _RI
                             33 	.globl _CY
                             34 	.globl _AC
                             35 	.globl _F0
                             36 	.globl _RS1
                             37 	.globl _RS0
                             38 	.globl _OV
                             39 	.globl _F1
                             40 	.globl _P
                             41 	.globl _RD
                             42 	.globl _WR
                             43 	.globl _T1
                             44 	.globl _T0
                             45 	.globl _INT1
                             46 	.globl _INT0
                             47 	.globl _TXD0
                             48 	.globl _TXD
                             49 	.globl _RXD0
                             50 	.globl _RXD
                             51 	.globl _P3_7
                             52 	.globl _P3_6
                             53 	.globl _P3_5
                             54 	.globl _P3_4
                             55 	.globl _P3_3
                             56 	.globl _P3_2
                             57 	.globl _P3_1
                             58 	.globl _P3_0
                             59 	.globl _P2_7
                             60 	.globl _P2_6
                             61 	.globl _P2_5
                             62 	.globl _P2_4
                             63 	.globl _P2_3
                             64 	.globl _P2_2
                             65 	.globl _P2_1
                             66 	.globl _P2_0
                             67 	.globl _P1_7
                             68 	.globl _P1_6
                             69 	.globl _P1_5
                             70 	.globl _P1_4
                             71 	.globl _P1_3
                             72 	.globl _P1_2
                             73 	.globl _P1_1
                             74 	.globl _P1_0
                             75 	.globl _P0_7
                             76 	.globl _P0_6
                             77 	.globl _P0_5
                             78 	.globl _P0_4
                             79 	.globl _P0_3
                             80 	.globl _P0_2
                             81 	.globl _P0_1
                             82 	.globl _P0_0
                             83 	.globl _PS
                             84 	.globl _PT1
                             85 	.globl _PX1
                             86 	.globl _PT0
                             87 	.globl _PX0
                             88 	.globl _EA
                             89 	.globl _ES
                             90 	.globl _ET1
                             91 	.globl _EX1
                             92 	.globl _ET0
                             93 	.globl _EX0
                             94 	.globl _BREG_F7
                             95 	.globl _BREG_F6
                             96 	.globl _BREG_F5
                             97 	.globl _BREG_F4
                             98 	.globl _BREG_F3
                             99 	.globl _BREG_F2
                            100 	.globl _BREG_F1
                            101 	.globl _BREG_F0
                            102 	.globl _P5_7
                            103 	.globl _P5_6
                            104 	.globl _P5_5
                            105 	.globl _P5_4
                            106 	.globl _P5_3
                            107 	.globl _P5_2
                            108 	.globl _P5_1
                            109 	.globl _P5_0
                            110 	.globl _P4_7
                            111 	.globl _P4_6
                            112 	.globl _P4_5
                            113 	.globl _P4_4
                            114 	.globl _P4_3
                            115 	.globl _P4_2
                            116 	.globl _P4_1
                            117 	.globl _P4_0
                            118 	.globl _PX0L
                            119 	.globl _PT0L
                            120 	.globl _PX1L
                            121 	.globl _PT1L
                            122 	.globl _PLS
                            123 	.globl _PT2L
                            124 	.globl _PPCL
                            125 	.globl _EC
                            126 	.globl _CCF0
                            127 	.globl _CCF1
                            128 	.globl _CCF2
                            129 	.globl _CCF3
                            130 	.globl _CCF4
                            131 	.globl _CR
                            132 	.globl _CF
                            133 	.globl _TF2
                            134 	.globl _EXF2
                            135 	.globl _RCLK
                            136 	.globl _TCLK
                            137 	.globl _EXEN2
                            138 	.globl _TR2
                            139 	.globl _C_T2
                            140 	.globl _CP_RL2
                            141 	.globl _T2CON_7
                            142 	.globl _T2CON_6
                            143 	.globl _T2CON_5
                            144 	.globl _T2CON_4
                            145 	.globl _T2CON_3
                            146 	.globl _T2CON_2
                            147 	.globl _T2CON_1
                            148 	.globl _T2CON_0
                            149 	.globl _PT2
                            150 	.globl _ET2
                            151 	.globl _TMOD
                            152 	.globl _TL1
                            153 	.globl _TL0
                            154 	.globl _TH1
                            155 	.globl _TH0
                            156 	.globl _TCON
                            157 	.globl _SP
                            158 	.globl _SCON
                            159 	.globl _SBUF0
                            160 	.globl _SBUF
                            161 	.globl _PSW
                            162 	.globl _PCON
                            163 	.globl _P3
                            164 	.globl _P2
                            165 	.globl _P1
                            166 	.globl _P0
                            167 	.globl _IP
                            168 	.globl _IE
                            169 	.globl _DP0L
                            170 	.globl _DPL
                            171 	.globl _DP0H
                            172 	.globl _DPH
                            173 	.globl _B
                            174 	.globl _ACC
                            175 	.globl _EECON
                            176 	.globl _KBF
                            177 	.globl _KBE
                            178 	.globl _KBLS
                            179 	.globl _BRL
                            180 	.globl _BDRCON
                            181 	.globl _T2MOD
                            182 	.globl _SPDAT
                            183 	.globl _SPSTA
                            184 	.globl _SPCON
                            185 	.globl _SADEN
                            186 	.globl _SADDR
                            187 	.globl _WDTPRG
                            188 	.globl _WDTRST
                            189 	.globl _P5
                            190 	.globl _P4
                            191 	.globl _IPH1
                            192 	.globl _IPL1
                            193 	.globl _IPH0
                            194 	.globl _IPL0
                            195 	.globl _IEN1
                            196 	.globl _IEN0
                            197 	.globl _CMOD
                            198 	.globl _CL
                            199 	.globl _CH
                            200 	.globl _CCON
                            201 	.globl _CCAPM4
                            202 	.globl _CCAPM3
                            203 	.globl _CCAPM2
                            204 	.globl _CCAPM1
                            205 	.globl _CCAPM0
                            206 	.globl _CCAP4L
                            207 	.globl _CCAP3L
                            208 	.globl _CCAP2L
                            209 	.globl _CCAP1L
                            210 	.globl _CCAP0L
                            211 	.globl _CCAP4H
                            212 	.globl _CCAP3H
                            213 	.globl _CCAP2H
                            214 	.globl _CCAP1H
                            215 	.globl _CCAP0H
                            216 	.globl _CKCKON1
                            217 	.globl _CKCKON0
                            218 	.globl _CKRL
                            219 	.globl _AUXR1
                            220 	.globl _AUXR
                            221 	.globl _TH2
                            222 	.globl _TL2
                            223 	.globl _RCAP2H
                            224 	.globl _RCAP2L
                            225 	.globl _T2CON
                            226 	.globl _block_print_PARM_2
                            227 	.globl _lcdinitbit
                            228 	.globl _ccode
                            229 	.globl _row_vals
                            230 	.globl _val
                            231 	.globl _lcdprevpos
                            232 	.globl _advance
                            233 	.globl _millis
                            234 	.globl _deci
                            235 	.globl _sec
                            236 	.globl _minute
                            237 	.globl _prev_startadd
                            238 	.globl _r1
                            239 	.globl _eeprom_adr
                            240 	.globl _Send_Byte
                            241 	.globl _x
                            242 	.globl _y
                            243 	.globl _ss
                            244 	.globl _dat
                            245 	.globl _add
                            246 	.globl _block
                            247 	.globl _addr
                            248 	.globl _num
                            249 	.globl _putstr
                            250 	.globl _putchar
                            251 	.globl _getchar
                            252 	.globl _go_to_address
                            253 	.globl _lcd_functions
                            254 	.globl _eeprom_functions
                            255 	.globl _main_menu
                            256 	.globl _get_addr
                            257 	.globl _get_data
                            258 	.globl _disp_4bytes
                            259 	.globl _block_print
                            260 	.globl _clock_functions
                            261 	.globl _create_char
                            262 	.globl _expander_functions
                            263 	.globl _print_time_stamp
                            264 ;--------------------------------------------------------
                            265 ; special function registers
                            266 ;--------------------------------------------------------
                            267 	.area RSEG    (DATA)
                    00C8    268 _T2CON	=	0x00c8
                    00CA    269 _RCAP2L	=	0x00ca
                    00CB    270 _RCAP2H	=	0x00cb
                    00CC    271 _TL2	=	0x00cc
                    00CD    272 _TH2	=	0x00cd
                    008E    273 _AUXR	=	0x008e
                    00A2    274 _AUXR1	=	0x00a2
                    0097    275 _CKRL	=	0x0097
                    008F    276 _CKCKON0	=	0x008f
                    008F    277 _CKCKON1	=	0x008f
                    00FA    278 _CCAP0H	=	0x00fa
                    00FB    279 _CCAP1H	=	0x00fb
                    00FC    280 _CCAP2H	=	0x00fc
                    00FD    281 _CCAP3H	=	0x00fd
                    00FE    282 _CCAP4H	=	0x00fe
                    00EA    283 _CCAP0L	=	0x00ea
                    00EB    284 _CCAP1L	=	0x00eb
                    00EC    285 _CCAP2L	=	0x00ec
                    00ED    286 _CCAP3L	=	0x00ed
                    00EE    287 _CCAP4L	=	0x00ee
                    00DA    288 _CCAPM0	=	0x00da
                    00DB    289 _CCAPM1	=	0x00db
                    00DC    290 _CCAPM2	=	0x00dc
                    00DD    291 _CCAPM3	=	0x00dd
                    00DE    292 _CCAPM4	=	0x00de
                    00D8    293 _CCON	=	0x00d8
                    00F9    294 _CH	=	0x00f9
                    00E9    295 _CL	=	0x00e9
                    00D9    296 _CMOD	=	0x00d9
                    00A8    297 _IEN0	=	0x00a8
                    00B1    298 _IEN1	=	0x00b1
                    00B8    299 _IPL0	=	0x00b8
                    00B7    300 _IPH0	=	0x00b7
                    00B2    301 _IPL1	=	0x00b2
                    00B3    302 _IPH1	=	0x00b3
                    00C0    303 _P4	=	0x00c0
                    00D8    304 _P5	=	0x00d8
                    00A6    305 _WDTRST	=	0x00a6
                    00A7    306 _WDTPRG	=	0x00a7
                    00A9    307 _SADDR	=	0x00a9
                    00B9    308 _SADEN	=	0x00b9
                    00C3    309 _SPCON	=	0x00c3
                    00C4    310 _SPSTA	=	0x00c4
                    00C5    311 _SPDAT	=	0x00c5
                    00C9    312 _T2MOD	=	0x00c9
                    009B    313 _BDRCON	=	0x009b
                    009A    314 _BRL	=	0x009a
                    009C    315 _KBLS	=	0x009c
                    009D    316 _KBE	=	0x009d
                    009E    317 _KBF	=	0x009e
                    00D2    318 _EECON	=	0x00d2
                    00E0    319 _ACC	=	0x00e0
                    00F0    320 _B	=	0x00f0
                    0083    321 _DPH	=	0x0083
                    0083    322 _DP0H	=	0x0083
                    0082    323 _DPL	=	0x0082
                    0082    324 _DP0L	=	0x0082
                    00A8    325 _IE	=	0x00a8
                    00B8    326 _IP	=	0x00b8
                    0080    327 _P0	=	0x0080
                    0090    328 _P1	=	0x0090
                    00A0    329 _P2	=	0x00a0
                    00B0    330 _P3	=	0x00b0
                    0087    331 _PCON	=	0x0087
                    00D0    332 _PSW	=	0x00d0
                    0099    333 _SBUF	=	0x0099
                    0099    334 _SBUF0	=	0x0099
                    0098    335 _SCON	=	0x0098
                    0081    336 _SP	=	0x0081
                    0088    337 _TCON	=	0x0088
                    008C    338 _TH0	=	0x008c
                    008D    339 _TH1	=	0x008d
                    008A    340 _TL0	=	0x008a
                    008B    341 _TL1	=	0x008b
                    0089    342 _TMOD	=	0x0089
                            343 ;--------------------------------------------------------
                            344 ; special function bits
                            345 ;--------------------------------------------------------
                            346 	.area RSEG    (DATA)
                    00AD    347 _ET2	=	0x00ad
                    00BD    348 _PT2	=	0x00bd
                    00C8    349 _T2CON_0	=	0x00c8
                    00C9    350 _T2CON_1	=	0x00c9
                    00CA    351 _T2CON_2	=	0x00ca
                    00CB    352 _T2CON_3	=	0x00cb
                    00CC    353 _T2CON_4	=	0x00cc
                    00CD    354 _T2CON_5	=	0x00cd
                    00CE    355 _T2CON_6	=	0x00ce
                    00CF    356 _T2CON_7	=	0x00cf
                    00C8    357 _CP_RL2	=	0x00c8
                    00C9    358 _C_T2	=	0x00c9
                    00CA    359 _TR2	=	0x00ca
                    00CB    360 _EXEN2	=	0x00cb
                    00CC    361 _TCLK	=	0x00cc
                    00CD    362 _RCLK	=	0x00cd
                    00CE    363 _EXF2	=	0x00ce
                    00CF    364 _TF2	=	0x00cf
                    00DF    365 _CF	=	0x00df
                    00DE    366 _CR	=	0x00de
                    00DC    367 _CCF4	=	0x00dc
                    00DB    368 _CCF3	=	0x00db
                    00DA    369 _CCF2	=	0x00da
                    00D9    370 _CCF1	=	0x00d9
                    00D8    371 _CCF0	=	0x00d8
                    00AE    372 _EC	=	0x00ae
                    00BE    373 _PPCL	=	0x00be
                    00BD    374 _PT2L	=	0x00bd
                    00BC    375 _PLS	=	0x00bc
                    00BB    376 _PT1L	=	0x00bb
                    00BA    377 _PX1L	=	0x00ba
                    00B9    378 _PT0L	=	0x00b9
                    00B8    379 _PX0L	=	0x00b8
                    00C0    380 _P4_0	=	0x00c0
                    00C1    381 _P4_1	=	0x00c1
                    00C2    382 _P4_2	=	0x00c2
                    00C3    383 _P4_3	=	0x00c3
                    00C4    384 _P4_4	=	0x00c4
                    00C5    385 _P4_5	=	0x00c5
                    00C6    386 _P4_6	=	0x00c6
                    00C7    387 _P4_7	=	0x00c7
                    00D8    388 _P5_0	=	0x00d8
                    00D9    389 _P5_1	=	0x00d9
                    00DA    390 _P5_2	=	0x00da
                    00DB    391 _P5_3	=	0x00db
                    00DC    392 _P5_4	=	0x00dc
                    00DD    393 _P5_5	=	0x00dd
                    00DE    394 _P5_6	=	0x00de
                    00DF    395 _P5_7	=	0x00df
                    00F0    396 _BREG_F0	=	0x00f0
                    00F1    397 _BREG_F1	=	0x00f1
                    00F2    398 _BREG_F2	=	0x00f2
                    00F3    399 _BREG_F3	=	0x00f3
                    00F4    400 _BREG_F4	=	0x00f4
                    00F5    401 _BREG_F5	=	0x00f5
                    00F6    402 _BREG_F6	=	0x00f6
                    00F7    403 _BREG_F7	=	0x00f7
                    00A8    404 _EX0	=	0x00a8
                    00A9    405 _ET0	=	0x00a9
                    00AA    406 _EX1	=	0x00aa
                    00AB    407 _ET1	=	0x00ab
                    00AC    408 _ES	=	0x00ac
                    00AF    409 _EA	=	0x00af
                    00B8    410 _PX0	=	0x00b8
                    00B9    411 _PT0	=	0x00b9
                    00BA    412 _PX1	=	0x00ba
                    00BB    413 _PT1	=	0x00bb
                    00BC    414 _PS	=	0x00bc
                    0080    415 _P0_0	=	0x0080
                    0081    416 _P0_1	=	0x0081
                    0082    417 _P0_2	=	0x0082
                    0083    418 _P0_3	=	0x0083
                    0084    419 _P0_4	=	0x0084
                    0085    420 _P0_5	=	0x0085
                    0086    421 _P0_6	=	0x0086
                    0087    422 _P0_7	=	0x0087
                    0090    423 _P1_0	=	0x0090
                    0091    424 _P1_1	=	0x0091
                    0092    425 _P1_2	=	0x0092
                    0093    426 _P1_3	=	0x0093
                    0094    427 _P1_4	=	0x0094
                    0095    428 _P1_5	=	0x0095
                    0096    429 _P1_6	=	0x0096
                    0097    430 _P1_7	=	0x0097
                    00A0    431 _P2_0	=	0x00a0
                    00A1    432 _P2_1	=	0x00a1
                    00A2    433 _P2_2	=	0x00a2
                    00A3    434 _P2_3	=	0x00a3
                    00A4    435 _P2_4	=	0x00a4
                    00A5    436 _P2_5	=	0x00a5
                    00A6    437 _P2_6	=	0x00a6
                    00A7    438 _P2_7	=	0x00a7
                    00B0    439 _P3_0	=	0x00b0
                    00B1    440 _P3_1	=	0x00b1
                    00B2    441 _P3_2	=	0x00b2
                    00B3    442 _P3_3	=	0x00b3
                    00B4    443 _P3_4	=	0x00b4
                    00B5    444 _P3_5	=	0x00b5
                    00B6    445 _P3_6	=	0x00b6
                    00B7    446 _P3_7	=	0x00b7
                    00B0    447 _RXD	=	0x00b0
                    00B0    448 _RXD0	=	0x00b0
                    00B1    449 _TXD	=	0x00b1
                    00B1    450 _TXD0	=	0x00b1
                    00B2    451 _INT0	=	0x00b2
                    00B3    452 _INT1	=	0x00b3
                    00B4    453 _T0	=	0x00b4
                    00B5    454 _T1	=	0x00b5
                    00B6    455 _WR	=	0x00b6
                    00B7    456 _RD	=	0x00b7
                    00D0    457 _P	=	0x00d0
                    00D1    458 _F1	=	0x00d1
                    00D2    459 _OV	=	0x00d2
                    00D3    460 _RS0	=	0x00d3
                    00D4    461 _RS1	=	0x00d4
                    00D5    462 _F0	=	0x00d5
                    00D6    463 _AC	=	0x00d6
                    00D7    464 _CY	=	0x00d7
                    0098    465 _RI	=	0x0098
                    0099    466 _TI	=	0x0099
                    009A    467 _RB8	=	0x009a
                    009B    468 _TB8	=	0x009b
                    009C    469 _REN	=	0x009c
                    009D    470 _SM2	=	0x009d
                    009E    471 _SM1	=	0x009e
                    009F    472 _SM0	=	0x009f
                    0088    473 _IT0	=	0x0088
                    0089    474 _IE0	=	0x0089
                    008A    475 _IT1	=	0x008a
                    008B    476 _IE1	=	0x008b
                    008C    477 _TR0	=	0x008c
                    008D    478 _TF0	=	0x008d
                    008E    479 _TR1	=	0x008e
                    008F    480 _TF1	=	0x008f
                            481 ;--------------------------------------------------------
                            482 ; overlayable register banks
                            483 ;--------------------------------------------------------
                            484 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     485 	.ds 8
                            486 ;--------------------------------------------------------
                            487 ; internal ram data
                            488 ;--------------------------------------------------------
                            489 	.area DSEG    (DATA)
   0000                     490 _isr_one_sloc0_1_0:
   0000                     491 	.ds 2
   0002                     492 _clock_functions_sloc0_1_0:
   0002                     493 	.ds 2
   0004                     494 _clock_functions_sloc1_1_0:
   0004                     495 	.ds 2
   0006                     496 _expander_functions_sloc0_1_0:
   0006                     497 	.ds 2
   0008                     498 _expander_functions_sloc1_1_0:
   0008                     499 	.ds 2
   000A                     500 _expander_functions_sloc2_1_0:
   000A                     501 	.ds 2
   000C                     502 _expander_functions_sloc3_1_0:
   000C                     503 	.ds 2
                            504 ;--------------------------------------------------------
                            505 ; overlayable items in internal ram 
                            506 ;--------------------------------------------------------
                            507 	.area OSEG    (OVR,DATA)
                            508 ;--------------------------------------------------------
                            509 ; Stack segment in internal ram 
                            510 ;--------------------------------------------------------
                            511 	.area	SSEG	(DATA)
   0000                     512 __start__stack:
   0000                     513 	.ds	1
                            514 
                            515 ;--------------------------------------------------------
                            516 ; indirectly addressable internal ram data
                            517 ;--------------------------------------------------------
                            518 	.area ISEG    (DATA)
                            519 ;--------------------------------------------------------
                            520 ; bit data
                            521 ;--------------------------------------------------------
                            522 	.area BSEG    (BIT)
   0000                     523 _disp_4bytes_sloc0_1_0:
   0000                     524 	.ds 1
   0001                     525 _isr_zero_sloc0_1_0:
   0001                     526 	.ds 1
                            527 ;--------------------------------------------------------
                            528 ; paged external ram data
                            529 ;--------------------------------------------------------
                            530 	.area PSEG    (PAG,XDATA)
                            531 ;--------------------------------------------------------
                            532 ; external ram data
                            533 ;--------------------------------------------------------
                            534 	.area XSEG    (XDATA)
   0000                     535 _num::
   0000                     536 	.ds 2
   0002                     537 _addr::
   0002                     538 	.ds 4
   0006                     539 _block::
   0006                     540 	.ds 2
   0008                     541 _add::
   0008                     542 	.ds 2
   000A                     543 _dat::
   000A                     544 	.ds 2
   000C                     545 _ss::
   000C                     546 	.ds 64
   004C                     547 _y::
   004C                     548 	.ds 2
   004E                     549 _x::
   004E                     550 	.ds 1
   004F                     551 _Send_Byte::
   004F                     552 	.ds 2
   0051                     553 _eeprom_adr::
   0051                     554 	.ds 3
   0054                     555 _r1::
   0054                     556 	.ds 2
   0056                     557 _prev_startadd::
   0056                     558 	.ds 2
   0058                     559 _minute::
   0058                     560 	.ds 2
   005A                     561 _sec::
   005A                     562 	.ds 2
   005C                     563 _deci::
   005C                     564 	.ds 2
   005E                     565 _millis::
   005E                     566 	.ds 2
   0060                     567 _advance::
   0060                     568 	.ds 2
   0062                     569 _lcdprevpos::
   0062                     570 	.ds 2
   0064                     571 _val::
   0064                     572 	.ds 10
   006E                     573 _row_vals::
   006E                     574 	.ds 8
   0076                     575 _ccode::
   0076                     576 	.ds 1
   0077                     577 _lcdinitbit::
   0077                     578 	.ds 2
   0079                     579 _putstr_s_1_1:
   0079                     580 	.ds 3
   007C                     581 _putchar_c_1_1:
   007C                     582 	.ds 1
   007D                     583 _eeprom_functions_startadd_1_1:
   007D                     584 	.ds 2
   007F                     585 _eeprom_functions_length_1_1:
   007F                     586 	.ds 2
   0081                     587 _get_addr_i_1_1:
   0081                     588 	.ds 2
   0083                     589 _get_addr_num_1_1:
   0083                     590 	.ds 2
   0085                     591 _get_addr_exp_1_1:
   0085                     592 	.ds 2
   0087                     593 _get_data_i_1_1:
   0087                     594 	.ds 2
   0089                     595 _get_data_num_1_1:
   0089                     596 	.ds 2
   008B                     597 _get_data_exp_1_1:
   008B                     598 	.ds 2
   008D                     599 _get_data_dta_1_1:
   008D                     600 	.ds 2
   008F                     601 _disp_4bytes_startadd_1_1:
   008F                     602 	.ds 2
   0091                     603 _disp_4bytes_b_1_1:
   0091                     604 	.ds 2
   0093                     605 _disp_4bytes_c_1_1:
   0093                     606 	.ds 2
   0095                     607 _disp_4bytes_p_1_1:
   0095                     608 	.ds 1
   0096                     609 _disp_4bytes_q_1_1:
   0096                     610 	.ds 1
   0097                     611 _disp_4bytes_r_1_1:
   0097                     612 	.ds 1
   0098                     613 _disp_4bytes_s_1_1:
   0098                     614 	.ds 1
   0099                     615 _disp_4bytes_t_1_1:
   0099                     616 	.ds 1
   009A                     617 _block_print_PARM_2:
   009A                     618 	.ds 2
   009C                     619 _block_print_startadd_1_1:
   009C                     620 	.ds 2
   009E                     621 _block_print_j_1_1:
   009E                     622 	.ds 2
   00A0                     623 _expander_functions_p_1_1:
   00A0                     624 	.ds 16
   00B0                     625 _expander_functions_pw_1_1:
   00B0                     626 	.ds 16
                            627 ;--------------------------------------------------------
                            628 ; external initialized ram data
                            629 ;--------------------------------------------------------
                            630 	.area XISEG   (XDATA)
                            631 	.area HOME    (CODE)
                            632 	.area GSINIT0 (CODE)
                            633 	.area GSINIT1 (CODE)
                            634 	.area GSINIT2 (CODE)
                            635 	.area GSINIT3 (CODE)
                            636 	.area GSINIT4 (CODE)
                            637 	.area GSINIT5 (CODE)
                            638 	.area GSINIT  (CODE)
                            639 	.area GSFINAL (CODE)
                            640 	.area CSEG    (CODE)
                            641 ;--------------------------------------------------------
                            642 ; interrupt vector 
                            643 ;--------------------------------------------------------
                            644 	.area HOME    (CODE)
   0000                     645 __interrupt_vect:
   0000 02s00r00            646 	ljmp	__sdcc_gsinit_startup
   0003 02s39rE7            647 	ljmp	_isr_zero
   0006                     648 	.ds	5
   000B 02s28rFA            649 	ljmp	_isr_one
                            650 ;--------------------------------------------------------
                            651 ; global & static initialisations
                            652 ;--------------------------------------------------------
                            653 	.area HOME    (CODE)
                            654 	.area GSINIT  (CODE)
                            655 	.area GSFINAL (CODE)
                            656 	.area GSINIT  (CODE)
                            657 	.globl __sdcc_gsinit_startup
                            658 	.globl __sdcc_program_startup
                            659 	.globl __start__stack
                            660 	.globl __mcs51_genXINIT
                            661 	.globl __mcs51_genXRAMCLEAR
                            662 	.globl __mcs51_genRAMCLEAR
                            663 	.area GSFINAL (CODE)
   0000 02s00r00            664 	ljmp	__sdcc_program_startup
                            665 ;--------------------------------------------------------
                            666 ; Home
                            667 ;--------------------------------------------------------
                            668 	.area HOME    (CODE)
                            669 	.area CSEG    (CODE)
   0000                     670 __sdcc_program_startup:
   0000 12s00r0C            671 	lcall	_main
                            672 ;	return from main will lock up
   0003 80 FE               673 	sjmp .
                            674 ;--------------------------------------------------------
                            675 ; code
                            676 ;--------------------------------------------------------
                            677 	.area CSEG    (CODE)
                            678 ;------------------------------------------------------------
                            679 ;Allocation info for local variables in function '_sdcc_external_startup'
                            680 ;------------------------------------------------------------
                            681 ;------------------------------------------------------------
                            682 ;	main4.c:76: _sdcc_external_startup()
                            683 ;	-----------------------------------------
                            684 ;	 function _sdcc_external_startup
                            685 ;	-----------------------------------------
   0005                     686 __sdcc_external_startup:
                    0002    687 	ar2 = 0x02
                    0003    688 	ar3 = 0x03
                    0004    689 	ar4 = 0x04
                    0005    690 	ar5 = 0x05
                    0006    691 	ar6 = 0x06
                    0007    692 	ar7 = 0x07
                    0000    693 	ar0 = 0x00
                    0001    694 	ar1 = 0x01
                            695 ;	main4.c:78: AUXR = AUXR | 0x0C;         //Logical OR with 0x0C to Select utilization of externak EEPROM
                            696 ;	genOr
   0005 43 8E 0C            697 	orl	_AUXR,#0x0C
                            698 ;	main4.c:79: return 0;
                            699 ;	genRet
                            700 ;	Peephole 182.b	used 16 bit load of dptr
   0008 90 00 00            701 	mov	dptr,#0x0000
                            702 ;	Peephole 300	removed redundant label 00101$
   000B 22                  703 	ret
                            704 ;------------------------------------------------------------
                            705 ;Allocation info for local variables in function 'main'
                            706 ;------------------------------------------------------------
                            707 ;i                         Allocated with name '_main_i_1_1'
                            708 ;------------------------------------------------------------
                            709 ;	main4.c:82: void main() _naked
                            710 ;	-----------------------------------------
                            711 ;	 function main
                            712 ;	-----------------------------------------
   000C                     713 _main:
                            714 ;	naked function: no prologue.
                            715 ;	main4.c:86: num=0;
                            716 ;	genAssign
   000C 90s00r00            717 	mov	dptr,#_num
   000F E4                  718 	clr	a
   0010 F0                  719 	movx	@dptr,a
   0011 A3                  720 	inc	dptr
   0012 F0                  721 	movx	@dptr,a
                            722 ;	main4.c:88: prev_startadd=0;
                            723 ;	genAssign
   0013 90s00r56            724 	mov	dptr,#_prev_startadd
   0016 E4                  725 	clr	a
   0017 F0                  726 	movx	@dptr,a
   0018 A3                  727 	inc	dptr
   0019 F0                  728 	movx	@dptr,a
                            729 ;	main4.c:89: for(i=0;i<3;i++)
                            730 ;	genAssign
   001A 7A 00               731 	mov	r2,#0x00
   001C 7B 00               732 	mov	r3,#0x00
   001E                     733 00104$:
                            734 ;	genCmpLt
                            735 ;	genCmp
   001E C3                  736 	clr	c
   001F EA                  737 	mov	a,r2
   0020 94 03               738 	subb	a,#0x03
   0022 EB                  739 	mov	a,r3
   0023 64 80               740 	xrl	a,#0x80
   0025 94 80               741 	subb	a,#0x80
                            742 ;	genIfxJump
                            743 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0027 50 13               744 	jnc	00107$
                            745 ;	Peephole 300	removed redundant label 00121$
                            746 ;	main4.c:91: eeprom_adr[i]=0;
                            747 ;	genPlus
                            748 ;	Peephole 236.g	used r2 instead of ar2
   0029 EA                  749 	mov	a,r2
   002A 24r51               750 	add	a,#_eeprom_adr
   002C F5 82               751 	mov	dpl,a
                            752 ;	Peephole 236.g	used r3 instead of ar3
   002E EB                  753 	mov	a,r3
   002F 34s00               754 	addc	a,#(_eeprom_adr >> 8)
   0031 F5 83               755 	mov	dph,a
                            756 ;	genPointerSet
                            757 ;     genFarPointerSet
                            758 ;	Peephole 181	changed mov to clr
   0033 E4                  759 	clr	a
   0034 F0                  760 	movx	@dptr,a
                            761 ;	main4.c:89: for(i=0;i<3;i++)
                            762 ;	genPlus
                            763 ;     genPlusIncr
                            764 ;	tail increment optimized (range 5)
   0035 0A                  765 	inc	r2
   0036 BA 00 E5            766 	cjne	r2,#0x00,00104$
   0039 0B                  767 	inc	r3
                            768 ;	Peephole 112.b	changed ljmp to sjmp
   003A 80 E2               769 	sjmp	00104$
   003C                     770 00107$:
                            771 ;	main4.c:93: for(i=0;i<8;i++)
                            772 ;	genAssign
   003C 7A 00               773 	mov	r2,#0x00
   003E 7B 00               774 	mov	r3,#0x00
   0040                     775 00108$:
                            776 ;	genCmpLt
                            777 ;	genCmp
   0040 C3                  778 	clr	c
   0041 EA                  779 	mov	a,r2
   0042 94 08               780 	subb	a,#0x08
   0044 EB                  781 	mov	a,r3
   0045 64 80               782 	xrl	a,#0x80
   0047 94 80               783 	subb	a,#0x80
                            784 ;	genIfxJump
                            785 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0049 50 2A               786 	jnc	00111$
                            787 ;	Peephole 300	removed redundant label 00122$
                            788 ;	main4.c:95: row_vals[i]=0;
                            789 ;	genPlus
                            790 ;	Peephole 236.g	used r2 instead of ar2
   004B EA                  791 	mov	a,r2
   004C 24r6E               792 	add	a,#_row_vals
   004E F5 82               793 	mov	dpl,a
                            794 ;	Peephole 236.g	used r3 instead of ar3
   0050 EB                  795 	mov	a,r3
   0051 34s00               796 	addc	a,#(_row_vals >> 8)
   0053 F5 83               797 	mov	dph,a
                            798 ;	genPointerSet
                            799 ;     genFarPointerSet
                            800 ;	Peephole 181	changed mov to clr
   0055 E4                  801 	clr	a
   0056 F0                  802 	movx	@dptr,a
                            803 ;	main4.c:96: val[i]=0;
                            804 ;	genLeftShift
                            805 ;	genLeftShiftLiteral
                            806 ;	genlshTwo
   0057 8A 04               807 	mov	ar4,r2
   0059 EB                  808 	mov	a,r3
   005A CC                  809 	xch	a,r4
   005B 25 E0               810 	add	a,acc
   005D CC                  811 	xch	a,r4
   005E 33                  812 	rlc	a
   005F FD                  813 	mov	r5,a
                            814 ;	genPlus
                            815 ;	Peephole 236.g	used r4 instead of ar4
   0060 EC                  816 	mov	a,r4
   0061 24r64               817 	add	a,#_val
   0063 F5 82               818 	mov	dpl,a
                            819 ;	Peephole 236.g	used r5 instead of ar5
   0065 ED                  820 	mov	a,r5
   0066 34s00               821 	addc	a,#(_val >> 8)
   0068 F5 83               822 	mov	dph,a
                            823 ;	genPointerSet
                            824 ;     genFarPointerSet
                            825 ;	Peephole 181	changed mov to clr
   006A E4                  826 	clr	a
   006B F0                  827 	movx	@dptr,a
   006C A3                  828 	inc	dptr
                            829 ;	Peephole 101	removed redundant mov
   006D F0                  830 	movx	@dptr,a
                            831 ;	main4.c:93: for(i=0;i<8;i++)
                            832 ;	genPlus
                            833 ;     genPlusIncr
                            834 ;	tail increment optimized (range 8)
   006E 0A                  835 	inc	r2
   006F BA 00 CE            836 	cjne	r2,#0x00,00108$
   0072 0B                  837 	inc	r3
                            838 ;	Peephole 112.b	changed ljmp to sjmp
   0073 80 CB               839 	sjmp	00108$
   0075                     840 00111$:
                            841 ;	main4.c:100: P1_7=0;
                            842 ;	genAssign
   0075 C2 97               843 	clr	_P1_7
                            844 ;	main4.c:103: millis=0;
                            845 ;	genAssign
   0077 90s00r5E            846 	mov	dptr,#_millis
   007A E4                  847 	clr	a
   007B F0                  848 	movx	@dptr,a
   007C A3                  849 	inc	dptr
   007D F0                  850 	movx	@dptr,a
                            851 ;	main4.c:104: minute=0;
                            852 ;	genAssign
   007E 90s00r58            853 	mov	dptr,#_minute
   0081 E4                  854 	clr	a
   0082 F0                  855 	movx	@dptr,a
   0083 A3                  856 	inc	dptr
   0084 F0                  857 	movx	@dptr,a
                            858 ;	main4.c:105: sec=0;
                            859 ;	genAssign
   0085 90s00r5A            860 	mov	dptr,#_sec
   0088 E4                  861 	clr	a
   0089 F0                  862 	movx	@dptr,a
   008A A3                  863 	inc	dptr
   008B F0                  864 	movx	@dptr,a
                            865 ;	main4.c:106: deci=0;
                            866 ;	genAssign
   008C 90s00r5C            867 	mov	dptr,#_deci
   008F E4                  868 	clr	a
   0090 F0                  869 	movx	@dptr,a
   0091 A3                  870 	inc	dptr
   0092 F0                  871 	movx	@dptr,a
                            872 ;	main4.c:107: advance=0;
                            873 ;	genAssign
   0093 90s00r60            874 	mov	dptr,#_advance
   0096 E4                  875 	clr	a
   0097 F0                  876 	movx	@dptr,a
   0098 A3                  877 	inc	dptr
   0099 F0                  878 	movx	@dptr,a
                            879 ;	main4.c:110: SCON = 0x50;			//Serial mode 8-bit UART variable frequency
                            880 ;	genAssign
   009A 75 98 50            881 	mov	_SCON,#0x50
                            882 ;	main4.c:111: TMOD |= 0x20;			//Timer mode 2 auto reload 8-bit
                            883 ;	genOr
   009D 43 89 20            884 	orl	_TMOD,#0x20
                            885 ;	main4.c:112: TH1=0xFD;				//9600 Baudrate
                            886 ;	genAssign
   00A0 75 8D FD            887 	mov	_TH1,#0xFD
                            888 ;	main4.c:113: TL1=0x00;
                            889 ;	genAssign
   00A3 75 8B 00            890 	mov	_TL1,#0x00
                            891 ;	main4.c:114: TR1=1;					//Generate baud rate for serial comm
                            892 ;	genAssign
   00A6 D2 8E               893 	setb	_TR1
                            894 ;	main4.c:115: TI=1;					//Set TI=1 so program doesn't wait to clear it for first time
                            895 ;	genAssign
   00A8 D2 99               896 	setb	_TI
                            897 ;	main4.c:118: TMOD |= 0x01;	// timer 0 , Mode 1
                            898 ;	genOr
   00AA 43 89 01            899 	orl	_TMOD,#0x01
                            900 ;	main4.c:119: TH0 = 0xFC;  // time for 1 ms will be from count incrementing from FC65H to FFFFh
                            901 ;	genAssign
   00AD 75 8C FC            902 	mov	_TH0,#0xFC
                            903 ;	main4.c:120: TL0 = 0x70;
                            904 ;	genAssign
   00B0 75 8A 70            905 	mov	_TL0,#0x70
                            906 ;	main4.c:122: IE|= 0x82;
                            907 ;	genOr
   00B3 43 A8 82            908 	orl	_IE,#0x82
                            909 ;	main4.c:125: lcdinit();
                            910 ;	genCall
   00B6 12s00r00            911 	lcall	_lcdinit
                            912 ;	main4.c:126: lcdgotoaddr(89);
                            913 ;	genCall
                            914 ;	Peephole 182.b	used 16 bit load of dptr
   00B9 90 00 59            915 	mov	dptr,#0x0059
   00BC 12s00r00            916 	lcall	_lcdgotoaddr
                            917 ;	main4.c:127: lcdputch('0');
                            918 ;	genCall
   00BF 75 82 30            919 	mov	dpl,#0x30
   00C2 12s00r00            920 	lcall	_lcdputch
                            921 ;	main4.c:128: lcdputch('0');
                            922 ;	genCall
   00C5 75 82 30            923 	mov	dpl,#0x30
   00C8 12s00r00            924 	lcall	_lcdputch
                            925 ;	main4.c:129: lcdputch(':');
                            926 ;	genCall
   00CB 75 82 3A            927 	mov	dpl,#0x3A
   00CE 12s00r00            928 	lcall	_lcdputch
                            929 ;	main4.c:130: lcdputch('0');
                            930 ;	genCall
   00D1 75 82 30            931 	mov	dpl,#0x30
   00D4 12s00r00            932 	lcall	_lcdputch
                            933 ;	main4.c:131: lcdputch('0');
                            934 ;	genCall
   00D7 75 82 30            935 	mov	dpl,#0x30
   00DA 12s00r00            936 	lcall	_lcdputch
                            937 ;	main4.c:132: lcdputch('.');
                            938 ;	genCall
   00DD 75 82 2E            939 	mov	dpl,#0x2E
   00E0 12s00r00            940 	lcall	_lcdputch
                            941 ;	main4.c:133: lcdputch('0');
                            942 ;	genCall
   00E3 75 82 30            943 	mov	dpl,#0x30
   00E6 12s00r00            944 	lcall	_lcdputch
                            945 ;	main4.c:135: TR0=1;
                            946 ;	genAssign
   00E9 D2 8C               947 	setb	_TR0
                            948 ;	main4.c:143: while(1)
   00EB                     949 00102$:
                            950 ;	main4.c:146: main_menu();
                            951 ;	genCall
   00EB 12s0Fr01            952 	lcall	_main_menu
                            953 ;	Peephole 112.b	changed ljmp to sjmp
   00EE 80 FB               954 	sjmp	00102$
                            955 ;	Peephole 300	removed redundant label 00112$
                            956 ;	naked function: no epilogue.
                            957 ;------------------------------------------------------------
                            958 ;Allocation info for local variables in function 'putstr'
                            959 ;------------------------------------------------------------
                            960 ;s                         Allocated with name '_putstr_s_1_1'
                            961 ;i                         Allocated with name '_putstr_i_1_1'
                            962 ;------------------------------------------------------------
                            963 ;	main4.c:151: int putstr (char *s)
                            964 ;	-----------------------------------------
                            965 ;	 function putstr
                            966 ;	-----------------------------------------
   00F0                     967 _putstr:
                            968 ;	genReceive
   00F0 AA F0               969 	mov	r2,b
   00F2 AB 83               970 	mov	r3,dph
   00F4 E5 82               971 	mov	a,dpl
   00F6 90s00r79            972 	mov	dptr,#_putstr_s_1_1
   00F9 F0                  973 	movx	@dptr,a
   00FA A3                  974 	inc	dptr
   00FB EB                  975 	mov	a,r3
   00FC F0                  976 	movx	@dptr,a
   00FD A3                  977 	inc	dptr
   00FE EA                  978 	mov	a,r2
   00FF F0                  979 	movx	@dptr,a
                            980 ;	main4.c:154: while (*s){			// output characters until NULL found
                            981 ;	genAssign
   0100 90s00r79            982 	mov	dptr,#_putstr_s_1_1
   0103 E0                  983 	movx	a,@dptr
   0104 FA                  984 	mov	r2,a
   0105 A3                  985 	inc	dptr
   0106 E0                  986 	movx	a,@dptr
   0107 FB                  987 	mov	r3,a
   0108 A3                  988 	inc	dptr
   0109 E0                  989 	movx	a,@dptr
   010A FC                  990 	mov	r4,a
                            991 ;	genAssign
   010B 7D 00               992 	mov	r5,#0x00
   010D 7E 00               993 	mov	r6,#0x00
   010F                     994 00101$:
                            995 ;	genPointerGet
                            996 ;	genGenPointerGet
   010F 8A 82               997 	mov	dpl,r2
   0111 8B 83               998 	mov	dph,r3
   0113 8C F0               999 	mov	b,r4
   0115 12s00r00           1000 	lcall	__gptrget
                           1001 ;	genIfx
   0118 FF                 1002 	mov	r7,a
                           1003 ;	Peephole 105	removed redundant mov
                           1004 ;	genIfxJump
                           1005 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0119 60 30              1006 	jz	00108$
                           1007 ;	Peephole 300	removed redundant label 00109$
                           1008 ;	main4.c:155: putchar(*s++);
                           1009 ;	genAssign
                           1010 ;	genPlus
                           1011 ;     genPlusIncr
   011B 0A                 1012 	inc	r2
   011C BA 00 01           1013 	cjne	r2,#0x00,00110$
   011F 0B                 1014 	inc	r3
   0120                    1015 00110$:
                           1016 ;	genAssign
   0120 90s00r79           1017 	mov	dptr,#_putstr_s_1_1
   0123 EA                 1018 	mov	a,r2
   0124 F0                 1019 	movx	@dptr,a
   0125 A3                 1020 	inc	dptr
   0126 EB                 1021 	mov	a,r3
   0127 F0                 1022 	movx	@dptr,a
   0128 A3                 1023 	inc	dptr
   0129 EC                 1024 	mov	a,r4
   012A F0                 1025 	movx	@dptr,a
                           1026 ;	genCall
   012B 8F 82              1027 	mov	dpl,r7
   012D C0 02              1028 	push	ar2
   012F C0 03              1029 	push	ar3
   0131 C0 04              1030 	push	ar4
   0133 C0 05              1031 	push	ar5
   0135 C0 06              1032 	push	ar6
   0137 12s01r60           1033 	lcall	_putchar
   013A D0 06              1034 	pop	ar6
   013C D0 05              1035 	pop	ar5
   013E D0 04              1036 	pop	ar4
   0140 D0 03              1037 	pop	ar3
   0142 D0 02              1038 	pop	ar2
                           1039 ;	main4.c:156: i++;
                           1040 ;	genPlus
                           1041 ;     genPlusIncr
                           1042 ;	tail increment optimized (range 8)
   0144 0D                 1043 	inc	r5
   0145 BD 00 C7           1044 	cjne	r5,#0x00,00101$
   0148 0E                 1045 	inc	r6
                           1046 ;	Peephole 112.b	changed ljmp to sjmp
   0149 80 C4              1047 	sjmp	00101$
   014B                    1048 00108$:
                           1049 ;	genAssign
   014B 90s00r79           1050 	mov	dptr,#_putstr_s_1_1
   014E EA                 1051 	mov	a,r2
   014F F0                 1052 	movx	@dptr,a
   0150 A3                 1053 	inc	dptr
   0151 EB                 1054 	mov	a,r3
   0152 F0                 1055 	movx	@dptr,a
   0153 A3                 1056 	inc	dptr
   0154 EC                 1057 	mov	a,r4
   0155 F0                 1058 	movx	@dptr,a
                           1059 ;	main4.c:159: return i+1;
                           1060 ;	genPlus
                           1061 ;     genPlusIncr
   0156 0D                 1062 	inc	r5
   0157 BD 00 01           1063 	cjne	r5,#0x00,00111$
   015A 0E                 1064 	inc	r6
   015B                    1065 00111$:
                           1066 ;	genRet
   015B 8D 82              1067 	mov	dpl,r5
   015D 8E 83              1068 	mov	dph,r6
                           1069 ;	Peephole 300	removed redundant label 00104$
   015F 22                 1070 	ret
                           1071 ;------------------------------------------------------------
                           1072 ;Allocation info for local variables in function 'putchar'
                           1073 ;------------------------------------------------------------
                           1074 ;c                         Allocated with name '_putchar_c_1_1'
                           1075 ;------------------------------------------------------------
                           1076 ;	main4.c:162: void putchar (char c)
                           1077 ;	-----------------------------------------
                           1078 ;	 function putchar
                           1079 ;	-----------------------------------------
   0160                    1080 _putchar:
                           1081 ;	genReceive
   0160 E5 82              1082 	mov	a,dpl
   0162 90s00r7C           1083 	mov	dptr,#_putchar_c_1_1
   0165 F0                 1084 	movx	@dptr,a
                           1085 ;	main4.c:164: while (TI == 0);
   0166                    1086 00101$:
                           1087 ;	genIfx
                           1088 ;	genIfxJump
                           1089 ;	Peephole 108.d	removed ljmp by inverse jump logic
   0166 30 99 FD           1090 	jnb	_TI,00101$
                           1091 ;	Peephole 300	removed redundant label 00108$
                           1092 ;	main4.c:165: SBUF = c;  	// load serial port with transmit value
                           1093 ;	genAssign
   0169 90s00r7C           1094 	mov	dptr,#_putchar_c_1_1
   016C E0                 1095 	movx	a,@dptr
   016D F5 99              1096 	mov	_SBUF,a
                           1097 ;	main4.c:166: TI = 0;  	// clear TI flag
                           1098 ;	genAssign
   016F C2 99              1099 	clr	_TI
                           1100 ;	Peephole 300	removed redundant label 00104$
   0171 22                 1101 	ret
                           1102 ;------------------------------------------------------------
                           1103 ;Allocation info for local variables in function 'getchar'
                           1104 ;------------------------------------------------------------
                           1105 ;------------------------------------------------------------
                           1106 ;	main4.c:170: char getchar ()
                           1107 ;	-----------------------------------------
                           1108 ;	 function getchar
                           1109 ;	-----------------------------------------
   0172                    1110 _getchar:
                           1111 ;	main4.c:173: while (RI == 0);
   0172                    1112 00101$:
                           1113 ;	genIfx
                           1114 ;	genIfxJump
                           1115 ;	Peephole 108.d	removed ljmp by inverse jump logic
                           1116 ;	main4.c:174: RI = 0;			// clear RI flag
                           1117 ;	genAssign
                           1118 ;	Peephole 250.a	using atomic test and clear
   0172 10 98 02           1119 	jbc	_RI,00108$
   0175 80 FB              1120 	sjmp	00101$
   0177                    1121 00108$:
                           1122 ;	main4.c:175: return SBUF;  	// return character from SBUF
                           1123 ;	genAssign
   0177 AA 99              1124 	mov	r2,_SBUF
                           1125 ;	genRet
   0179 8A 82              1126 	mov	dpl,r2
                           1127 ;	Peephole 300	removed redundant label 00104$
   017B 22                 1128 	ret
                           1129 ;------------------------------------------------------------
                           1130 ;Allocation info for local variables in function 'go_to_address'
                           1131 ;------------------------------------------------------------
                           1132 ;i                         Allocated with name '_go_to_address_i_1_1'
                           1133 ;------------------------------------------------------------
                           1134 ;	main4.c:179: void go_to_address(void)
                           1135 ;	-----------------------------------------
                           1136 ;	 function go_to_address
                           1137 ;	-----------------------------------------
   017C                    1138 _go_to_address:
                           1139 ;	main4.c:183: printf("\n\n\rPlease Enter a address of the location in hex LCD\n\n\r");
                           1140 ;	genIpush
   017C 74r00              1141 	mov	a,#__str_0
   017E C0 E0              1142 	push	acc
   0180 74s00              1143 	mov	a,#(__str_0 >> 8)
   0182 C0 E0              1144 	push	acc
   0184 74 80              1145 	mov	a,#0x80
   0186 C0 E0              1146 	push	acc
                           1147 ;	genCall
   0188 12s00r00           1148 	lcall	_printf
   018B 15 81              1149 	dec	sp
   018D 15 81              1150 	dec	sp
   018F 15 81              1151 	dec	sp
                           1152 ;	main4.c:184: printf("\n\r+------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
                           1153 ;	genIpush
   0191 74r38              1154 	mov	a,#__str_1
   0193 C0 E0              1155 	push	acc
   0195 74s00              1156 	mov	a,#(__str_1 >> 8)
   0197 C0 E0              1157 	push	acc
   0199 74 80              1158 	mov	a,#0x80
   019B C0 E0              1159 	push	acc
                           1160 ;	genCall
   019D 12s00r00           1161 	lcall	_printf
   01A0 15 81              1162 	dec	sp
   01A2 15 81              1163 	dec	sp
   01A4 15 81              1164 	dec	sp
                           1165 ;	main4.c:185: printf("\n\r|      |00|01|02|03|04|05|06|07|08|19|10|11|12|13|14|15|");
                           1166 ;	genIpush
   01A6 74r73              1167 	mov	a,#__str_2
   01A8 C0 E0              1168 	push	acc
   01AA 74s00              1169 	mov	a,#(__str_2 >> 8)
   01AC C0 E0              1170 	push	acc
   01AE 74 80              1171 	mov	a,#0x80
   01B0 C0 E0              1172 	push	acc
                           1173 ;	genCall
   01B2 12s00r00           1174 	lcall	_printf
   01B5 15 81              1175 	dec	sp
   01B7 15 81              1176 	dec	sp
   01B9 15 81              1177 	dec	sp
                           1178 ;	main4.c:186: printf("\n\r+------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
                           1179 ;	genIpush
   01BB 74r38              1180 	mov	a,#__str_1
   01BD C0 E0              1181 	push	acc
   01BF 74s00              1182 	mov	a,#(__str_1 >> 8)
   01C1 C0 E0              1183 	push	acc
   01C3 74 80              1184 	mov	a,#0x80
   01C5 C0 E0              1185 	push	acc
                           1186 ;	genCall
   01C7 12s00r00           1187 	lcall	_printf
   01CA 15 81              1188 	dec	sp
   01CC 15 81              1189 	dec	sp
   01CE 15 81              1190 	dec	sp
                           1191 ;	main4.c:187: printf("\n\r| Row0 |00|01|02|03|04|05|06|07|08|09|0A|0B|0C|0D|0E|0F|");
                           1192 ;	genIpush
   01D0 74rAE              1193 	mov	a,#__str_3
   01D2 C0 E0              1194 	push	acc
   01D4 74s00              1195 	mov	a,#(__str_3 >> 8)
   01D6 C0 E0              1196 	push	acc
   01D8 74 80              1197 	mov	a,#0x80
   01DA C0 E0              1198 	push	acc
                           1199 ;	genCall
   01DC 12s00r00           1200 	lcall	_printf
   01DF 15 81              1201 	dec	sp
   01E1 15 81              1202 	dec	sp
   01E3 15 81              1203 	dec	sp
                           1204 ;	main4.c:188: printf("\n\r| Row1 |40|41|42|43|44|45|46|47|48|49|4A|4B|4C|4D|4E|4F|");
                           1205 ;	genIpush
   01E5 74rE9              1206 	mov	a,#__str_4
   01E7 C0 E0              1207 	push	acc
   01E9 74s00              1208 	mov	a,#(__str_4 >> 8)
   01EB C0 E0              1209 	push	acc
   01ED 74 80              1210 	mov	a,#0x80
   01EF C0 E0              1211 	push	acc
                           1212 ;	genCall
   01F1 12s00r00           1213 	lcall	_printf
   01F4 15 81              1214 	dec	sp
   01F6 15 81              1215 	dec	sp
   01F8 15 81              1216 	dec	sp
                           1217 ;	main4.c:189: printf("\n\r| Row2 |10|11|12|13|14|15|16|17|18|19|1A|1B|1C|1D|1E|1F|");
                           1218 ;	genIpush
   01FA 74r24              1219 	mov	a,#__str_5
   01FC C0 E0              1220 	push	acc
   01FE 74s01              1221 	mov	a,#(__str_5 >> 8)
   0200 C0 E0              1222 	push	acc
   0202 74 80              1223 	mov	a,#0x80
   0204 C0 E0              1224 	push	acc
                           1225 ;	genCall
   0206 12s00r00           1226 	lcall	_printf
   0209 15 81              1227 	dec	sp
   020B 15 81              1228 	dec	sp
   020D 15 81              1229 	dec	sp
                           1230 ;	main4.c:190: printf("\n\r| Row3 |50|51|52|53|54|55|56|57|58|59|5A|5B|5C|5D|5E|5F|");
                           1231 ;	genIpush
   020F 74r5F              1232 	mov	a,#__str_6
   0211 C0 E0              1233 	push	acc
   0213 74s01              1234 	mov	a,#(__str_6 >> 8)
   0215 C0 E0              1235 	push	acc
   0217 74 80              1236 	mov	a,#0x80
   0219 C0 E0              1237 	push	acc
                           1238 ;	genCall
   021B 12s00r00           1239 	lcall	_printf
   021E 15 81              1240 	dec	sp
   0220 15 81              1241 	dec	sp
   0222 15 81              1242 	dec	sp
                           1243 ;	main4.c:191: printf("\n\r+------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
                           1244 ;	genIpush
   0224 74r38              1245 	mov	a,#__str_1
   0226 C0 E0              1246 	push	acc
   0228 74s00              1247 	mov	a,#(__str_1 >> 8)
   022A C0 E0              1248 	push	acc
   022C 74 80              1249 	mov	a,#0x80
   022E C0 E0              1250 	push	acc
                           1251 ;	genCall
   0230 12s00r00           1252 	lcall	_printf
   0233 15 81              1253 	dec	sp
   0235 15 81              1254 	dec	sp
   0237 15 81              1255 	dec	sp
                           1256 ;	main4.c:192: printf("\n\rEnter the address in hex 0x");   //prompting the user
                           1257 ;	genIpush
   0239 74r9A              1258 	mov	a,#__str_7
   023B C0 E0              1259 	push	acc
   023D 74s01              1260 	mov	a,#(__str_7 >> 8)
   023F C0 E0              1261 	push	acc
   0241 74 80              1262 	mov	a,#0x80
   0243 C0 E0              1263 	push	acc
                           1264 ;	genCall
   0245 12s00r00           1265 	lcall	_printf
   0248 15 81              1266 	dec	sp
   024A 15 81              1267 	dec	sp
   024C 15 81              1268 	dec	sp
                           1269 ;	main4.c:194: num=0;
                           1270 ;	genAssign
   024E 90s00r00           1271 	mov	dptr,#_num
   0251 E4                 1272 	clr	a
   0252 F0                 1273 	movx	@dptr,a
   0253 A3                 1274 	inc	dptr
   0254 F0                 1275 	movx	@dptr,a
                           1276 ;	main4.c:196: for(i=0;i<2;i++)
                           1277 ;	genAssign
   0255 7A 00              1278 	mov	r2,#0x00
   0257 7B 00              1279 	mov	r3,#0x00
   0259                    1280 00130$:
                           1281 ;	genCmpLt
                           1282 ;	genCmp
   0259 C3                 1283 	clr	c
   025A EA                 1284 	mov	a,r2
   025B 94 02              1285 	subb	a,#0x02
   025D EB                 1286 	mov	a,r3
   025E 64 80              1287 	xrl	a,#0x80
   0260 94 80              1288 	subb	a,#0x80
                           1289 ;	genIfxJump
                           1290 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0262 50 5F              1291 	jnc	00133$
                           1292 ;	Peephole 300	removed redundant label 00156$
                           1293 ;	main4.c:198: addr[i]=getchar();
                           1294 ;	genLeftShift
                           1295 ;	genLeftShiftLiteral
                           1296 ;	genlshTwo
   0264 8A 04              1297 	mov	ar4,r2
   0266 EB                 1298 	mov	a,r3
   0267 CC                 1299 	xch	a,r4
   0268 25 E0              1300 	add	a,acc
   026A CC                 1301 	xch	a,r4
   026B 33                 1302 	rlc	a
   026C FD                 1303 	mov	r5,a
                           1304 ;	genPlus
                           1305 ;	Peephole 236.g	used r4 instead of ar4
   026D EC                 1306 	mov	a,r4
   026E 24r02              1307 	add	a,#_addr
   0270 FE                 1308 	mov	r6,a
                           1309 ;	Peephole 236.g	used r5 instead of ar5
   0271 ED                 1310 	mov	a,r5
   0272 34s00              1311 	addc	a,#(_addr >> 8)
   0274 FF                 1312 	mov	r7,a
                           1313 ;	genCall
   0275 C0 02              1314 	push	ar2
   0277 C0 03              1315 	push	ar3
   0279 C0 04              1316 	push	ar4
   027B C0 05              1317 	push	ar5
   027D C0 06              1318 	push	ar6
   027F C0 07              1319 	push	ar7
   0281 12s01r72           1320 	lcall	_getchar
   0284 A8 82              1321 	mov	r0,dpl
   0286 D0 07              1322 	pop	ar7
   0288 D0 06              1323 	pop	ar6
   028A D0 05              1324 	pop	ar5
   028C D0 04              1325 	pop	ar4
   028E D0 03              1326 	pop	ar3
   0290 D0 02              1327 	pop	ar2
                           1328 ;	genCast
   0292 E8                 1329 	mov	a,r0
   0293 33                 1330 	rlc	a
   0294 95 E0              1331 	subb	a,acc
   0296 F9                 1332 	mov	r1,a
                           1333 ;	genPointerSet
                           1334 ;     genFarPointerSet
   0297 8E 82              1335 	mov	dpl,r6
   0299 8F 83              1336 	mov	dph,r7
   029B E8                 1337 	mov	a,r0
   029C F0                 1338 	movx	@dptr,a
   029D A3                 1339 	inc	dptr
   029E E9                 1340 	mov	a,r1
   029F F0                 1341 	movx	@dptr,a
                           1342 ;	main4.c:199: putchar(addr[i]);
                           1343 ;	genPlus
                           1344 ;	Peephole 236.g	used r4 instead of ar4
   02A0 EC                 1345 	mov	a,r4
   02A1 24r02              1346 	add	a,#_addr
   02A3 F5 82              1347 	mov	dpl,a
                           1348 ;	Peephole 236.g	used r5 instead of ar5
   02A5 ED                 1349 	mov	a,r5
   02A6 34s00              1350 	addc	a,#(_addr >> 8)
   02A8 F5 83              1351 	mov	dph,a
                           1352 ;	genPointerGet
                           1353 ;	genFarPointerGet
   02AA E0                 1354 	movx	a,@dptr
   02AB FC                 1355 	mov	r4,a
   02AC A3                 1356 	inc	dptr
   02AD E0                 1357 	movx	a,@dptr
   02AE FD                 1358 	mov	r5,a
                           1359 ;	genCast
                           1360 ;	genCall
   02AF 8C 82              1361 	mov	dpl,r4
   02B1 C0 02              1362 	push	ar2
   02B3 C0 03              1363 	push	ar3
   02B5 12s01r60           1364 	lcall	_putchar
   02B8 D0 03              1365 	pop	ar3
   02BA D0 02              1366 	pop	ar2
                           1367 ;	main4.c:196: for(i=0;i<2;i++)
                           1368 ;	genPlus
                           1369 ;     genPlusIncr
   02BC 0A                 1370 	inc	r2
                           1371 ;	Peephole 112.b	changed ljmp to sjmp
                           1372 ;	Peephole 243	avoided branch to sjmp
   02BD BA 00 99           1373 	cjne	r2,#0x00,00130$
   02C0 0B                 1374 	inc	r3
                           1375 ;	Peephole 300	removed redundant label 00157$
   02C1 80 96              1376 	sjmp	00130$
   02C3                    1377 00133$:
                           1378 ;	main4.c:203: if(isdigit(addr[1]))
                           1379 ;	genPointerGet
                           1380 ;	genFarPointerGet
   02C3 90s00r04           1381 	mov	dptr,#(_addr + 0x0002)
   02C6 E0                 1382 	movx	a,@dptr
   02C7 FA                 1383 	mov	r2,a
   02C8 A3                 1384 	inc	dptr
   02C9 E0                 1385 	movx	a,@dptr
   02CA FB                 1386 	mov	r3,a
                           1387 ;	genCast
                           1388 ;	genCall
   02CB 8A 82              1389 	mov	dpl,r2
   02CD 12s00r00           1390 	lcall	_isdigit
   02D0 E5 82              1391 	mov	a,dpl
                           1392 ;	genIfx
                           1393 ;	genIfxJump
                           1394 ;	Peephole 108.c	removed ljmp by inverse jump logic
   02D2 60 63              1395 	jz	00122$
                           1396 ;	Peephole 300	removed redundant label 00158$
                           1397 ;	main4.c:205: if(isdigit(addr[0]))
                           1398 ;	genPointerGet
                           1399 ;	genFarPointerGet
   02D4 90s00r02           1400 	mov	dptr,#_addr
   02D7 E0                 1401 	movx	a,@dptr
   02D8 FA                 1402 	mov	r2,a
   02D9 A3                 1403 	inc	dptr
   02DA E0                 1404 	movx	a,@dptr
   02DB FB                 1405 	mov	r3,a
                           1406 ;	genCast
                           1407 ;	genCall
   02DC 8A 82              1408 	mov	dpl,r2
   02DE 12s00r00           1409 	lcall	_isdigit
   02E1 E5 82              1410 	mov	a,dpl
                           1411 ;	genIfx
                           1412 ;	genIfxJump
                           1413 ;	Peephole 108.c	removed ljmp by inverse jump logic
   02E3 60 3A              1414 	jz	00102$
                           1415 ;	Peephole 300	removed redundant label 00159$
                           1416 ;	main4.c:207: num = 16*(addr[0]-48)+(addr[1]-48);
                           1417 ;	genPointerGet
                           1418 ;	genFarPointerGet
   02E5 90s00r02           1419 	mov	dptr,#_addr
   02E8 E0                 1420 	movx	a,@dptr
   02E9 FA                 1421 	mov	r2,a
   02EA A3                 1422 	inc	dptr
   02EB E0                 1423 	movx	a,@dptr
   02EC FB                 1424 	mov	r3,a
                           1425 ;	genMinus
   02ED EA                 1426 	mov	a,r2
   02EE 24 D0              1427 	add	a,#0xd0
   02F0 FA                 1428 	mov	r2,a
   02F1 EB                 1429 	mov	a,r3
   02F2 34 FF              1430 	addc	a,#0xff
                           1431 ;	genLeftShift
                           1432 ;	genLeftShiftLiteral
                           1433 ;	genlshTwo
   02F4 FB                 1434 	mov	r3,a
                           1435 ;	Peephole 105	removed redundant mov
   02F5 C4                 1436 	swap	a
   02F6 54 F0              1437 	anl	a,#0xf0
   02F8 CA                 1438 	xch	a,r2
   02F9 C4                 1439 	swap	a
   02FA CA                 1440 	xch	a,r2
   02FB 6A                 1441 	xrl	a,r2
   02FC CA                 1442 	xch	a,r2
   02FD 54 F0              1443 	anl	a,#0xf0
   02FF CA                 1444 	xch	a,r2
   0300 6A                 1445 	xrl	a,r2
   0301 FB                 1446 	mov	r3,a
                           1447 ;	genPointerGet
                           1448 ;	genFarPointerGet
   0302 90s00r04           1449 	mov	dptr,#(_addr + 0x0002)
   0305 E0                 1450 	movx	a,@dptr
   0306 FC                 1451 	mov	r4,a
   0307 A3                 1452 	inc	dptr
   0308 E0                 1453 	movx	a,@dptr
   0309 FD                 1454 	mov	r5,a
                           1455 ;	genMinus
   030A EC                 1456 	mov	a,r4
   030B 24 D0              1457 	add	a,#0xd0
   030D FC                 1458 	mov	r4,a
   030E ED                 1459 	mov	a,r5
   030F 34 FF              1460 	addc	a,#0xff
   0311 FD                 1461 	mov	r5,a
                           1462 ;	genPlus
   0312 90s00r00           1463 	mov	dptr,#_num
                           1464 ;	Peephole 236.g	used r4 instead of ar4
   0315 EC                 1465 	mov	a,r4
                           1466 ;	Peephole 236.a	used r2 instead of ar2
   0316 2A                 1467 	add	a,r2
   0317 F0                 1468 	movx	@dptr,a
                           1469 ;	Peephole 236.g	used r5 instead of ar5
   0318 ED                 1470 	mov	a,r5
                           1471 ;	Peephole 236.b	used r3 instead of ar3
   0319 3B                 1472 	addc	a,r3
   031A A3                 1473 	inc	dptr
   031B F0                 1474 	movx	@dptr,a
   031C 02s04r50           1475 	ljmp	00123$
   031F                    1476 00102$:
                           1477 ;	main4.c:211: printf("\n\rInvalid input");
                           1478 ;	genIpush
   031F 74rB8              1479 	mov	a,#__str_8
   0321 C0 E0              1480 	push	acc
   0323 74s01              1481 	mov	a,#(__str_8 >> 8)
   0325 C0 E0              1482 	push	acc
   0327 74 80              1483 	mov	a,#0x80
   0329 C0 E0              1484 	push	acc
                           1485 ;	genCall
   032B 12s00r00           1486 	lcall	_printf
   032E 15 81              1487 	dec	sp
   0330 15 81              1488 	dec	sp
   0332 15 81              1489 	dec	sp
   0334 02s04r50           1490 	ljmp	00123$
   0337                    1491 00122$:
                           1492 ;	main4.c:216: if(isdigit(addr[0]))
                           1493 ;	genPointerGet
                           1494 ;	genFarPointerGet
   0337 90s00r02           1495 	mov	dptr,#_addr
   033A E0                 1496 	movx	a,@dptr
   033B FA                 1497 	mov	r2,a
   033C A3                 1498 	inc	dptr
   033D E0                 1499 	movx	a,@dptr
   033E FB                 1500 	mov	r3,a
                           1501 ;	genCast
                           1502 ;	genCall
   033F 8A 82              1503 	mov	dpl,r2
   0341 12s00r00           1504 	lcall	_isdigit
   0344 E5 82              1505 	mov	a,dpl
                           1506 ;	genIfx
                           1507 ;	genIfxJump
   0346 70 03              1508 	jnz	00160$
   0348 02s04r3B           1509 	ljmp	00119$
   034B                    1510 00160$:
                           1511 ;	main4.c:218: switch(addr[1])
                           1512 ;	genPointerGet
                           1513 ;	genFarPointerGet
   034B 90s00r04           1514 	mov	dptr,#(_addr + 0x0002)
   034E E0                 1515 	movx	a,@dptr
   034F FA                 1516 	mov	r2,a
   0350 A3                 1517 	inc	dptr
   0351 E0                 1518 	movx	a,@dptr
   0352 FB                 1519 	mov	r3,a
                           1520 ;	genCmpEq
                           1521 ;	gencjneshort
   0353 BA 41 05           1522 	cjne	r2,#0x41,00161$
   0356 BB 00 02           1523 	cjne	r3,#0x00,00161$
                           1524 ;	Peephole 112.b	changed ljmp to sjmp
   0359 80 58              1525 	sjmp	00105$
   035B                    1526 00161$:
                           1527 ;	genCmpEq
                           1528 ;	gencjneshort
   035B BA 42 05           1529 	cjne	r2,#0x42,00162$
   035E BB 00 02           1530 	cjne	r3,#0x00,00162$
                           1531 ;	Peephole 112.b	changed ljmp to sjmp
   0361 80 5B              1532 	sjmp	00107$
   0363                    1533 00162$:
                           1534 ;	genCmpEq
                           1535 ;	gencjneshort
   0363 BA 43 05           1536 	cjne	r2,#0x43,00163$
   0366 BB 00 02           1537 	cjne	r3,#0x00,00163$
                           1538 ;	Peephole 112.b	changed ljmp to sjmp
   0369 80 5E              1539 	sjmp	00109$
   036B                    1540 00163$:
                           1541 ;	genCmpEq
                           1542 ;	gencjneshort
   036B BA 44 05           1543 	cjne	r2,#0x44,00164$
   036E BB 00 02           1544 	cjne	r3,#0x00,00164$
                           1545 ;	Peephole 112.b	changed ljmp to sjmp
   0371 80 61              1546 	sjmp	00111$
   0373                    1547 00164$:
                           1548 ;	genCmpEq
                           1549 ;	gencjneshort
   0373 BA 45 05           1550 	cjne	r2,#0x45,00165$
   0376 BB 00 02           1551 	cjne	r3,#0x00,00165$
                           1552 ;	Peephole 112.b	changed ljmp to sjmp
   0379 80 64              1553 	sjmp	00113$
   037B                    1554 00165$:
                           1555 ;	genCmpEq
                           1556 ;	gencjneshort
   037B BA 46 05           1557 	cjne	r2,#0x46,00166$
   037E BB 00 02           1558 	cjne	r3,#0x00,00166$
                           1559 ;	Peephole 112.b	changed ljmp to sjmp
   0381 80 67              1560 	sjmp	00115$
   0383                    1561 00166$:
                           1562 ;	genCmpEq
                           1563 ;	gencjneshort
   0383 BA 61 05           1564 	cjne	r2,#0x61,00167$
   0386 BB 00 02           1565 	cjne	r3,#0x00,00167$
                           1566 ;	Peephole 112.b	changed ljmp to sjmp
   0389 80 28              1567 	sjmp	00105$
   038B                    1568 00167$:
                           1569 ;	genCmpEq
                           1570 ;	gencjneshort
   038B BA 62 05           1571 	cjne	r2,#0x62,00168$
   038E BB 00 02           1572 	cjne	r3,#0x00,00168$
                           1573 ;	Peephole 112.b	changed ljmp to sjmp
   0391 80 2B              1574 	sjmp	00107$
   0393                    1575 00168$:
                           1576 ;	genCmpEq
                           1577 ;	gencjneshort
   0393 BA 63 05           1578 	cjne	r2,#0x63,00169$
   0396 BB 00 02           1579 	cjne	r3,#0x00,00169$
                           1580 ;	Peephole 112.b	changed ljmp to sjmp
   0399 80 2E              1581 	sjmp	00109$
   039B                    1582 00169$:
                           1583 ;	genCmpEq
                           1584 ;	gencjneshort
   039B BA 64 05           1585 	cjne	r2,#0x64,00170$
   039E BB 00 02           1586 	cjne	r3,#0x00,00170$
                           1587 ;	Peephole 112.b	changed ljmp to sjmp
   03A1 80 31              1588 	sjmp	00111$
   03A3                    1589 00170$:
                           1590 ;	genCmpEq
                           1591 ;	gencjneshort
   03A3 BA 65 05           1592 	cjne	r2,#0x65,00171$
   03A6 BB 00 02           1593 	cjne	r3,#0x00,00171$
                           1594 ;	Peephole 112.b	changed ljmp to sjmp
   03A9 80 34              1595 	sjmp	00113$
   03AB                    1596 00171$:
                           1597 ;	genCmpEq
                           1598 ;	gencjneshort
                           1599 ;	Peephole 112.b	changed ljmp to sjmp
                           1600 ;	main4.c:220: case 'A': case 'a': addr[1] =10; break;
                           1601 ;	Peephole 112.b	changed ljmp to sjmp
                           1602 ;	Peephole 198.a	optimized misc jump sequence
   03AB BA 66 47           1603 	cjne	r2,#0x66,00116$
   03AE BB 00 44           1604 	cjne	r3,#0x00,00116$
   03B1 80 37              1605 	sjmp	00115$
                           1606 ;	Peephole 300	removed redundant label 00172$
   03B3                    1607 00105$:
                           1608 ;	genPointerSet
                           1609 ;     genFarPointerSet
   03B3 90s00r04           1610 	mov	dptr,#(_addr + 0x0002)
   03B6 74 0A              1611 	mov	a,#0x0A
   03B8 F0                 1612 	movx	@dptr,a
   03B9 A3                 1613 	inc	dptr
                           1614 ;	Peephole 181	changed mov to clr
   03BA E4                 1615 	clr	a
   03BB F0                 1616 	movx	@dptr,a
                           1617 ;	main4.c:221: case 'B': case 'b': addr[1] =11; break;
                           1618 ;	Peephole 112.b	changed ljmp to sjmp
   03BC 80 4C              1619 	sjmp	00117$
   03BE                    1620 00107$:
                           1621 ;	genPointerSet
                           1622 ;     genFarPointerSet
   03BE 90s00r04           1623 	mov	dptr,#(_addr + 0x0002)
   03C1 74 0B              1624 	mov	a,#0x0B
   03C3 F0                 1625 	movx	@dptr,a
   03C4 A3                 1626 	inc	dptr
                           1627 ;	Peephole 181	changed mov to clr
   03C5 E4                 1628 	clr	a
   03C6 F0                 1629 	movx	@dptr,a
                           1630 ;	main4.c:222: case 'C': case 'c': addr[1] =12; break;
                           1631 ;	Peephole 112.b	changed ljmp to sjmp
   03C7 80 41              1632 	sjmp	00117$
   03C9                    1633 00109$:
                           1634 ;	genPointerSet
                           1635 ;     genFarPointerSet
   03C9 90s00r04           1636 	mov	dptr,#(_addr + 0x0002)
   03CC 74 0C              1637 	mov	a,#0x0C
   03CE F0                 1638 	movx	@dptr,a
   03CF A3                 1639 	inc	dptr
                           1640 ;	Peephole 181	changed mov to clr
   03D0 E4                 1641 	clr	a
   03D1 F0                 1642 	movx	@dptr,a
                           1643 ;	main4.c:223: case 'D': case 'd': addr[1] =13; break;
                           1644 ;	Peephole 112.b	changed ljmp to sjmp
   03D2 80 36              1645 	sjmp	00117$
   03D4                    1646 00111$:
                           1647 ;	genPointerSet
                           1648 ;     genFarPointerSet
   03D4 90s00r04           1649 	mov	dptr,#(_addr + 0x0002)
   03D7 74 0D              1650 	mov	a,#0x0D
   03D9 F0                 1651 	movx	@dptr,a
   03DA A3                 1652 	inc	dptr
                           1653 ;	Peephole 181	changed mov to clr
   03DB E4                 1654 	clr	a
   03DC F0                 1655 	movx	@dptr,a
                           1656 ;	main4.c:224: case 'E': case 'e': addr[1] =14; break;
                           1657 ;	Peephole 112.b	changed ljmp to sjmp
   03DD 80 2B              1658 	sjmp	00117$
   03DF                    1659 00113$:
                           1660 ;	genPointerSet
                           1661 ;     genFarPointerSet
   03DF 90s00r04           1662 	mov	dptr,#(_addr + 0x0002)
   03E2 74 0E              1663 	mov	a,#0x0E
   03E4 F0                 1664 	movx	@dptr,a
   03E5 A3                 1665 	inc	dptr
                           1666 ;	Peephole 181	changed mov to clr
   03E6 E4                 1667 	clr	a
   03E7 F0                 1668 	movx	@dptr,a
                           1669 ;	main4.c:225: case 'F': case 'f': addr[1] =15; break;
                           1670 ;	Peephole 112.b	changed ljmp to sjmp
   03E8 80 20              1671 	sjmp	00117$
   03EA                    1672 00115$:
                           1673 ;	genPointerSet
                           1674 ;     genFarPointerSet
   03EA 90s00r04           1675 	mov	dptr,#(_addr + 0x0002)
   03ED 74 0F              1676 	mov	a,#0x0F
   03EF F0                 1677 	movx	@dptr,a
   03F0 A3                 1678 	inc	dptr
                           1679 ;	Peephole 181	changed mov to clr
   03F1 E4                 1680 	clr	a
   03F2 F0                 1681 	movx	@dptr,a
                           1682 ;	main4.c:226: default:printf("\n\rInvalid Input"); break;
                           1683 ;	Peephole 112.b	changed ljmp to sjmp
   03F3 80 15              1684 	sjmp	00117$
   03F5                    1685 00116$:
                           1686 ;	genIpush
   03F5 74rC8              1687 	mov	a,#__str_9
   03F7 C0 E0              1688 	push	acc
   03F9 74s01              1689 	mov	a,#(__str_9 >> 8)
   03FB C0 E0              1690 	push	acc
   03FD 74 80              1691 	mov	a,#0x80
   03FF C0 E0              1692 	push	acc
                           1693 ;	genCall
   0401 12s00r00           1694 	lcall	_printf
   0404 15 81              1695 	dec	sp
   0406 15 81              1696 	dec	sp
   0408 15 81              1697 	dec	sp
                           1698 ;	main4.c:227: }
   040A                    1699 00117$:
                           1700 ;	main4.c:228: num = 16*(addr[0]-48)+(addr[1]);
                           1701 ;	genPointerGet
                           1702 ;	genFarPointerGet
   040A 90s00r02           1703 	mov	dptr,#_addr
   040D E0                 1704 	movx	a,@dptr
   040E FA                 1705 	mov	r2,a
   040F A3                 1706 	inc	dptr
   0410 E0                 1707 	movx	a,@dptr
   0411 FB                 1708 	mov	r3,a
                           1709 ;	genMinus
   0412 EA                 1710 	mov	a,r2
   0413 24 D0              1711 	add	a,#0xd0
   0415 FA                 1712 	mov	r2,a
   0416 EB                 1713 	mov	a,r3
   0417 34 FF              1714 	addc	a,#0xff
                           1715 ;	genLeftShift
                           1716 ;	genLeftShiftLiteral
                           1717 ;	genlshTwo
   0419 FB                 1718 	mov	r3,a
                           1719 ;	Peephole 105	removed redundant mov
   041A C4                 1720 	swap	a
   041B 54 F0              1721 	anl	a,#0xf0
   041D CA                 1722 	xch	a,r2
   041E C4                 1723 	swap	a
   041F CA                 1724 	xch	a,r2
   0420 6A                 1725 	xrl	a,r2
   0421 CA                 1726 	xch	a,r2
   0422 54 F0              1727 	anl	a,#0xf0
   0424 CA                 1728 	xch	a,r2
   0425 6A                 1729 	xrl	a,r2
   0426 FB                 1730 	mov	r3,a
                           1731 ;	genPointerGet
                           1732 ;	genFarPointerGet
   0427 90s00r04           1733 	mov	dptr,#(_addr + 0x0002)
   042A E0                 1734 	movx	a,@dptr
   042B FC                 1735 	mov	r4,a
   042C A3                 1736 	inc	dptr
   042D E0                 1737 	movx	a,@dptr
   042E FD                 1738 	mov	r5,a
                           1739 ;	genPlus
   042F 90s00r00           1740 	mov	dptr,#_num
                           1741 ;	Peephole 236.g	used r4 instead of ar4
   0432 EC                 1742 	mov	a,r4
                           1743 ;	Peephole 236.a	used r2 instead of ar2
   0433 2A                 1744 	add	a,r2
   0434 F0                 1745 	movx	@dptr,a
                           1746 ;	Peephole 236.g	used r5 instead of ar5
   0435 ED                 1747 	mov	a,r5
                           1748 ;	Peephole 236.b	used r3 instead of ar3
   0436 3B                 1749 	addc	a,r3
   0437 A3                 1750 	inc	dptr
   0438 F0                 1751 	movx	@dptr,a
                           1752 ;	Peephole 112.b	changed ljmp to sjmp
   0439 80 15              1753 	sjmp	00123$
   043B                    1754 00119$:
                           1755 ;	main4.c:231: printf("\n\rInvalid Input");
                           1756 ;	genIpush
   043B 74rC8              1757 	mov	a,#__str_9
   043D C0 E0              1758 	push	acc
   043F 74s01              1759 	mov	a,#(__str_9 >> 8)
   0441 C0 E0              1760 	push	acc
   0443 74 80              1761 	mov	a,#0x80
   0445 C0 E0              1762 	push	acc
                           1763 ;	genCall
   0447 12s00r00           1764 	lcall	_printf
   044A 15 81              1765 	dec	sp
   044C 15 81              1766 	dec	sp
   044E 15 81              1767 	dec	sp
   0450                    1768 00123$:
                           1769 ;	main4.c:233: if((num >=0 && num <= 31) || (num >= 64 && num <= 95))      //Checking if the address entered is valid
                           1770 ;	genAssign
   0450 90s00r00           1771 	mov	dptr,#_num
   0453 E0                 1772 	movx	a,@dptr
   0454 FA                 1773 	mov	r2,a
   0455 A3                 1774 	inc	dptr
   0456 E0                 1775 	movx	a,@dptr
                           1776 ;	genCmpLt
                           1777 ;	genCmp
   0457 FB                 1778 	mov	r3,a
                           1779 ;	Peephole 105	removed redundant mov
                           1780 ;	genIfxJump
                           1781 ;	Peephole 108.e	removed ljmp by inverse jump logic
   0458 20 E7 0F           1782 	jb	acc.7,00129$
                           1783 ;	Peephole 300	removed redundant label 00173$
                           1784 ;	genCmpGt
                           1785 ;	genCmp
   045B C3                 1786 	clr	c
   045C 74 1F              1787 	mov	a,#0x1F
   045E 9A                 1788 	subb	a,r2
                           1789 ;	Peephole 159	avoided xrl during execution
   045F 74 80              1790 	mov	a,#(0x00 ^ 0x80)
   0461 8B F0              1791 	mov	b,r3
   0463 63 F0 80           1792 	xrl	b,#0x80
   0466 95 F0              1793 	subb	a,b
                           1794 ;	genIfxJump
                           1795 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0468 50 21              1796 	jnc	00124$
                           1797 ;	Peephole 300	removed redundant label 00174$
   046A                    1798 00129$:
                           1799 ;	genAssign
   046A 90s00r00           1800 	mov	dptr,#_num
   046D E0                 1801 	movx	a,@dptr
   046E FA                 1802 	mov	r2,a
   046F A3                 1803 	inc	dptr
   0470 E0                 1804 	movx	a,@dptr
   0471 FB                 1805 	mov	r3,a
                           1806 ;	genCmpLt
                           1807 ;	genCmp
   0472 C3                 1808 	clr	c
   0473 EA                 1809 	mov	a,r2
   0474 94 40              1810 	subb	a,#0x40
   0476 EB                 1811 	mov	a,r3
   0477 64 80              1812 	xrl	a,#0x80
   0479 94 80              1813 	subb	a,#0x80
                           1814 ;	genIfxJump
                           1815 ;	Peephole 112.b	changed ljmp to sjmp
                           1816 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           1817 ;	genCmpGt
                           1818 ;	genCmp
   047B 40 1D              1819 	jc	00125$
                           1820 ;	Peephole 300	removed redundant label 00175$
                           1821 ;	Peephole 256.a	removed redundant clr c
   047D 74 5F              1822 	mov	a,#0x5F
   047F 9A                 1823 	subb	a,r2
                           1824 ;	Peephole 159	avoided xrl during execution
   0480 74 80              1825 	mov	a,#(0x00 ^ 0x80)
   0482 8B F0              1826 	mov	b,r3
   0484 63 F0 80           1827 	xrl	b,#0x80
   0487 95 F0              1828 	subb	a,b
                           1829 ;	genIfxJump
                           1830 ;	Peephole 112.b	changed ljmp to sjmp
                           1831 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0489 40 0F              1832 	jc	00125$
                           1833 ;	Peephole 300	removed redundant label 00176$
   048B                    1834 00124$:
                           1835 ;	main4.c:236: lcdgotoaddr(num);                                          //printing to LCD
                           1836 ;	genAssign
   048B 90s00r00           1837 	mov	dptr,#_num
   048E E0                 1838 	movx	a,@dptr
   048F FA                 1839 	mov	r2,a
   0490 A3                 1840 	inc	dptr
   0491 E0                 1841 	movx	a,@dptr
   0492 FB                 1842 	mov	r3,a
                           1843 ;	genCall
   0493 8A 82              1844 	mov	dpl,r2
   0495 8B 83              1845 	mov	dph,r3
                           1846 ;	Peephole 112.b	changed ljmp to sjmp
                           1847 ;	Peephole 251.b	replaced sjmp to ret with ret
                           1848 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0497 02s00r00           1849 	ljmp	_lcdgotoaddr
   049A                    1850 00125$:
                           1851 ;	main4.c:239: printf("\n\n\rOut of range address");
                           1852 ;	genIpush
   049A 74rD8              1853 	mov	a,#__str_10
   049C C0 E0              1854 	push	acc
   049E 74s01              1855 	mov	a,#(__str_10 >> 8)
   04A0 C0 E0              1856 	push	acc
   04A2 74 80              1857 	mov	a,#0x80
   04A4 C0 E0              1858 	push	acc
                           1859 ;	genCall
   04A6 12s00r00           1860 	lcall	_printf
   04A9 15 81              1861 	dec	sp
   04AB 15 81              1862 	dec	sp
   04AD 15 81              1863 	dec	sp
                           1864 ;	Peephole 300	removed redundant label 00134$
   04AF 22                 1865 	ret
                           1866 ;------------------------------------------------------------
                           1867 ;Allocation info for local variables in function 'goto_row_column'
                           1868 ;------------------------------------------------------------
                           1869 ;i                         Allocated with name '_goto_row_column_i_1_1'
                           1870 ;------------------------------------------------------------
                           1871 ;	main4.c:244: void goto_row_column(void)
                           1872 ;	-----------------------------------------
                           1873 ;	 function goto_row_column
                           1874 ;	-----------------------------------------
   04B0                    1875 _goto_row_column:
                           1876 ;	main4.c:249: printf("\n\rPlease Enter the row(X = 0 to 3) and column(Y = 0 to 15) coordinates where you wish to place the cursor:");
                           1877 ;	genIpush
   04B0 74rF0              1878 	mov	a,#__str_11
   04B2 C0 E0              1879 	push	acc
   04B4 74s01              1880 	mov	a,#(__str_11 >> 8)
   04B6 C0 E0              1881 	push	acc
   04B8 74 80              1882 	mov	a,#0x80
   04BA C0 E0              1883 	push	acc
                           1884 ;	genCall
   04BC 12s00r00           1885 	lcall	_printf
   04BF 15 81              1886 	dec	sp
   04C1 15 81              1887 	dec	sp
   04C3 15 81              1888 	dec	sp
                           1889 ;	main4.c:250: printf("\n\r+------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
                           1890 ;	genIpush
   04C5 74r38              1891 	mov	a,#__str_1
   04C7 C0 E0              1892 	push	acc
   04C9 74s00              1893 	mov	a,#(__str_1 >> 8)
   04CB C0 E0              1894 	push	acc
   04CD 74 80              1895 	mov	a,#0x80
   04CF C0 E0              1896 	push	acc
                           1897 ;	genCall
   04D1 12s00r00           1898 	lcall	_printf
   04D4 15 81              1899 	dec	sp
   04D6 15 81              1900 	dec	sp
   04D8 15 81              1901 	dec	sp
                           1902 ;	main4.c:251: printf("\n\r|      |00|01|02|03|04|05|06|07|08|19|10|11|12|13|14|15|");
                           1903 ;	genIpush
   04DA 74r73              1904 	mov	a,#__str_2
   04DC C0 E0              1905 	push	acc
   04DE 74s00              1906 	mov	a,#(__str_2 >> 8)
   04E0 C0 E0              1907 	push	acc
   04E2 74 80              1908 	mov	a,#0x80
   04E4 C0 E0              1909 	push	acc
                           1910 ;	genCall
   04E6 12s00r00           1911 	lcall	_printf
   04E9 15 81              1912 	dec	sp
   04EB 15 81              1913 	dec	sp
   04ED 15 81              1914 	dec	sp
                           1915 ;	main4.c:252: printf("\n\r+------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
                           1916 ;	genIpush
   04EF 74r38              1917 	mov	a,#__str_1
   04F1 C0 E0              1918 	push	acc
   04F3 74s00              1919 	mov	a,#(__str_1 >> 8)
   04F5 C0 E0              1920 	push	acc
   04F7 74 80              1921 	mov	a,#0x80
   04F9 C0 E0              1922 	push	acc
                           1923 ;	genCall
   04FB 12s00r00           1924 	lcall	_printf
   04FE 15 81              1925 	dec	sp
   0500 15 81              1926 	dec	sp
   0502 15 81              1927 	dec	sp
                           1928 ;	main4.c:253: printf("\n\r| Row0 |00|01|02|03|04|05|06|07|08|09|0A|0B|0C|0D|0E|0F|");
                           1929 ;	genIpush
   0504 74rAE              1930 	mov	a,#__str_3
   0506 C0 E0              1931 	push	acc
   0508 74s00              1932 	mov	a,#(__str_3 >> 8)
   050A C0 E0              1933 	push	acc
   050C 74 80              1934 	mov	a,#0x80
   050E C0 E0              1935 	push	acc
                           1936 ;	genCall
   0510 12s00r00           1937 	lcall	_printf
   0513 15 81              1938 	dec	sp
   0515 15 81              1939 	dec	sp
   0517 15 81              1940 	dec	sp
                           1941 ;	main4.c:254: printf("\n\r| Row1 |40|41|42|43|44|45|46|47|48|49|4A|4B|4C|4D|4E|4F|");
                           1942 ;	genIpush
   0519 74rE9              1943 	mov	a,#__str_4
   051B C0 E0              1944 	push	acc
   051D 74s00              1945 	mov	a,#(__str_4 >> 8)
   051F C0 E0              1946 	push	acc
   0521 74 80              1947 	mov	a,#0x80
   0523 C0 E0              1948 	push	acc
                           1949 ;	genCall
   0525 12s00r00           1950 	lcall	_printf
   0528 15 81              1951 	dec	sp
   052A 15 81              1952 	dec	sp
   052C 15 81              1953 	dec	sp
                           1954 ;	main4.c:255: printf("\n\r| Row2 |10|11|12|13|14|15|16|17|18|19|1A|1B|1C|1D|1E|1F|");
                           1955 ;	genIpush
   052E 74r24              1956 	mov	a,#__str_5
   0530 C0 E0              1957 	push	acc
   0532 74s01              1958 	mov	a,#(__str_5 >> 8)
   0534 C0 E0              1959 	push	acc
   0536 74 80              1960 	mov	a,#0x80
   0538 C0 E0              1961 	push	acc
                           1962 ;	genCall
   053A 12s00r00           1963 	lcall	_printf
   053D 15 81              1964 	dec	sp
   053F 15 81              1965 	dec	sp
   0541 15 81              1966 	dec	sp
                           1967 ;	main4.c:256: printf("\n\r| Row3 |50|51|52|53|54|55|56|57|58|59|5A|5B|5C|5D|5E|5F|");
                           1968 ;	genIpush
   0543 74r5F              1969 	mov	a,#__str_6
   0545 C0 E0              1970 	push	acc
   0547 74s01              1971 	mov	a,#(__str_6 >> 8)
   0549 C0 E0              1972 	push	acc
   054B 74 80              1973 	mov	a,#0x80
   054D C0 E0              1974 	push	acc
                           1975 ;	genCall
   054F 12s00r00           1976 	lcall	_printf
   0552 15 81              1977 	dec	sp
   0554 15 81              1978 	dec	sp
   0556 15 81              1979 	dec	sp
                           1980 ;	main4.c:257: printf("\n\r+------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+");
                           1981 ;	genIpush
   0558 74r38              1982 	mov	a,#__str_1
   055A C0 E0              1983 	push	acc
   055C 74s00              1984 	mov	a,#(__str_1 >> 8)
   055E C0 E0              1985 	push	acc
   0560 74 80              1986 	mov	a,#0x80
   0562 C0 E0              1987 	push	acc
                           1988 ;	genCall
   0564 12s00r00           1989 	lcall	_printf
   0567 15 81              1990 	dec	sp
   0569 15 81              1991 	dec	sp
   056B 15 81              1992 	dec	sp
                           1993 ;	main4.c:258: printf("\n\rPlease enter the row:\n\r");
                           1994 ;	genIpush
   056D 74r5B              1995 	mov	a,#__str_12
   056F C0 E0              1996 	push	acc
   0571 74s02              1997 	mov	a,#(__str_12 >> 8)
   0573 C0 E0              1998 	push	acc
   0575 74 80              1999 	mov	a,#0x80
   0577 C0 E0              2000 	push	acc
                           2001 ;	genCall
   0579 12s00r00           2002 	lcall	_printf
   057C 15 81              2003 	dec	sp
   057E 15 81              2004 	dec	sp
   0580 15 81              2005 	dec	sp
                           2006 ;	main4.c:259: x= getchar();
                           2007 ;	genCall
   0582 12s01r72           2008 	lcall	_getchar
   0585 AA 82              2009 	mov	r2,dpl
                           2010 ;	genAssign
   0587 90s00r4E           2011 	mov	dptr,#_x
   058A EA                 2012 	mov	a,r2
   058B F0                 2013 	movx	@dptr,a
                           2014 ;	main4.c:260: putchar(x);
                           2015 ;	genCall
   058C 8A 82              2016 	mov	dpl,r2
   058E 12s01r60           2017 	lcall	_putchar
                           2018 ;	main4.c:261: printf("\n\rPlease enter the column:\n\r");
                           2019 ;	genIpush
   0591 74r75              2020 	mov	a,#__str_13
   0593 C0 E0              2021 	push	acc
   0595 74s02              2022 	mov	a,#(__str_13 >> 8)
   0597 C0 E0              2023 	push	acc
   0599 74 80              2024 	mov	a,#0x80
   059B C0 E0              2025 	push	acc
                           2026 ;	genCall
   059D 12s00r00           2027 	lcall	_printf
   05A0 15 81              2028 	dec	sp
   05A2 15 81              2029 	dec	sp
   05A4 15 81              2030 	dec	sp
                           2031 ;	main4.c:262: for(i=0; i<2;i++)
                           2032 ;	genAssign
   05A6 7A 00              2033 	mov	r2,#0x00
   05A8 7B 00              2034 	mov	r3,#0x00
   05AA                    2035 00111$:
                           2036 ;	genCmpLt
                           2037 ;	genCmp
   05AA C3                 2038 	clr	c
   05AB EA                 2039 	mov	a,r2
   05AC 94 02              2040 	subb	a,#0x02
   05AE EB                 2041 	mov	a,r3
   05AF 64 80              2042 	xrl	a,#0x80
   05B1 94 80              2043 	subb	a,#0x80
                           2044 ;	genIfxJump
                           2045 ;	Peephole 108.a	removed ljmp by inverse jump logic
   05B3 50 43              2046 	jnc	00114$
                           2047 ;	Peephole 300	removed redundant label 00124$
                           2048 ;	main4.c:264: y[i]= getchar();
                           2049 ;	genPlus
                           2050 ;	Peephole 236.g	used r2 instead of ar2
   05B5 EA                 2051 	mov	a,r2
   05B6 24r4C              2052 	add	a,#_y
   05B8 FC                 2053 	mov	r4,a
                           2054 ;	Peephole 236.g	used r3 instead of ar3
   05B9 EB                 2055 	mov	a,r3
   05BA 34s00              2056 	addc	a,#(_y >> 8)
   05BC FD                 2057 	mov	r5,a
                           2058 ;	genCall
   05BD C0 02              2059 	push	ar2
   05BF C0 03              2060 	push	ar3
   05C1 C0 04              2061 	push	ar4
   05C3 C0 05              2062 	push	ar5
   05C5 12s01r72           2063 	lcall	_getchar
   05C8 AE 82              2064 	mov	r6,dpl
   05CA D0 05              2065 	pop	ar5
   05CC D0 04              2066 	pop	ar4
   05CE D0 03              2067 	pop	ar3
   05D0 D0 02              2068 	pop	ar2
                           2069 ;	genPointerSet
                           2070 ;     genFarPointerSet
   05D2 8C 82              2071 	mov	dpl,r4
   05D4 8D 83              2072 	mov	dph,r5
   05D6 EE                 2073 	mov	a,r6
   05D7 F0                 2074 	movx	@dptr,a
                           2075 ;	main4.c:265: putchar(y[i]);
                           2076 ;	genPlus
                           2077 ;	Peephole 236.g	used r2 instead of ar2
   05D8 EA                 2078 	mov	a,r2
   05D9 24r4C              2079 	add	a,#_y
   05DB F5 82              2080 	mov	dpl,a
                           2081 ;	Peephole 236.g	used r3 instead of ar3
   05DD EB                 2082 	mov	a,r3
   05DE 34s00              2083 	addc	a,#(_y >> 8)
   05E0 F5 83              2084 	mov	dph,a
                           2085 ;	genPointerGet
                           2086 ;	genFarPointerGet
   05E2 E0                 2087 	movx	a,@dptr
                           2088 ;	genCall
   05E3 FC                 2089 	mov	r4,a
                           2090 ;	Peephole 244.c	loading dpl from a instead of r4
   05E4 F5 82              2091 	mov	dpl,a
   05E6 C0 02              2092 	push	ar2
   05E8 C0 03              2093 	push	ar3
   05EA 12s01r60           2094 	lcall	_putchar
   05ED D0 03              2095 	pop	ar3
   05EF D0 02              2096 	pop	ar2
                           2097 ;	main4.c:262: for(i=0; i<2;i++)
                           2098 ;	genPlus
                           2099 ;     genPlusIncr
   05F1 0A                 2100 	inc	r2
                           2101 ;	Peephole 112.b	changed ljmp to sjmp
                           2102 ;	Peephole 243	avoided branch to sjmp
   05F2 BA 00 B5           2103 	cjne	r2,#0x00,00111$
   05F5 0B                 2104 	inc	r3
                           2105 ;	Peephole 300	removed redundant label 00125$
   05F6 80 B2              2106 	sjmp	00111$
   05F8                    2107 00114$:
                           2108 ;	main4.c:268: if (isdigit(y[1]))
                           2109 ;	genPointerGet
                           2110 ;	genFarPointerGet
   05F8 90s00r4D           2111 	mov	dptr,#(_y + 0x0001)
   05FB E0                 2112 	movx	a,@dptr
                           2113 ;	genCall
   05FC FA                 2114 	mov	r2,a
                           2115 ;	Peephole 244.c	loading dpl from a instead of r2
   05FD F5 82              2116 	mov	dpl,a
   05FF 12s00r00           2117 	lcall	_isdigit
   0602 E5 82              2118 	mov	a,dpl
                           2119 ;	genIfx
                           2120 ;	genIfxJump
                           2121 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0604 60 3C              2122 	jz	00105$
                           2123 ;	Peephole 300	removed redundant label 00126$
                           2124 ;	main4.c:270: if(isdigit(y[0]))
                           2125 ;	genPointerGet
                           2126 ;	genFarPointerGet
   0606 90s00r4C           2127 	mov	dptr,#_y
   0609 E0                 2128 	movx	a,@dptr
                           2129 ;	genCall
   060A FA                 2130 	mov	r2,a
                           2131 ;	Peephole 244.c	loading dpl from a instead of r2
   060B F5 82              2132 	mov	dpl,a
   060D 12s00r00           2133 	lcall	_isdigit
   0610 E5 82              2134 	mov	a,dpl
                           2135 ;	genIfx
                           2136 ;	genIfxJump
                           2137 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0612 60 19              2138 	jz	00102$
                           2139 ;	Peephole 300	removed redundant label 00127$
                           2140 ;	main4.c:272: y[1]= (y[1]-48)+ ((y[0]-48)*10)+48;
                           2141 ;	genPointerGet
                           2142 ;	genFarPointerGet
   0614 90s00r4C           2143 	mov	dptr,#_y
   0617 E0                 2144 	movx	a,@dptr
                           2145 ;	genMinus
   0618 FA                 2146 	mov	r2,a
                           2147 ;	Peephole 105	removed redundant mov
   0619 24 D0              2148 	add	a,#0xd0
                           2149 ;	genMult
                           2150 ;	genMultOneByte
   061B 75 F0 0A           2151 	mov	b,#0x0A
   061E A4                 2152 	mul	ab
   061F FA                 2153 	mov	r2,a
                           2154 ;	genPointerGet
                           2155 ;	genFarPointerGet
   0620 90s00r4D           2156 	mov	dptr,#(_y + 0x0001)
   0623 E0                 2157 	movx	a,@dptr
                           2158 ;	genPlus
   0624 FB                 2159 	mov	r3,a
                           2160 ;	Peephole 177.b	removed redundant mov
                           2161 ;	Peephole 236.a	used r2 instead of ar2
   0625 2A                 2162 	add	a,r2
                           2163 ;	genPointerSet
                           2164 ;     genFarPointerSet
   0626 FA                 2165 	mov	r2,a
   0627 90s00r4D           2166 	mov	dptr,#(_y + 0x0001)
                           2167 ;	Peephole 100	removed redundant mov
   062A F0                 2168 	movx	@dptr,a
                           2169 ;	Peephole 112.b	changed ljmp to sjmp
   062B 80 15              2170 	sjmp	00105$
   062D                    2171 00102$:
                           2172 ;	main4.c:274: else printf("\n\rInvalid Input(1)");
                           2173 ;	genIpush
   062D 74r92              2174 	mov	a,#__str_14
   062F C0 E0              2175 	push	acc
   0631 74s02              2176 	mov	a,#(__str_14 >> 8)
   0633 C0 E0              2177 	push	acc
   0635 74 80              2178 	mov	a,#0x80
   0637 C0 E0              2179 	push	acc
                           2180 ;	genCall
   0639 12s00r00           2181 	lcall	_printf
   063C 15 81              2182 	dec	sp
   063E 15 81              2183 	dec	sp
   0640 15 81              2184 	dec	sp
   0642                    2185 00105$:
                           2186 ;	main4.c:278: if (y[1]=='\r')
                           2187 ;	genPointerGet
                           2188 ;	genFarPointerGet
   0642 90s00r4D           2189 	mov	dptr,#(_y + 0x0001)
   0645 E0                 2190 	movx	a,@dptr
   0646 FA                 2191 	mov	r2,a
                           2192 ;	genCmpEq
                           2193 ;	gencjneshort
                           2194 ;	Peephole 112.b	changed ljmp to sjmp
                           2195 ;	Peephole 198.b	optimized misc jump sequence
   0647 BA 0D 2E           2196 	cjne	r2,#0x0D,00110$
                           2197 ;	Peephole 200.b	removed redundant sjmp
                           2198 ;	Peephole 300	removed redundant label 00128$
                           2199 ;	Peephole 300	removed redundant label 00129$
                           2200 ;	main4.c:280: if(isdigit(y[0]))
                           2201 ;	genPointerGet
                           2202 ;	genFarPointerGet
   064A 90s00r4C           2203 	mov	dptr,#_y
   064D E0                 2204 	movx	a,@dptr
                           2205 ;	genCall
   064E FA                 2206 	mov	r2,a
                           2207 ;	Peephole 244.c	loading dpl from a instead of r2
   064F F5 82              2208 	mov	dpl,a
   0651 12s00r00           2209 	lcall	_isdigit
   0654 E5 82              2210 	mov	a,dpl
                           2211 ;	genIfx
                           2212 ;	genIfxJump
                           2213 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0656 60 0B              2214 	jz	00107$
                           2215 ;	Peephole 300	removed redundant label 00130$
                           2216 ;	main4.c:282: y[1]=y[0];
                           2217 ;	genPointerGet
                           2218 ;	genFarPointerGet
   0658 90s00r4C           2219 	mov	dptr,#_y
   065B E0                 2220 	movx	a,@dptr
                           2221 ;	genPointerSet
                           2222 ;     genFarPointerSet
   065C FA                 2223 	mov	r2,a
   065D 90s00r4D           2224 	mov	dptr,#(_y + 0x0001)
                           2225 ;	Peephole 100	removed redundant mov
   0660 F0                 2226 	movx	@dptr,a
                           2227 ;	Peephole 112.b	changed ljmp to sjmp
   0661 80 15              2228 	sjmp	00110$
   0663                    2229 00107$:
                           2230 ;	main4.c:285: else printf("Invalid Input(4)");
                           2231 ;	genIpush
   0663 74rA5              2232 	mov	a,#__str_15
   0665 C0 E0              2233 	push	acc
   0667 74s02              2234 	mov	a,#(__str_15 >> 8)
   0669 C0 E0              2235 	push	acc
   066B 74 80              2236 	mov	a,#0x80
   066D C0 E0              2237 	push	acc
                           2238 ;	genCall
   066F 12s00r00           2239 	lcall	_printf
   0672 15 81              2240 	dec	sp
   0674 15 81              2241 	dec	sp
   0676 15 81              2242 	dec	sp
   0678                    2243 00110$:
                           2244 ;	main4.c:287: lcdgotoxy(x,y[1]);
                           2245 ;	genAssign
   0678 90s00r4E           2246 	mov	dptr,#_x
   067B E0                 2247 	movx	a,@dptr
   067C FA                 2248 	mov	r2,a
                           2249 ;	genPointerGet
                           2250 ;	genFarPointerGet
   067D 90s00r4D           2251 	mov	dptr,#(_y + 0x0001)
   0680 E0                 2252 	movx	a,@dptr
                           2253 ;	genAssign
   0681 FB                 2254 	mov	r3,a
   0682 90s00r00           2255 	mov	dptr,#_lcdgotoxy_PARM_2
                           2256 ;	Peephole 100	removed redundant mov
   0685 F0                 2257 	movx	@dptr,a
                           2258 ;	genCall
   0686 8A 82              2259 	mov	dpl,r2
                           2260 ;	Peephole 253.b	replaced lcall/ret with ljmp
   0688 02s00r00           2261 	ljmp	_lcdgotoxy
                           2262 ;
                           2263 ;------------------------------------------------------------
                           2264 ;Allocation info for local variables in function 'lcd_functions'
                           2265 ;------------------------------------------------------------
                           2266 ;choice1                   Allocated with name '_lcd_functions_choice1_1_1'
                           2267 ;c                         Allocated with name '_lcd_functions_c_1_1'
                           2268 ;------------------------------------------------------------
                           2269 ;	main4.c:291: void lcd_functions(void)
                           2270 ;	-----------------------------------------
                           2271 ;	 function lcd_functions
                           2272 ;	-----------------------------------------
   068B                    2273 _lcd_functions:
                           2274 ;	main4.c:297: printf("\n\n\r------------------------------------------------------------------------------");
                           2275 ;	genIpush
   068B 74rB6              2276 	mov	a,#__str_16
   068D C0 E0              2277 	push	acc
   068F 74s02              2278 	mov	a,#(__str_16 >> 8)
   0691 C0 E0              2279 	push	acc
   0693 74 80              2280 	mov	a,#0x80
   0695 C0 E0              2281 	push	acc
                           2282 ;	genCall
   0697 12s00r00           2283 	lcall	_printf
   069A 15 81              2284 	dec	sp
   069C 15 81              2285 	dec	sp
   069E 15 81              2286 	dec	sp
                           2287 ;	main4.c:298: printf("\n\r                              LCD FUNCTION MENU");
                           2288 ;	genIpush
   06A0 74r08              2289 	mov	a,#__str_17
   06A2 C0 E0              2290 	push	acc
   06A4 74s03              2291 	mov	a,#(__str_17 >> 8)
   06A6 C0 E0              2292 	push	acc
   06A8 74 80              2293 	mov	a,#0x80
   06AA C0 E0              2294 	push	acc
                           2295 ;	genCall
   06AC 12s00r00           2296 	lcall	_printf
   06AF 15 81              2297 	dec	sp
   06B1 15 81              2298 	dec	sp
   06B3 15 81              2299 	dec	sp
                           2300 ;	main4.c:299: printf("\n\r--------------------------------------------------------------------------------");
                           2301 ;	genIpush
   06B5 74r3A              2302 	mov	a,#__str_18
   06B7 C0 E0              2303 	push	acc
   06B9 74s03              2304 	mov	a,#(__str_18 >> 8)
   06BB C0 E0              2305 	push	acc
   06BD 74 80              2306 	mov	a,#0x80
   06BF C0 E0              2307 	push	acc
                           2308 ;	genCall
   06C1 12s00r00           2309 	lcall	_printf
   06C4 15 81              2310 	dec	sp
   06C6 15 81              2311 	dec	sp
   06C8 15 81              2312 	dec	sp
                           2313 ;	main4.c:300: printf("\n\rFunction 1: Initialize the LCD || lcdinit()");
                           2314 ;	genIpush
   06CA 74r8D              2315 	mov	a,#__str_19
   06CC C0 E0              2316 	push	acc
   06CE 74s03              2317 	mov	a,#(__str_19 >> 8)
   06D0 C0 E0              2318 	push	acc
   06D2 74 80              2319 	mov	a,#0x80
   06D4 C0 E0              2320 	push	acc
                           2321 ;	genCall
   06D6 12s00r00           2322 	lcall	_printf
   06D9 15 81              2323 	dec	sp
   06DB 15 81              2324 	dec	sp
   06DD 15 81              2325 	dec	sp
                           2326 ;	main4.c:301: printf("\n\rFunction 2: Go to a DDRAM address || lcdgotoaddr(int)");
                           2327 ;	genIpush
   06DF 74rBB              2328 	mov	a,#__str_20
   06E1 C0 E0              2329 	push	acc
   06E3 74s03              2330 	mov	a,#(__str_20 >> 8)
   06E5 C0 E0              2331 	push	acc
   06E7 74 80              2332 	mov	a,#0x80
   06E9 C0 E0              2333 	push	acc
                           2334 ;	genCall
   06EB 12s00r00           2335 	lcall	_printf
   06EE 15 81              2336 	dec	sp
   06F0 15 81              2337 	dec	sp
   06F2 15 81              2338 	dec	sp
                           2339 ;	main4.c:302: printf("\n\rFunction 3: Go to location (row,column) || lcdgotoxy( row,column)");
                           2340 ;	genIpush
   06F4 74rF3              2341 	mov	a,#__str_21
   06F6 C0 E0              2342 	push	acc
   06F8 74s03              2343 	mov	a,#(__str_21 >> 8)
   06FA C0 E0              2344 	push	acc
   06FC 74 80              2345 	mov	a,#0x80
   06FE C0 E0              2346 	push	acc
                           2347 ;	genCall
   0700 12s00r00           2348 	lcall	_printf
   0703 15 81              2349 	dec	sp
   0705 15 81              2350 	dec	sp
   0707 15 81              2351 	dec	sp
                           2352 ;	main4.c:303: printf("\n\rFunction 4: LCD print single character at a time || lcdputch(char)");
                           2353 ;	genIpush
   0709 74r37              2354 	mov	a,#__str_22
   070B C0 E0              2355 	push	acc
   070D 74s04              2356 	mov	a,#(__str_22 >> 8)
   070F C0 E0              2357 	push	acc
   0711 74 80              2358 	mov	a,#0x80
   0713 C0 E0              2359 	push	acc
                           2360 ;	genCall
   0715 12s00r00           2361 	lcall	_printf
   0718 15 81              2362 	dec	sp
   071A 15 81              2363 	dec	sp
   071C 15 81              2364 	dec	sp
                           2365 ;	main4.c:304: printf("\n\rFunction 5: LCD print a string || lcdputstr()");
                           2366 ;	genIpush
   071E 74r7C              2367 	mov	a,#__str_23
   0720 C0 E0              2368 	push	acc
   0722 74s04              2369 	mov	a,#(__str_23 >> 8)
   0724 C0 E0              2370 	push	acc
   0726 74 80              2371 	mov	a,#0x80
   0728 C0 E0              2372 	push	acc
                           2373 ;	genCall
   072A 12s00r00           2374 	lcall	_printf
   072D 15 81              2375 	dec	sp
   072F 15 81              2376 	dec	sp
   0731 15 81              2377 	dec	sp
                           2378 ;	main4.c:305: printf("\n\rFunction 6: Clear the screen");
                           2379 ;	genIpush
   0733 74rAC              2380 	mov	a,#__str_24
   0735 C0 E0              2381 	push	acc
   0737 74s04              2382 	mov	a,#(__str_24 >> 8)
   0739 C0 E0              2383 	push	acc
   073B 74 80              2384 	mov	a,#0x80
   073D C0 E0              2385 	push	acc
                           2386 ;	genCall
   073F 12s00r00           2387 	lcall	_printf
   0742 15 81              2388 	dec	sp
   0744 15 81              2389 	dec	sp
   0746 15 81              2390 	dec	sp
                           2391 ;	main4.c:306: printf("\n\rFunction 7: Read the position of the cursor");
                           2392 ;	genIpush
   0748 74rCB              2393 	mov	a,#__str_25
   074A C0 E0              2394 	push	acc
   074C 74s04              2395 	mov	a,#(__str_25 >> 8)
   074E C0 E0              2396 	push	acc
   0750 74 80              2397 	mov	a,#0x80
   0752 C0 E0              2398 	push	acc
                           2399 ;	genCall
   0754 12s00r00           2400 	lcall	_printf
   0757 15 81              2401 	dec	sp
   0759 15 81              2402 	dec	sp
   075B 15 81              2403 	dec	sp
                           2404 ;	main4.c:307: printf("\n\rFunction 8: Create a custom character");
                           2405 ;	genIpush
   075D 74rF9              2406 	mov	a,#__str_26
   075F C0 E0              2407 	push	acc
   0761 74s04              2408 	mov	a,#(__str_26 >> 8)
   0763 C0 E0              2409 	push	acc
   0765 74 80              2410 	mov	a,#0x80
   0767 C0 E0              2411 	push	acc
                           2412 ;	genCall
   0769 12s00r00           2413 	lcall	_printf
   076C 15 81              2414 	dec	sp
   076E 15 81              2415 	dec	sp
   0770 15 81              2416 	dec	sp
                           2417 ;	main4.c:308: printf("\n\rFunction 9: Fun Logo");
                           2418 ;	genIpush
   0772 74r21              2419 	mov	a,#__str_27
   0774 C0 E0              2420 	push	acc
   0776 74s05              2421 	mov	a,#(__str_27 >> 8)
   0778 C0 E0              2422 	push	acc
   077A 74 80              2423 	mov	a,#0x80
   077C C0 E0              2424 	push	acc
                           2425 ;	genCall
   077E 12s00r00           2426 	lcall	_printf
   0781 15 81              2427 	dec	sp
   0783 15 81              2428 	dec	sp
   0785 15 81              2429 	dec	sp
                           2430 ;	main4.c:309: printf("\n\rFunction 0: Go back to main menu");
                           2431 ;	genIpush
   0787 74r38              2432 	mov	a,#__str_28
   0789 C0 E0              2433 	push	acc
   078B 74s05              2434 	mov	a,#(__str_28 >> 8)
   078D C0 E0              2435 	push	acc
   078F 74 80              2436 	mov	a,#0x80
   0791 C0 E0              2437 	push	acc
                           2438 ;	genCall
   0793 12s00r00           2439 	lcall	_printf
   0796 15 81              2440 	dec	sp
   0798 15 81              2441 	dec	sp
   079A 15 81              2442 	dec	sp
                           2443 ;	main4.c:310: printf("\n\r--------------------------------------------------------------------------------");
                           2444 ;	genIpush
   079C 74r3A              2445 	mov	a,#__str_18
   079E C0 E0              2446 	push	acc
   07A0 74s03              2447 	mov	a,#(__str_18 >> 8)
   07A2 C0 E0              2448 	push	acc
   07A4 74 80              2449 	mov	a,#0x80
   07A6 C0 E0              2450 	push	acc
                           2451 ;	genCall
   07A8 12s00r00           2452 	lcall	_printf
   07AB 15 81              2453 	dec	sp
   07AD 15 81              2454 	dec	sp
   07AF 15 81              2455 	dec	sp
                           2456 ;	main4.c:311: printf("\n\rEnter your choice:");       //prompts the user
                           2457 ;	genIpush
   07B1 74r5B              2458 	mov	a,#__str_29
   07B3 C0 E0              2459 	push	acc
   07B5 74s05              2460 	mov	a,#(__str_29 >> 8)
   07B7 C0 E0              2461 	push	acc
   07B9 74 80              2462 	mov	a,#0x80
   07BB C0 E0              2463 	push	acc
                           2464 ;	genCall
   07BD 12s00r00           2465 	lcall	_printf
   07C0 15 81              2466 	dec	sp
   07C2 15 81              2467 	dec	sp
   07C4 15 81              2468 	dec	sp
                           2469 ;	main4.c:312: choice1= getchar()-48;          //converts the decimal value of the char variable to intiger
                           2470 ;	genCall
   07C6 12s01r72           2471 	lcall	_getchar
                           2472 ;	genCast
                           2473 ;	peephole 177.g	optimized mov sequence
   07C9 E5 82              2474 	mov	a,dpl
   07CB FA                 2475 	mov	r2,a
   07CC 33                 2476 	rlc	a
   07CD 95 E0              2477 	subb	a,acc
   07CF FB                 2478 	mov	r3,a
                           2479 ;	genMinus
   07D0 EA                 2480 	mov	a,r2
   07D1 24 D0              2481 	add	a,#0xd0
   07D3 FA                 2482 	mov	r2,a
   07D4 EB                 2483 	mov	a,r3
   07D5 34 FF              2484 	addc	a,#0xff
   07D7 FB                 2485 	mov	r3,a
                           2486 ;	main4.c:314: switch(choice1)         //switch statement for the the choice1
                           2487 ;	genCmpGt
                           2488 ;	genCmp
   07D8 C3                 2489 	clr	c
   07D9 74 09              2490 	mov	a,#0x09
   07DB 9A                 2491 	subb	a,r2
                           2492 ;	Peephole 181	changed mov to clr
   07DC E4                 2493 	clr	a
   07DD 9B                 2494 	subb	a,r3
                           2495 ;	genIfxJump
   07DE 50 03              2496 	jnc	00116$
   07E0 02s09rA8           2497 	ljmp	00111$
   07E3                    2498 00116$:
                           2499 ;	genJumpTab
   07E3 EA                 2500 	mov	a,r2
                           2501 ;	Peephole 254	optimized left shift
   07E4 2A                 2502 	add	a,r2
   07E5 2A                 2503 	add	a,r2
   07E6 90s07rEA           2504 	mov	dptr,#00117$
   07E9 73                 2505 	jmp	@a+dptr
   07EA                    2506 00117$:
   07EA 02s08r08           2507 	ljmp	00101$
   07ED 02s08r0B           2508 	ljmp	00102$
   07F0 02s08r29           2509 	ljmp	00103$
   07F3 02s08r2F           2510 	ljmp	00104$
   07F6 02s08r35           2511 	ljmp	00105$
   07F9 02s08r55           2512 	ljmp	00106$
   07FC 02s08r7F           2513 	ljmp	00107$
   07FF 02s08r9D           2514 	ljmp	00108$
   0802 02s08rC8           2515 	ljmp	00109$
   0805 02s08rE3           2516 	ljmp	00110$
                           2517 ;	main4.c:316: case 0:
   0808                    2518 00101$:
                           2519 ;	main4.c:318: main_menu();                       //go back to main menu
                           2520 ;	genCall
                           2521 ;	main4.c:319: }   break;
                           2522 ;	Peephole 251.a	replaced ljmp to ret with ret
                           2523 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0808 02s0Fr01           2524 	ljmp	_main_menu
                           2525 ;	main4.c:320: case 1:
   080B                    2526 00102$:
                           2527 ;	main4.c:322: lcdinit();                         //initializees the LCD
                           2528 ;	genCall
   080B 12s00r00           2529 	lcall	_lcdinit
                           2530 ;	main4.c:323: print_time_stamp();                //calls function time stamp to print the time stamp
                           2531 ;	genCall
   080E 12s38r0A           2532 	lcall	_print_time_stamp
                           2533 ;	main4.c:324: printf("\n\n\rLCD initialized");   //sends affirmative message to the terminal
                           2534 ;	genIpush
   0811 74r70              2535 	mov	a,#__str_30
   0813 C0 E0              2536 	push	acc
   0815 74s05              2537 	mov	a,#(__str_30 >> 8)
   0817 C0 E0              2538 	push	acc
   0819 74 80              2539 	mov	a,#0x80
   081B C0 E0              2540 	push	acc
                           2541 ;	genCall
   081D 12s00r00           2542 	lcall	_printf
   0820 15 81              2543 	dec	sp
   0822 15 81              2544 	dec	sp
   0824 15 81              2545 	dec	sp
                           2546 ;	main4.c:325: lcd_functions();                   //calls the LCD init function
                           2547 ;	genCall
                           2548 ;	main4.c:326: }   break;
                           2549 ;	Peephole 251.a	replaced ljmp to ret with ret
                           2550 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0826 02s06r8B           2551 	ljmp	_lcd_functions
                           2552 ;	main4.c:327: case 2:
   0829                    2553 00103$:
                           2554 ;	main4.c:329: go_to_address();                 //calls the goto addres function
                           2555 ;	genCall
   0829 12s01r7C           2556 	lcall	_go_to_address
                           2557 ;	main4.c:330: lcd_functions();                 //goes back to the LCD functions
                           2558 ;	genCall
                           2559 ;	main4.c:331: }break;
                           2560 ;	Peephole 251.a	replaced ljmp to ret with ret
                           2561 ;	Peephole 253.a	replaced lcall/ret with ljmp
   082C 02s06r8B           2562 	ljmp	_lcd_functions
                           2563 ;	main4.c:332: case 3:
   082F                    2564 00104$:
                           2565 ;	main4.c:334: goto_row_column();
                           2566 ;	genCall
   082F 12s04rB0           2567 	lcall	_goto_row_column
                           2568 ;	main4.c:335: lcd_functions();                     //Goes back to the LCD function menu
                           2569 ;	genCall
   0832 12s06r8B           2570 	lcall	_lcd_functions
                           2571 ;	main4.c:337: case 4:
   0835                    2572 00105$:
                           2573 ;	main4.c:339: printf("\n\n\r Please enter a character to be printed to the LCD:");
                           2574 ;	genIpush
   0835 74r83              2575 	mov	a,#__str_31
   0837 C0 E0              2576 	push	acc
   0839 74s05              2577 	mov	a,#(__str_31 >> 8)
   083B C0 E0              2578 	push	acc
   083D 74 80              2579 	mov	a,#0x80
   083F C0 E0              2580 	push	acc
                           2581 ;	genCall
   0841 12s00r00           2582 	lcall	_printf
   0844 15 81              2583 	dec	sp
   0846 15 81              2584 	dec	sp
   0848 15 81              2585 	dec	sp
                           2586 ;	main4.c:340: c =getchar();
                           2587 ;	genCall
   084A 12s01r72           2588 	lcall	_getchar
                           2589 ;	main4.c:341: lcdputch(c);                        //gets character from user and prints to LCD using lcdputch() funtion.
                           2590 ;	genCall
   084D AA 82              2591 	mov  r2,dpl
                           2592 ;	Peephole 177.a	removed redundant mov
   084F 12s00r00           2593 	lcall	_lcdputch
                           2594 ;	main4.c:342: lcd_functions();                    //Goes back to the LCD function menu
                           2595 ;	genCall
                           2596 ;	main4.c:343: }break;
                           2597 ;	Peephole 251.a	replaced ljmp to ret with ret
                           2598 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0852 02s06r8B           2599 	ljmp	_lcd_functions
                           2600 ;	main4.c:344: case 5:
   0855                    2601 00106$:
                           2602 ;	main4.c:347: printf("\n\n\rPlease enter the string to be printed to the screen:");
                           2603 ;	genIpush
   0855 74rBA              2604 	mov	a,#__str_32
   0857 C0 E0              2605 	push	acc
   0859 74s05              2606 	mov	a,#(__str_32 >> 8)
   085B C0 E0              2607 	push	acc
   085D 74 80              2608 	mov	a,#0x80
   085F C0 E0              2609 	push	acc
                           2610 ;	genCall
   0861 12s00r00           2611 	lcall	_printf
   0864 15 81              2612 	dec	sp
   0866 15 81              2613 	dec	sp
   0868 15 81              2614 	dec	sp
                           2615 ;	main4.c:348: gets(ss);
                           2616 ;	genCall
                           2617 ;	Peephole 182.a	used 16 bit load of DPTR
   086A 90s00r0C           2618 	mov	dptr,#_ss
   086D 75 F0 00           2619 	mov	b,#0x00
   0870 12s00r00           2620 	lcall	_gets
                           2621 ;	main4.c:349: lcdputstr(&ss);                     //Passes a pointer to for the string
                           2622 ;	genCall
                           2623 ;	Peephole 182.a	used 16 bit load of DPTR
   0873 90s00r0C           2624 	mov	dptr,#_ss
   0876 75 F0 00           2625 	mov	b,#0x00
   0879 12s00r00           2626 	lcall	_lcdputstr
                           2627 ;	main4.c:350: lcd_functions();                    //Goes back to the LCD function menu
                           2628 ;	genCall
                           2629 ;	main4.c:351: }break;
                           2630 ;	Peephole 251.a	replaced ljmp to ret with ret
                           2631 ;	Peephole 253.a	replaced lcall/ret with ljmp
   087C 02s06r8B           2632 	ljmp	_lcd_functions
                           2633 ;	main4.c:352: case 6:
   087F                    2634 00107$:
                           2635 ;	main4.c:354: printf("\n\n\rScreen Cleared");
                           2636 ;	genIpush
   087F 74rF2              2637 	mov	a,#__str_33
   0881 C0 E0              2638 	push	acc
   0883 74s05              2639 	mov	a,#(__str_33 >> 8)
   0885 C0 E0              2640 	push	acc
   0887 74 80              2641 	mov	a,#0x80
   0889 C0 E0              2642 	push	acc
                           2643 ;	genCall
   088B 12s00r00           2644 	lcall	_printf
   088E 15 81              2645 	dec	sp
   0890 15 81              2646 	dec	sp
   0892 15 81              2647 	dec	sp
                           2648 ;	main4.c:355: lcdclear();                          //clears the screen
                           2649 ;	genCall
   0894 12s00r00           2650 	lcall	_lcdclear
                           2651 ;	main4.c:356: print_time_stamp();                   //maintians the timer/clock stamp on the LCD
                           2652 ;	genCall
   0897 12s38r0A           2653 	lcall	_print_time_stamp
                           2654 ;	main4.c:357: lcd_functions();                       //Goes back to the LCD function menu
                           2655 ;	genCall
                           2656 ;	main4.c:358: }break;
                           2657 ;	Peephole 251.a	replaced ljmp to ret with ret
                           2658 ;	Peephole 253.a	replaced lcall/ret with ljmp
   089A 02s06r8B           2659 	ljmp	_lcd_functions
                           2660 ;	main4.c:359: case 7:
   089D                    2661 00108$:
                           2662 ;	main4.c:361: lcdprevpos = lcdreadaddr();               //calls the LCD address reading function and stores the value in lcdprevpos variable
                           2663 ;	genCall
   089D 12s00r00           2664 	lcall	_lcdreadaddr
   08A0 AA 82              2665 	mov	r2,dpl
   08A2 AB 83              2666 	mov	r3,dph
                           2667 ;	genAssign
   08A4 90s00r62           2668 	mov	dptr,#_lcdprevpos
   08A7 EA                 2669 	mov	a,r2
   08A8 F0                 2670 	movx	@dptr,a
   08A9 A3                 2671 	inc	dptr
   08AA EB                 2672 	mov	a,r3
   08AB F0                 2673 	movx	@dptr,a
                           2674 ;	main4.c:362: printf("The current position of the cursor is : %d",lcdprevpos); //prints to the terminal
                           2675 ;	genIpush
   08AC C0 02              2676 	push	ar2
   08AE C0 03              2677 	push	ar3
                           2678 ;	genIpush
   08B0 74r04              2679 	mov	a,#__str_34
   08B2 C0 E0              2680 	push	acc
   08B4 74s06              2681 	mov	a,#(__str_34 >> 8)
   08B6 C0 E0              2682 	push	acc
   08B8 74 80              2683 	mov	a,#0x80
   08BA C0 E0              2684 	push	acc
                           2685 ;	genCall
   08BC 12s00r00           2686 	lcall	_printf
   08BF E5 81              2687 	mov	a,sp
   08C1 24 FB              2688 	add	a,#0xfb
   08C3 F5 81              2689 	mov	sp,a
                           2690 ;	main4.c:364: lcd_functions();                            //Goes back to the LCD function menu
                           2691 ;	genCall
                           2692 ;	main4.c:365: }break;
                           2693 ;	Peephole 251.a	replaced ljmp to ret with ret
                           2694 ;	Peephole 253.a	replaced lcall/ret with ljmp
   08C5 02s06r8B           2695 	ljmp	_lcd_functions
                           2696 ;	main4.c:366: case 8:
   08C8                    2697 00109$:
                           2698 ;	main4.c:368: printf("\n\n\rYou have entered the Custom character mode");
                           2699 ;	genIpush
   08C8 74r2F              2700 	mov	a,#__str_35
   08CA C0 E0              2701 	push	acc
   08CC 74s06              2702 	mov	a,#(__str_35 >> 8)
   08CE C0 E0              2703 	push	acc
   08D0 74 80              2704 	mov	a,#0x80
   08D2 C0 E0              2705 	push	acc
                           2706 ;	genCall
   08D4 12s00r00           2707 	lcall	_printf
   08D7 15 81              2708 	dec	sp
   08D9 15 81              2709 	dec	sp
   08DB 15 81              2710 	dec	sp
                           2711 ;	main4.c:371: create_char();                          //calls the create character function
                           2712 ;	genCall
   08DD 12s30r02           2713 	lcall	_create_char
                           2714 ;	main4.c:372: lcd_functions();                        //Goes back to the LCD function menu
                           2715 ;	genCall
                           2716 ;	main4.c:373: }break;
                           2717 ;	Peephole 251.a	replaced ljmp to ret with ret
                           2718 ;	Peephole 253.a	replaced lcall/ret with ljmp
   08E0 02s06r8B           2719 	ljmp	_lcd_functions
                           2720 ;	main4.c:374: case 9:
   08E3                    2721 00110$:
                           2722 ;	main4.c:376: printf("\n\n\r FUN LOGO!");                 //print to terminal
                           2723 ;	genIpush
   08E3 74r5D              2724 	mov	a,#__str_36
   08E5 C0 E0              2725 	push	acc
   08E7 74s06              2726 	mov	a,#(__str_36 >> 8)
   08E9 C0 E0              2727 	push	acc
   08EB 74 80              2728 	mov	a,#0x80
   08ED C0 E0              2729 	push	acc
                           2730 ;	genCall
   08EF 12s00r00           2731 	lcall	_printf
   08F2 15 81              2732 	dec	sp
   08F4 15 81              2733 	dec	sp
   08F6 15 81              2734 	dec	sp
                           2735 ;	main4.c:377: ccode=0;                                    //location 0 of DDRAM to store first custom character pattern
                           2736 ;	genAssign
   08F8 90s00r76           2737 	mov	dptr,#_ccode
                           2738 ;	Peephole 181	changed mov to clr
                           2739 ;	main4.c:379: row_vals[0]=0x00;
                           2740 ;	genPointerSet
                           2741 ;     genFarPointerSet
                           2742 ;	Peephole 181	changed mov to clr
                           2743 ;	Peephole 219.a	removed redundant clear
   08FB E4                 2744 	clr	a
   08FC F0                 2745 	movx	@dptr,a
   08FD 90s00r6E           2746 	mov	dptr,#_row_vals
   0900 F0                 2747 	movx	@dptr,a
                           2748 ;	main4.c:380: row_vals[1]=0x07;
                           2749 ;	genPointerSet
                           2750 ;     genFarPointerSet
   0901 90s00r6F           2751 	mov	dptr,#(_row_vals + 0x0001)
   0904 74 07              2752 	mov	a,#0x07
   0906 F0                 2753 	movx	@dptr,a
                           2754 ;	main4.c:381: row_vals[2]=0x0d;
                           2755 ;	genPointerSet
                           2756 ;     genFarPointerSet
   0907 90s00r70           2757 	mov	dptr,#(_row_vals + 0x0002)
   090A 74 0D              2758 	mov	a,#0x0D
   090C F0                 2759 	movx	@dptr,a
                           2760 ;	main4.c:382: row_vals[3]=0x19;
                           2761 ;	genPointerSet
                           2762 ;     genFarPointerSet
   090D 90s00r71           2763 	mov	dptr,#(_row_vals + 0x0003)
   0910 74 19              2764 	mov	a,#0x19
   0912 F0                 2765 	movx	@dptr,a
                           2766 ;	main4.c:383: row_vals[4]=0x7f;
                           2767 ;	genPointerSet
                           2768 ;     genFarPointerSet
   0913 90s00r72           2769 	mov	dptr,#(_row_vals + 0x0004)
   0916 74 7F              2770 	mov	a,#0x7F
   0918 F0                 2771 	movx	@dptr,a
                           2772 ;	main4.c:384: row_vals[5]=0x6b;
                           2773 ;	genPointerSet
                           2774 ;     genFarPointerSet
   0919 90s00r73           2775 	mov	dptr,#(_row_vals + 0x0005)
   091C 74 6B              2776 	mov	a,#0x6B
   091E F0                 2777 	movx	@dptr,a
                           2778 ;	main4.c:385: row_vals[6]=0x14;
                           2779 ;	genPointerSet
                           2780 ;     genFarPointerSet
   091F 90s00r74           2781 	mov	dptr,#(_row_vals + 0x0006)
   0922 74 14              2782 	mov	a,#0x14
   0924 F0                 2783 	movx	@dptr,a
                           2784 ;	main4.c:386: row_vals[7]=0x08;
                           2785 ;	genPointerSet
                           2786 ;     genFarPointerSet
   0925 90s00r75           2787 	mov	dptr,#(_row_vals + 0x0007)
   0928 74 08              2788 	mov	a,#0x08
   092A F0                 2789 	movx	@dptr,a
                           2790 ;	main4.c:388: lcdgotoxy('0','0');
                           2791 ;	genAssign
   092B 90s00r00           2792 	mov	dptr,#_lcdgotoxy_PARM_2
   092E 74 30              2793 	mov	a,#0x30
   0930 F0                 2794 	movx	@dptr,a
                           2795 ;	genCall
   0931 75 82 30           2796 	mov	dpl,#0x30
   0934 12s00r00           2797 	lcall	_lcdgotoxy
                           2798 ;	main4.c:390: lcdcreatechar(ccode, &row_vals[0]);
                           2799 ;	genAssign
   0937 90s00r76           2800 	mov	dptr,#_ccode
   093A E0                 2801 	movx	a,@dptr
   093B FA                 2802 	mov	r2,a
                           2803 ;	genCast
   093C 90s00r00           2804 	mov	dptr,#_lcdcreatechar_PARM_2
   093F 74r6E              2805 	mov	a,#_row_vals
   0941 F0                 2806 	movx	@dptr,a
   0942 A3                 2807 	inc	dptr
   0943 74s00              2808 	mov	a,#(_row_vals >> 8)
   0945 F0                 2809 	movx	@dptr,a
   0946 A3                 2810 	inc	dptr
   0947 74 00              2811 	mov	a,#0x0
   0949 F0                 2812 	movx	@dptr,a
                           2813 ;	genCall
   094A 8A 82              2814 	mov	dpl,r2
   094C 12s00r00           2815 	lcall	_lcdcreatechar
                           2816 ;	main4.c:392: ccode=1;
                           2817 ;	genAssign
   094F 90s00r76           2818 	mov	dptr,#_ccode
   0952 74 01              2819 	mov	a,#0x01
   0954 F0                 2820 	movx	@dptr,a
                           2821 ;	main4.c:394: row_vals[0]=0x00;
                           2822 ;	genPointerSet
                           2823 ;     genFarPointerSet
   0955 90s00r6E           2824 	mov	dptr,#_row_vals
                           2825 ;	Peephole 181	changed mov to clr
   0958 E4                 2826 	clr	a
   0959 F0                 2827 	movx	@dptr,a
                           2828 ;	main4.c:395: row_vals[1]=0x18;
                           2829 ;	genPointerSet
                           2830 ;     genFarPointerSet
   095A 90s00r6F           2831 	mov	dptr,#(_row_vals + 0x0001)
   095D 74 18              2832 	mov	a,#0x18
   095F F0                 2833 	movx	@dptr,a
                           2834 ;	main4.c:396: row_vals[2]=0x0c;
                           2835 ;	genPointerSet
                           2836 ;     genFarPointerSet
   0960 90s00r70           2837 	mov	dptr,#(_row_vals + 0x0002)
   0963 74 0C              2838 	mov	a,#0x0C
   0965 F0                 2839 	movx	@dptr,a
                           2840 ;	main4.c:397: row_vals[3]=0x0e;
                           2841 ;	genPointerSet
                           2842 ;     genFarPointerSet
   0966 90s00r71           2843 	mov	dptr,#(_row_vals + 0x0003)
   0969 74 0E              2844 	mov	a,#0x0E
   096B F0                 2845 	movx	@dptr,a
                           2846 ;	main4.c:398: row_vals[4]=0x1f;
                           2847 ;	genPointerSet
                           2848 ;     genFarPointerSet
   096C 90s00r72           2849 	mov	dptr,#(_row_vals + 0x0004)
   096F 74 1F              2850 	mov	a,#0x1F
   0971 F0                 2851 	movx	@dptr,a
                           2852 ;	main4.c:399: row_vals[5]=0x1b;
                           2853 ;	genPointerSet
                           2854 ;     genFarPointerSet
   0972 90s00r73           2855 	mov	dptr,#(_row_vals + 0x0005)
   0975 74 1B              2856 	mov	a,#0x1B
   0977 F0                 2857 	movx	@dptr,a
                           2858 ;	main4.c:400: row_vals[6]=0x14;
                           2859 ;	genPointerSet
                           2860 ;     genFarPointerSet
   0978 90s00r74           2861 	mov	dptr,#(_row_vals + 0x0006)
   097B 74 14              2862 	mov	a,#0x14
   097D F0                 2863 	movx	@dptr,a
                           2864 ;	main4.c:401: row_vals[7]=0x08;
                           2865 ;	genPointerSet
                           2866 ;     genFarPointerSet
   097E 90s00r75           2867 	mov	dptr,#(_row_vals + 0x0007)
   0981 74 08              2868 	mov	a,#0x08
   0983 F0                 2869 	movx	@dptr,a
                           2870 ;	main4.c:403: lcdgotoxy('0','1');
                           2871 ;	genAssign
   0984 90s00r00           2872 	mov	dptr,#_lcdgotoxy_PARM_2
   0987 74 31              2873 	mov	a,#0x31
   0989 F0                 2874 	movx	@dptr,a
                           2875 ;	genCall
   098A 75 82 30           2876 	mov	dpl,#0x30
   098D 12s00r00           2877 	lcall	_lcdgotoxy
                           2878 ;	main4.c:405: lcdcreatechar(ccode, &row_vals[0]);
                           2879 ;	genAssign
   0990 90s00r76           2880 	mov	dptr,#_ccode
   0993 E0                 2881 	movx	a,@dptr
   0994 FA                 2882 	mov	r2,a
                           2883 ;	genCast
   0995 90s00r00           2884 	mov	dptr,#_lcdcreatechar_PARM_2
   0998 74r6E              2885 	mov	a,#_row_vals
   099A F0                 2886 	movx	@dptr,a
   099B A3                 2887 	inc	dptr
   099C 74s00              2888 	mov	a,#(_row_vals >> 8)
   099E F0                 2889 	movx	@dptr,a
   099F A3                 2890 	inc	dptr
   09A0 74 00              2891 	mov	a,#0x0
   09A2 F0                 2892 	movx	@dptr,a
                           2893 ;	genCall
   09A3 8A 82              2894 	mov	dpl,r2
                           2895 ;	main4.c:407: }break;
                           2896 ;	main4.c:408: default:
                           2897 ;	Peephole 112.b	changed ljmp to sjmp
                           2898 ;	Peephole 251.b	replaced sjmp to ret with ret
                           2899 ;	Peephole 253.a	replaced lcall/ret with ljmp
   09A5 02s00r00           2900 	ljmp	_lcdcreatechar
   09A8                    2901 00111$:
                           2902 ;	main4.c:410: printf("Invalid Input");
                           2903 ;	genIpush
   09A8 74r6B              2904 	mov	a,#__str_37
   09AA C0 E0              2905 	push	acc
   09AC 74s06              2906 	mov	a,#(__str_37 >> 8)
   09AE C0 E0              2907 	push	acc
   09B0 74 80              2908 	mov	a,#0x80
   09B2 C0 E0              2909 	push	acc
                           2910 ;	genCall
   09B4 12s00r00           2911 	lcall	_printf
   09B7 15 81              2912 	dec	sp
   09B9 15 81              2913 	dec	sp
   09BB 15 81              2914 	dec	sp
                           2915 ;	main4.c:412: }
                           2916 ;	Peephole 300	removed redundant label 00113$
   09BD 22                 2917 	ret
                           2918 ;------------------------------------------------------------
                           2919 ;Allocation info for local variables in function 'eeprom_functions'
                           2920 ;------------------------------------------------------------
                           2921 ;choice2                   Allocated with name '_eeprom_functions_choice2_1_1'
                           2922 ;sf                        Allocated with name '_eeprom_functions_sf_1_1'
                           2923 ;i                         Allocated with name '_eeprom_functions_i_1_1'
                           2924 ;wradd                     Allocated with name '_eeprom_functions_wradd_1_1'
                           2925 ;wrdata                    Allocated with name '_eeprom_functions_wrdata_1_1'
                           2926 ;rdadd                     Allocated with name '_eeprom_functions_rdadd_1_1'
                           2927 ;rdata                     Allocated with name '_eeprom_functions_rdata_1_1'
                           2928 ;startadd                  Allocated with name '_eeprom_functions_startadd_1_1'
                           2929 ;endadd                    Allocated with name '_eeprom_functions_endadd_1_1'
                           2930 ;filldata                  Allocated with name '_eeprom_functions_filldata_1_1'
                           2931 ;length                    Allocated with name '_eeprom_functions_length_1_1'
                           2932 ;yesno                     Allocated with name '_eeprom_functions_yesno_1_1'
                           2933 ;------------------------------------------------------------
                           2934 ;	main4.c:419: void eeprom_functions(void)
                           2935 ;	-----------------------------------------
                           2936 ;	 function eeprom_functions
                           2937 ;	-----------------------------------------
   09BE                    2938 _eeprom_functions:
                           2939 ;	main4.c:423: int i=0, wradd=0, wrdata=0,rdadd=0,rdata=0,startadd=0,endadd=0,filldata=0, length=0;
                           2940 ;	genAssign
   09BE 90s00r7F           2941 	mov	dptr,#_eeprom_functions_length_1_1
   09C1 E4                 2942 	clr	a
   09C2 F0                 2943 	movx	@dptr,a
   09C3 A3                 2944 	inc	dptr
   09C4 F0                 2945 	movx	@dptr,a
                           2946 ;	main4.c:425: printf("\n\n\r------------------------------------------------------------------------------");
                           2947 ;	genIpush
   09C5 74rB6              2948 	mov	a,#__str_16
   09C7 C0 E0              2949 	push	acc
   09C9 74s02              2950 	mov	a,#(__str_16 >> 8)
   09CB C0 E0              2951 	push	acc
   09CD 74 80              2952 	mov	a,#0x80
   09CF C0 E0              2953 	push	acc
                           2954 ;	genCall
   09D1 12s00r00           2955 	lcall	_printf
   09D4 15 81              2956 	dec	sp
   09D6 15 81              2957 	dec	sp
   09D8 15 81              2958 	dec	sp
                           2959 ;	main4.c:426: printf("\n\r                           EEPROM FUNCTION MENU");
                           2960 ;	genIpush
   09DA 74r79              2961 	mov	a,#__str_38
   09DC C0 E0              2962 	push	acc
   09DE 74s06              2963 	mov	a,#(__str_38 >> 8)
   09E0 C0 E0              2964 	push	acc
   09E2 74 80              2965 	mov	a,#0x80
   09E4 C0 E0              2966 	push	acc
                           2967 ;	genCall
   09E6 12s00r00           2968 	lcall	_printf
   09E9 15 81              2969 	dec	sp
   09EB 15 81              2970 	dec	sp
   09ED 15 81              2971 	dec	sp
                           2972 ;	main4.c:427: printf("\n\r--------------------------------------------------------------------------------");
                           2973 ;	genIpush
   09EF 74r3A              2974 	mov	a,#__str_18
   09F1 C0 E0              2975 	push	acc
   09F3 74s03              2976 	mov	a,#(__str_18 >> 8)
   09F5 C0 E0              2977 	push	acc
   09F7 74 80              2978 	mov	a,#0x80
   09F9 C0 E0              2979 	push	acc
                           2980 ;	genCall
   09FB 12s00r00           2981 	lcall	_printf
   09FE 15 81              2982 	dec	sp
   0A00 15 81              2983 	dec	sp
   0A02 15 81              2984 	dec	sp
                           2985 ;	main4.c:428: printf("\n\rFunction 1:Write Byte");
                           2986 ;	genIpush
   0A04 74rAB              2987 	mov	a,#__str_39
   0A06 C0 E0              2988 	push	acc
   0A08 74s06              2989 	mov	a,#(__str_39 >> 8)
   0A0A C0 E0              2990 	push	acc
   0A0C 74 80              2991 	mov	a,#0x80
   0A0E C0 E0              2992 	push	acc
                           2993 ;	genCall
   0A10 12s00r00           2994 	lcall	_printf
   0A13 15 81              2995 	dec	sp
   0A15 15 81              2996 	dec	sp
   0A17 15 81              2997 	dec	sp
                           2998 ;	main4.c:429: printf("\n\rFunction 2:Read Byte");
                           2999 ;	genIpush
   0A19 74rC3              3000 	mov	a,#__str_40
   0A1B C0 E0              3001 	push	acc
   0A1D 74s06              3002 	mov	a,#(__str_40 >> 8)
   0A1F C0 E0              3003 	push	acc
   0A21 74 80              3004 	mov	a,#0x80
   0A23 C0 E0              3005 	push	acc
                           3006 ;	genCall
   0A25 12s00r00           3007 	lcall	_printf
   0A28 15 81              3008 	dec	sp
   0A2A 15 81              3009 	dec	sp
   0A2C 15 81              3010 	dec	sp
                           3011 ;	main4.c:430: printf("\n\rFunction 3:Block Fill");
                           3012 ;	genIpush
   0A2E 74rDA              3013 	mov	a,#__str_41
   0A30 C0 E0              3014 	push	acc
   0A32 74s06              3015 	mov	a,#(__str_41 >> 8)
   0A34 C0 E0              3016 	push	acc
   0A36 74 80              3017 	mov	a,#0x80
   0A38 C0 E0              3018 	push	acc
                           3019 ;	genCall
   0A3A 12s00r00           3020 	lcall	_printf
   0A3D 15 81              3021 	dec	sp
   0A3F 15 81              3022 	dec	sp
   0A41 15 81              3023 	dec	sp
                           3024 ;	main4.c:431: printf("\n\rFunction 4:LCD Display");
                           3025 ;	genIpush
   0A43 74rF2              3026 	mov	a,#__str_42
   0A45 C0 E0              3027 	push	acc
   0A47 74s06              3028 	mov	a,#(__str_42 >> 8)
   0A49 C0 E0              3029 	push	acc
   0A4B 74 80              3030 	mov	a,#0x80
   0A4D C0 E0              3031 	push	acc
                           3032 ;	genCall
   0A4F 12s00r00           3033 	lcall	_printf
   0A52 15 81              3034 	dec	sp
   0A54 15 81              3035 	dec	sp
   0A56 15 81              3036 	dec	sp
                           3037 ;	main4.c:432: printf("\n\rFunction 5:Hex Dump");
                           3038 ;	genIpush
   0A58 74r0B              3039 	mov	a,#__str_43
   0A5A C0 E0              3040 	push	acc
   0A5C 74s07              3041 	mov	a,#(__str_43 >> 8)
   0A5E C0 E0              3042 	push	acc
   0A60 74 80              3043 	mov	a,#0x80
   0A62 C0 E0              3044 	push	acc
                           3045 ;	genCall
   0A64 12s00r00           3046 	lcall	_printf
   0A67 15 81              3047 	dec	sp
   0A69 15 81              3048 	dec	sp
   0A6B 15 81              3049 	dec	sp
                           3050 ;	main4.c:433: printf("\n\rFunction 6:Internal Reset");
                           3051 ;	genIpush
   0A6D 74r21              3052 	mov	a,#__str_44
   0A6F C0 E0              3053 	push	acc
   0A71 74s07              3054 	mov	a,#(__str_44 >> 8)
   0A73 C0 E0              3055 	push	acc
   0A75 74 80              3056 	mov	a,#0x80
   0A77 C0 E0              3057 	push	acc
                           3058 ;	genCall
   0A79 12s00r00           3059 	lcall	_printf
   0A7C 15 81              3060 	dec	sp
   0A7E 15 81              3061 	dec	sp
   0A80 15 81              3062 	dec	sp
                           3063 ;	main4.c:435: printf("\n\rFunction 0:Back to Main menu");
                           3064 ;	genIpush
   0A82 74r3D              3065 	mov	a,#__str_45
   0A84 C0 E0              3066 	push	acc
   0A86 74s07              3067 	mov	a,#(__str_45 >> 8)
   0A88 C0 E0              3068 	push	acc
   0A8A 74 80              3069 	mov	a,#0x80
   0A8C C0 E0              3070 	push	acc
                           3071 ;	genCall
   0A8E 12s00r00           3072 	lcall	_printf
   0A91 15 81              3073 	dec	sp
   0A93 15 81              3074 	dec	sp
   0A95 15 81              3075 	dec	sp
                           3076 ;	main4.c:436: printf("\n\rEnter your choice:");                       //prompst the user
                           3077 ;	genIpush
   0A97 74r5B              3078 	mov	a,#__str_29
   0A99 C0 E0              3079 	push	acc
   0A9B 74s05              3080 	mov	a,#(__str_29 >> 8)
   0A9D C0 E0              3081 	push	acc
   0A9F 74 80              3082 	mov	a,#0x80
   0AA1 C0 E0              3083 	push	acc
                           3084 ;	genCall
   0AA3 12s00r00           3085 	lcall	_printf
   0AA6 15 81              3086 	dec	sp
   0AA8 15 81              3087 	dec	sp
   0AAA 15 81              3088 	dec	sp
                           3089 ;	main4.c:437: choice2= getchar(); //getting the input from the user
                           3090 ;	genCall
   0AAC 12s01r72           3091 	lcall	_getchar
                           3092 ;	genCast
                           3093 ;	peephole 177.g	optimized mov sequence
   0AAF E5 82              3094 	mov	a,dpl
   0AB1 FA                 3095 	mov	r2,a
   0AB2 33                 3096 	rlc	a
   0AB3 95 E0              3097 	subb	a,acc
   0AB5 FB                 3098 	mov	r3,a
                           3099 ;	main4.c:441: switch(choice2-48)
                           3100 ;	genMinus
   0AB6 EA                 3101 	mov	a,r2
   0AB7 24 D0              3102 	add	a,#0xd0
   0AB9 FA                 3103 	mov	r2,a
   0ABA EB                 3104 	mov	a,r3
   0ABB 34 FF              3105 	addc	a,#0xff
   0ABD FB                 3106 	mov	r3,a
                           3107 ;	genCmpGt
                           3108 ;	genCmp
   0ABE C3                 3109 	clr	c
   0ABF 74 06              3110 	mov	a,#0x06
   0AC1 9A                 3111 	subb	a,r2
                           3112 ;	Peephole 181	changed mov to clr
   0AC2 E4                 3113 	clr	a
   0AC3 9B                 3114 	subb	a,r3
                           3115 ;	genIfxJump
   0AC4 50 03              3116 	jnc	00156$
   0AC6 02s0ErE9           3117 	ljmp	00137$
   0AC9                    3118 00156$:
                           3119 ;	genJumpTab
   0AC9 EA                 3120 	mov	a,r2
                           3121 ;	Peephole 254	optimized left shift
   0ACA 2A                 3122 	add	a,r2
   0ACB 2A                 3123 	add	a,r2
   0ACC 90s0ArD0           3124 	mov	dptr,#00157$
   0ACF 73                 3125 	jmp	@a+dptr
   0AD0                    3126 00157$:
   0AD0 02s0ArE5           3127 	ljmp	00101$
   0AD3 02s0ArE8           3128 	ljmp	00102$
   0AD6 02s0BrA5           3129 	ljmp	00108$
   0AD9 02s0BrF0           3130 	ljmp	00109$
   0ADC 02s0Dr1F           3131 	ljmp	00121$
   0ADF 02s0DrC4           3132 	ljmp	00126$
   0AE2 02s0ErB9           3133 	ljmp	00136$
                           3134 ;	main4.c:443: case 0:
   0AE5                    3135 00101$:
                           3136 ;	main4.c:445: main_menu();            //go back to the main menu if user inputs 0
                           3137 ;	genCall
                           3138 ;	main4.c:446: }break;
                           3139 ;	Peephole 251.a	replaced ljmp to ret with ret
                           3140 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0AE5 02s0Fr01           3141 	ljmp	_main_menu
                           3142 ;	main4.c:447: case 1: //write byte
   0AE8                    3143 00102$:
                           3144 ;	main4.c:450: printf("\n\n\rPlease enter the address where the byte is to be written (0x000 to 0x7FF) 0x");
                           3145 ;	genIpush
   0AE8 74r5C              3146 	mov	a,#__str_46
   0AEA C0 E0              3147 	push	acc
   0AEC 74s07              3148 	mov	a,#(__str_46 >> 8)
   0AEE C0 E0              3149 	push	acc
   0AF0 74 80              3150 	mov	a,#0x80
   0AF2 C0 E0              3151 	push	acc
                           3152 ;	genCall
   0AF4 12s00r00           3153 	lcall	_printf
   0AF7 15 81              3154 	dec	sp
   0AF9 15 81              3155 	dec	sp
   0AFB 15 81              3156 	dec	sp
                           3157 ;	main4.c:451: wradd=get_addr();
                           3158 ;	genCall
   0AFD 12s10rD1           3159 	lcall	_get_addr
   0B00 AA 82              3160 	mov	r2,dpl
   0B02 AB 83              3161 	mov	r3,dph
                           3162 ;	main4.c:452: if(wradd==-1)
                           3163 ;	genCmpEq
                           3164 ;	gencjneshort
                           3165 ;	Peephole 112.b	changed ljmp to sjmp
                           3166 ;	Peephole 198.a	optimized misc jump sequence
   0B04 BA FF 2B           3167 	cjne	r2,#0xFF,00104$
   0B07 BB FF 28           3168 	cjne	r3,#0xFF,00104$
                           3169 ;	Peephole 200.b	removed redundant sjmp
                           3170 ;	Peephole 300	removed redundant label 00158$
                           3171 ;	Peephole 300	removed redundant label 00159$
                           3172 ;	main4.c:455: printf("Invalid Input.Please try Again");
                           3173 ;	genIpush
   0B0A C0 02              3174 	push	ar2
   0B0C C0 03              3175 	push	ar3
   0B0E 74rAC              3176 	mov	a,#__str_47
   0B10 C0 E0              3177 	push	acc
   0B12 74s07              3178 	mov	a,#(__str_47 >> 8)
   0B14 C0 E0              3179 	push	acc
   0B16 74 80              3180 	mov	a,#0x80
   0B18 C0 E0              3181 	push	acc
                           3182 ;	genCall
   0B1A 12s00r00           3183 	lcall	_printf
   0B1D 15 81              3184 	dec	sp
   0B1F 15 81              3185 	dec	sp
   0B21 15 81              3186 	dec	sp
   0B23 D0 03              3187 	pop	ar3
   0B25 D0 02              3188 	pop	ar2
                           3189 ;	main4.c:456: eeprom_functions(); //go back to main functions
                           3190 ;	genCall
   0B27 C0 02              3191 	push	ar2
   0B29 C0 03              3192 	push	ar3
   0B2B 12s09rBE           3193 	lcall	_eeprom_functions
   0B2E D0 03              3194 	pop	ar3
   0B30 D0 02              3195 	pop	ar2
   0B32                    3196 00104$:
                           3197 ;	main4.c:459: printf("\n\n\rPlease enter the databyte to be store    d 0x");
                           3198 ;	genIpush
   0B32 C0 02              3199 	push	ar2
   0B34 C0 03              3200 	push	ar3
   0B36 74rCB              3201 	mov	a,#__str_48
   0B38 C0 E0              3202 	push	acc
   0B3A 74s07              3203 	mov	a,#(__str_48 >> 8)
   0B3C C0 E0              3204 	push	acc
   0B3E 74 80              3205 	mov	a,#0x80
   0B40 C0 E0              3206 	push	acc
                           3207 ;	genCall
   0B42 12s00r00           3208 	lcall	_printf
   0B45 15 81              3209 	dec	sp
   0B47 15 81              3210 	dec	sp
   0B49 15 81              3211 	dec	sp
   0B4B D0 03              3212 	pop	ar3
   0B4D D0 02              3213 	pop	ar2
                           3214 ;	main4.c:460: wrdata = get_data();
                           3215 ;	genCall
   0B4F C0 02              3216 	push	ar2
   0B51 C0 03              3217 	push	ar3
   0B53 12s17rFC           3218 	lcall	_get_data
   0B56 AC 82              3219 	mov	r4,dpl
   0B58 AD 83              3220 	mov	r5,dph
   0B5A D0 03              3221 	pop	ar3
   0B5C D0 02              3222 	pop	ar2
                           3223 ;	main4.c:461: sf= eebytew(wradd,wrdata);         //calls the function eebytew which writes the data to EEPROM (see i2c.c)
                           3224 ;	genAssign
   0B5E 90s00r00           3225 	mov	dptr,#_eebytew_PARM_2
   0B61 EC                 3226 	mov	a,r4
   0B62 F0                 3227 	movx	@dptr,a
   0B63 A3                 3228 	inc	dptr
   0B64 ED                 3229 	mov	a,r5
   0B65 F0                 3230 	movx	@dptr,a
                           3231 ;	genCall
   0B66 8A 82              3232 	mov	dpl,r2
   0B68 8B 83              3233 	mov	dph,r3
   0B6A 12s00r00           3234 	lcall	_eebytew
   0B6D E5 82              3235 	mov	a,dpl
   0B6F 85 83 F0           3236 	mov	b,dph
                           3237 ;	main4.c:462: if(sf==0) printf("\n\rWrite Operation Sucessfull");        //Acknowldgent to terminal
                           3238 ;	genIfx
   0B72 45 F0              3239 	orl	a,b
                           3240 ;	genIfxJump
                           3241 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0B74 70 17              3242 	jnz	00106$
                           3243 ;	Peephole 300	removed redundant label 00160$
                           3244 ;	genIpush
   0B76 74rFC              3245 	mov	a,#__str_49
   0B78 C0 E0              3246 	push	acc
   0B7A 74s07              3247 	mov	a,#(__str_49 >> 8)
   0B7C C0 E0              3248 	push	acc
   0B7E 74 80              3249 	mov	a,#0x80
   0B80 C0 E0              3250 	push	acc
                           3251 ;	genCall
   0B82 12s00r00           3252 	lcall	_printf
   0B85 15 81              3253 	dec	sp
   0B87 15 81              3254 	dec	sp
   0B89 15 81              3255 	dec	sp
                           3256 ;	Peephole 112.b	changed ljmp to sjmp
   0B8B 80 15              3257 	sjmp	00107$
   0B8D                    3258 00106$:
                           3259 ;	main4.c:463: else printf("\n\rWrite Operation Unsucessful");            //NACK to terminal
                           3260 ;	genIpush
   0B8D 74r19              3261 	mov	a,#__str_50
   0B8F C0 E0              3262 	push	acc
   0B91 74s08              3263 	mov	a,#(__str_50 >> 8)
   0B93 C0 E0              3264 	push	acc
   0B95 74 80              3265 	mov	a,#0x80
   0B97 C0 E0              3266 	push	acc
                           3267 ;	genCall
   0B99 12s00r00           3268 	lcall	_printf
   0B9C 15 81              3269 	dec	sp
   0B9E 15 81              3270 	dec	sp
   0BA0 15 81              3271 	dec	sp
   0BA2                    3272 00107$:
                           3273 ;	main4.c:464: eeprom_functions();                                        //Go back to EEPROM functions menu
                           3274 ;	genCall
                           3275 ;	main4.c:465: }break;
                           3276 ;	Peephole 251.a	replaced ljmp to ret with ret
                           3277 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0BA2 02s09rBE           3278 	ljmp	_eeprom_functions
                           3279 ;	main4.c:466: case 2:
   0BA5                    3280 00108$:
                           3281 ;	main4.c:468: printf("\n\n\rPlease enter the address where the byte is to be read (0x000 to 0x7FF) 0x");
                           3282 ;	genIpush
   0BA5 74r37              3283 	mov	a,#__str_51
   0BA7 C0 E0              3284 	push	acc
   0BA9 74s08              3285 	mov	a,#(__str_51 >> 8)
   0BAB C0 E0              3286 	push	acc
   0BAD 74 80              3287 	mov	a,#0x80
   0BAF C0 E0              3288 	push	acc
                           3289 ;	genCall
   0BB1 12s00r00           3290 	lcall	_printf
   0BB4 15 81              3291 	dec	sp
   0BB6 15 81              3292 	dec	sp
   0BB8 15 81              3293 	dec	sp
                           3294 ;	main4.c:469: rdadd=get_addr();
                           3295 ;	genCall
   0BBA 12s10rD1           3296 	lcall	_get_addr
                           3297 ;	main4.c:470: rdata = eebyter(rdadd);   //calls the read functions to read data from terminal (see i2c.c)
                           3298 ;	genCall
   0BBD AA 82              3299 	mov	r2,dpl
                           3300 ;	Peephole 177.d	removed redundant move
   0BBF AB 83              3301 	mov  r3,dph
                           3302 ;	Peephole 177.a	removed redundant mov
   0BC1 C0 02              3303 	push	ar2
   0BC3 C0 03              3304 	push	ar3
   0BC5 12s00r00           3305 	lcall	_eebyter
   0BC8 AC 82              3306 	mov	r4,dpl
   0BCA AD 83              3307 	mov	r5,dph
   0BCC D0 03              3308 	pop	ar3
   0BCE D0 02              3309 	pop	ar2
                           3310 ;	main4.c:471: printf("\n\n\rThe data stored at location 0x%X is 0x%x ",rdadd,rdata); //prints data & addr to terminal
                           3311 ;	genIpush
   0BD0 C0 04              3312 	push	ar4
   0BD2 C0 05              3313 	push	ar5
                           3314 ;	genIpush
   0BD4 C0 02              3315 	push	ar2
   0BD6 C0 03              3316 	push	ar3
                           3317 ;	genIpush
   0BD8 74r84              3318 	mov	a,#__str_52
   0BDA C0 E0              3319 	push	acc
   0BDC 74s08              3320 	mov	a,#(__str_52 >> 8)
   0BDE C0 E0              3321 	push	acc
   0BE0 74 80              3322 	mov	a,#0x80
   0BE2 C0 E0              3323 	push	acc
                           3324 ;	genCall
   0BE4 12s00r00           3325 	lcall	_printf
   0BE7 E5 81              3326 	mov	a,sp
   0BE9 24 F9              3327 	add	a,#0xf9
   0BEB F5 81              3328 	mov	sp,a
                           3329 ;	main4.c:472: eeprom_functions();
                           3330 ;	genCall
                           3331 ;	main4.c:473: }break;
                           3332 ;	Peephole 251.a	replaced ljmp to ret with ret
                           3333 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0BED 02s09rBE           3334 	ljmp	_eeprom_functions
                           3335 ;	main4.c:474: case 3:
   0BF0                    3336 00109$:
                           3337 ;	main4.c:476: printf("\n\n\rPlease enter the START address for block fill (0x000 to 0x7FF) 0x");
                           3338 ;	genIpush
   0BF0 74rB1              3339 	mov	a,#__str_53
   0BF2 C0 E0              3340 	push	acc
   0BF4 74s08              3341 	mov	a,#(__str_53 >> 8)
   0BF6 C0 E0              3342 	push	acc
   0BF8 74 80              3343 	mov	a,#0x80
   0BFA C0 E0              3344 	push	acc
                           3345 ;	genCall
   0BFC 12s00r00           3346 	lcall	_printf
   0BFF 15 81              3347 	dec	sp
   0C01 15 81              3348 	dec	sp
   0C03 15 81              3349 	dec	sp
                           3350 ;	main4.c:477: startadd =get_addr();
                           3351 ;	genCall
   0C05 12s10rD1           3352 	lcall	_get_addr
   0C08 AA 82              3353 	mov	r2,dpl
   0C0A AB 83              3354 	mov	r3,dph
                           3355 ;	main4.c:478: printf("\n\n\rPlease enter the END address for block fill (0x000 to 0x7FF) 0x");
                           3356 ;	genIpush
   0C0C C0 02              3357 	push	ar2
   0C0E C0 03              3358 	push	ar3
   0C10 74rF6              3359 	mov	a,#__str_54
   0C12 C0 E0              3360 	push	acc
   0C14 74s08              3361 	mov	a,#(__str_54 >> 8)
   0C16 C0 E0              3362 	push	acc
   0C18 74 80              3363 	mov	a,#0x80
   0C1A C0 E0              3364 	push	acc
                           3365 ;	genCall
   0C1C 12s00r00           3366 	lcall	_printf
   0C1F 15 81              3367 	dec	sp
   0C21 15 81              3368 	dec	sp
   0C23 15 81              3369 	dec	sp
   0C25 D0 03              3370 	pop	ar3
   0C27 D0 02              3371 	pop	ar2
                           3372 ;	main4.c:479: endadd = get_addr();
                           3373 ;	genCall
   0C29 C0 02              3374 	push	ar2
   0C2B C0 03              3375 	push	ar3
   0C2D 12s10rD1           3376 	lcall	_get_addr
   0C30 AC 82              3377 	mov	r4,dpl
   0C32 AD 83              3378 	mov	r5,dph
   0C34 D0 03              3379 	pop	ar3
   0C36 D0 02              3380 	pop	ar2
                           3381 ;	main4.c:480: printf("\n\n\rPlease enter the databyte for the fill 0x");
                           3382 ;	genIpush
   0C38 C0 02              3383 	push	ar2
   0C3A C0 03              3384 	push	ar3
   0C3C C0 04              3385 	push	ar4
   0C3E C0 05              3386 	push	ar5
   0C40 74r39              3387 	mov	a,#__str_55
   0C42 C0 E0              3388 	push	acc
   0C44 74s09              3389 	mov	a,#(__str_55 >> 8)
   0C46 C0 E0              3390 	push	acc
   0C48 74 80              3391 	mov	a,#0x80
   0C4A C0 E0              3392 	push	acc
                           3393 ;	genCall
   0C4C 12s00r00           3394 	lcall	_printf
   0C4F 15 81              3395 	dec	sp
   0C51 15 81              3396 	dec	sp
   0C53 15 81              3397 	dec	sp
   0C55 D0 05              3398 	pop	ar5
   0C57 D0 04              3399 	pop	ar4
   0C59 D0 03              3400 	pop	ar3
   0C5B D0 02              3401 	pop	ar2
                           3402 ;	main4.c:481: filldata=get_data();
                           3403 ;	genCall
   0C5D C0 02              3404 	push	ar2
   0C5F C0 03              3405 	push	ar3
   0C61 C0 04              3406 	push	ar4
   0C63 C0 05              3407 	push	ar5
   0C65 12s17rFC           3408 	lcall	_get_data
   0C68 AE 82              3409 	mov	r6,dpl
   0C6A AF 83              3410 	mov	r7,dph
   0C6C D0 05              3411 	pop	ar5
   0C6E D0 04              3412 	pop	ar4
   0C70 D0 03              3413 	pop	ar3
   0C72 D0 02              3414 	pop	ar2
                           3415 ;	main4.c:483: if(startadd < endadd) //check for startadd greater than endaddr
                           3416 ;	genCmpLt
                           3417 ;	genCmp
   0C74 C3                 3418 	clr	c
   0C75 EA                 3419 	mov	a,r2
   0C76 9C                 3420 	subb	a,r4
   0C77 EB                 3421 	mov	a,r3
   0C78 64 80              3422 	xrl	a,#0x80
   0C7A 8D F0              3423 	mov	b,r5
   0C7C 63 F0 80           3424 	xrl	b,#0x80
   0C7F 95 F0              3425 	subb	a,b
                           3426 ;	genIfxJump
   0C81 40 03              3427 	jc	00161$
   0C83 02s0Dr09           3428 	ljmp	00119$
   0C86                    3429 00161$:
                           3430 ;	main4.c:485: if(startadd <= 2047 && endadd <= 2047 && startadd >= 0 && endadd >= 0)
                           3431 ;	genCmpGt
                           3432 ;	genCmp
   0C86 C3                 3433 	clr	c
   0C87 74 FF              3434 	mov	a,#0xFF
   0C89 9A                 3435 	subb	a,r2
                           3436 ;	Peephole 159	avoided xrl during execution
   0C8A 74 87              3437 	mov	a,#(0x07 ^ 0x80)
   0C8C 8B F0              3438 	mov	b,r3
   0C8E 63 F0 80           3439 	xrl	b,#0x80
   0C91 95 F0              3440 	subb	a,b
                           3441 ;	genIfxJump
   0C93 50 01              3442 	jnc	00162$
                           3443 ;	Peephole 251.a	replaced ljmp to ret with ret
   0C95 22                 3444 	ret
   0C96                    3445 00162$:
                           3446 ;	genCmpGt
                           3447 ;	genCmp
   0C96 C3                 3448 	clr	c
   0C97 74 FF              3449 	mov	a,#0xFF
   0C99 9C                 3450 	subb	a,r4
                           3451 ;	Peephole 159	avoided xrl during execution
   0C9A 74 87              3452 	mov	a,#(0x07 ^ 0x80)
   0C9C 8D F0              3453 	mov	b,r5
   0C9E 63 F0 80           3454 	xrl	b,#0x80
   0CA1 95 F0              3455 	subb	a,b
                           3456 ;	genIfxJump
   0CA3 50 01              3457 	jnc	00163$
                           3458 ;	Peephole 251.a	replaced ljmp to ret with ret
   0CA5 22                 3459 	ret
   0CA6                    3460 00163$:
                           3461 ;	genCmpLt
                           3462 ;	genCmp
   0CA6 EB                 3463 	mov	a,r3
                           3464 ;	genIfxJump
   0CA7 30 E7 01           3465 	jnb	acc.7,00164$
                           3466 ;	Peephole 251.a	replaced ljmp to ret with ret
   0CAA 22                 3467 	ret
   0CAB                    3468 00164$:
                           3469 ;	genCmpLt
                           3470 ;	genCmp
   0CAB ED                 3471 	mov	a,r5
                           3472 ;	genIfxJump
   0CAC 30 E7 01           3473 	jnb	acc.7,00165$
                           3474 ;	Peephole 251.a	replaced ljmp to ret with ret
   0CAF 22                 3475 	ret
   0CB0                    3476 00165$:
                           3477 ;	main4.c:488: length = endadd-startadd;
                           3478 ;	genMinus
   0CB0 EC                 3479 	mov	a,r4
   0CB1 C3                 3480 	clr	c
                           3481 ;	Peephole 236.l	used r2 instead of ar2
   0CB2 9A                 3482 	subb	a,r2
   0CB3 FC                 3483 	mov	r4,a
   0CB4 ED                 3484 	mov	a,r5
                           3485 ;	Peephole 236.l	used r3 instead of ar3
   0CB5 9B                 3486 	subb	a,r3
   0CB6 FD                 3487 	mov	r5,a
                           3488 ;	main4.c:489: P1_7=1;                       //toggle port pin P1_7
                           3489 ;	genAssign
   0CB7 D2 97              3490 	setb	_P1_7
                           3491 ;	main4.c:490: sf = block_fill(startadd,length,filldata);        // calls black filling function
                           3492 ;	genAssign
   0CB9 90s00r00           3493 	mov	dptr,#_block_fill_PARM_2
   0CBC EC                 3494 	mov	a,r4
   0CBD F0                 3495 	movx	@dptr,a
   0CBE A3                 3496 	inc	dptr
   0CBF ED                 3497 	mov	a,r5
   0CC0 F0                 3498 	movx	@dptr,a
                           3499 ;	genAssign
   0CC1 90s00r00           3500 	mov	dptr,#_block_fill_PARM_3
   0CC4 EE                 3501 	mov	a,r6
   0CC5 F0                 3502 	movx	@dptr,a
   0CC6 A3                 3503 	inc	dptr
   0CC7 EF                 3504 	mov	a,r7
   0CC8 F0                 3505 	movx	@dptr,a
                           3506 ;	genCall
   0CC9 8A 82              3507 	mov	dpl,r2
   0CCB 8B 83              3508 	mov	dph,r3
   0CCD 12s00r00           3509 	lcall	_block_fill
   0CD0 AA 82              3510 	mov	r2,dpl
   0CD2 AB 83              3511 	mov	r3,dph
                           3512 ;	main4.c:491: P1_7=0;                        //toggle port pin p1_7
                           3513 ;	genAssign
   0CD4 C2 97              3514 	clr	_P1_7
                           3515 ;	main4.c:493: if(sf == 0) printf("\n\n\r Block Fill Sucessfull");   //ACK to terminal
                           3516 ;	genIfx
   0CD6 EA                 3517 	mov	a,r2
   0CD7 4B                 3518 	orl	a,r3
                           3519 ;	genIfxJump
                           3520 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0CD8 70 17              3521 	jnz	00111$
                           3522 ;	Peephole 300	removed redundant label 00166$
                           3523 ;	genIpush
   0CDA 74r66              3524 	mov	a,#__str_56
   0CDC C0 E0              3525 	push	acc
   0CDE 74s09              3526 	mov	a,#(__str_56 >> 8)
   0CE0 C0 E0              3527 	push	acc
   0CE2 74 80              3528 	mov	a,#0x80
   0CE4 C0 E0              3529 	push	acc
                           3530 ;	genCall
   0CE6 12s00r00           3531 	lcall	_printf
   0CE9 15 81              3532 	dec	sp
   0CEB 15 81              3533 	dec	sp
   0CED 15 81              3534 	dec	sp
                           3535 ;	Peephole 112.b	changed ljmp to sjmp
   0CEF 80 15              3536 	sjmp	00112$
   0CF1                    3537 00111$:
                           3538 ;	main4.c:494: else printf("\n\n\r Block fill failed");              //NACK to terminal
                           3539 ;	genIpush
   0CF1 74r80              3540 	mov	a,#__str_57
   0CF3 C0 E0              3541 	push	acc
   0CF5 74s09              3542 	mov	a,#(__str_57 >> 8)
   0CF7 C0 E0              3543 	push	acc
   0CF9 74 80              3544 	mov	a,#0x80
   0CFB C0 E0              3545 	push	acc
                           3546 ;	genCall
   0CFD 12s00r00           3547 	lcall	_printf
   0D00 15 81              3548 	dec	sp
   0D02 15 81              3549 	dec	sp
   0D04 15 81              3550 	dec	sp
   0D06                    3551 00112$:
                           3552 ;	main4.c:495: eeprom_functions();
                           3553 ;	genCall
                           3554 ;	Peephole 251.a	replaced ljmp to ret with ret
                           3555 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0D06 02s09rBE           3556 	ljmp	_eeprom_functions
   0D09                    3557 00119$:
                           3558 ;	main4.c:501: printf("Invalid Input");
                           3559 ;	genIpush
   0D09 74r6B              3560 	mov	a,#__str_37
   0D0B C0 E0              3561 	push	acc
   0D0D 74s06              3562 	mov	a,#(__str_37 >> 8)
   0D0F C0 E0              3563 	push	acc
   0D11 74 80              3564 	mov	a,#0x80
   0D13 C0 E0              3565 	push	acc
                           3566 ;	genCall
   0D15 12s00r00           3567 	lcall	_printf
   0D18 15 81              3568 	dec	sp
   0D1A 15 81              3569 	dec	sp
   0D1C 15 81              3570 	dec	sp
                           3571 ;	main4.c:504: }break;
                           3572 ;	Peephole 251.a	replaced ljmp to ret with ret
   0D1E 22                 3573 	ret
                           3574 ;	main4.c:505: case 4:
   0D1F                    3575 00121$:
                           3576 ;	main4.c:508: printf("The current set address is 0x%40X",prev_startadd);
                           3577 ;	genIpush
   0D1F 90s00r56           3578 	mov	dptr,#_prev_startadd
   0D22 E0                 3579 	movx	a,@dptr
   0D23 C0 E0              3580 	push	acc
   0D25 A3                 3581 	inc	dptr
   0D26 E0                 3582 	movx	a,@dptr
   0D27 C0 E0              3583 	push	acc
                           3584 ;	genIpush
   0D29 74r96              3585 	mov	a,#__str_58
   0D2B C0 E0              3586 	push	acc
   0D2D 74s09              3587 	mov	a,#(__str_58 >> 8)
   0D2F C0 E0              3588 	push	acc
   0D31 74 80              3589 	mov	a,#0x80
   0D33 C0 E0              3590 	push	acc
                           3591 ;	genCall
   0D35 12s00r00           3592 	lcall	_printf
   0D38 E5 81              3593 	mov	a,sp
   0D3A 24 FB              3594 	add	a,#0xfb
   0D3C F5 81              3595 	mov	sp,a
                           3596 ;	main4.c:510: printf("Would you like to enter a new start addres(Y/N)");
                           3597 ;	genIpush
   0D3E 74rB8              3598 	mov	a,#__str_59
   0D40 C0 E0              3599 	push	acc
   0D42 74s09              3600 	mov	a,#(__str_59 >> 8)
   0D44 C0 E0              3601 	push	acc
   0D46 74 80              3602 	mov	a,#0x80
   0D48 C0 E0              3603 	push	acc
                           3604 ;	genCall
   0D4A 12s00r00           3605 	lcall	_printf
   0D4D 15 81              3606 	dec	sp
   0D4F 15 81              3607 	dec	sp
   0D51 15 81              3608 	dec	sp
                           3609 ;	main4.c:512: yesno=getchar();
                           3610 ;	genCall
   0D53 12s01r72           3611 	lcall	_getchar
                           3612 ;	main4.c:513: putchar(yesno);
                           3613 ;	genCall
   0D56 AA 82              3614 	mov  r2,dpl
                           3615 ;	Peephole 177.a	removed redundant mov
   0D58 C0 02              3616 	push	ar2
   0D5A 12s01r60           3617 	lcall	_putchar
   0D5D D0 02              3618 	pop	ar2
                           3619 ;	main4.c:514: if(yesno == 'y' ||yesno == 'Y')
                           3620 ;	genCmpEq
                           3621 ;	gencjneshort
   0D5F BA 79 02           3622 	cjne	r2,#0x79,00167$
                           3623 ;	Peephole 112.b	changed ljmp to sjmp
   0D62 80 03              3624 	sjmp	00122$
   0D64                    3625 00167$:
                           3626 ;	genCmpEq
                           3627 ;	gencjneshort
                           3628 ;	Peephole 112.b	changed ljmp to sjmp
                           3629 ;	Peephole 198.b	optimized misc jump sequence
   0D64 BA 59 30           3630 	cjne	r2,#0x59,00123$
                           3631 ;	Peephole 200.b	removed redundant sjmp
                           3632 ;	Peephole 300	removed redundant label 00168$
                           3633 ;	Peephole 300	removed redundant label 00169$
   0D67                    3634 00122$:
                           3635 ;	main4.c:516: printf("\n\n\rPlease enter the START address for 4 byte block to be displayed on LCD (0x000 to 0x7FF) 0x");
                           3636 ;	genIpush
   0D67 74rE8              3637 	mov	a,#__str_60
   0D69 C0 E0              3638 	push	acc
   0D6B 74s09              3639 	mov	a,#(__str_60 >> 8)
   0D6D C0 E0              3640 	push	acc
   0D6F 74 80              3641 	mov	a,#0x80
   0D71 C0 E0              3642 	push	acc
                           3643 ;	genCall
   0D73 12s00r00           3644 	lcall	_printf
   0D76 15 81              3645 	dec	sp
   0D78 15 81              3646 	dec	sp
   0D7A 15 81              3647 	dec	sp
                           3648 ;	main4.c:517: startadd=get_addr();//gets the address from the user
                           3649 ;	genCall
   0D7C 12s10rD1           3650 	lcall	_get_addr
   0D7F AA 82              3651 	mov	r2,dpl
   0D81 AB 83              3652 	mov	r3,dph
                           3653 ;	main4.c:518: prev_startadd= startadd + 4;
                           3654 ;	genPlus
   0D83 90s00r56           3655 	mov	dptr,#_prev_startadd
                           3656 ;     genPlusIncr
   0D86 74 04              3657 	mov	a,#0x04
                           3658 ;	Peephole 236.a	used r2 instead of ar2
   0D88 2A                 3659 	add	a,r2
   0D89 F0                 3660 	movx	@dptr,a
                           3661 ;	Peephole 181	changed mov to clr
   0D8A E4                 3662 	clr	a
                           3663 ;	Peephole 236.b	used r3 instead of ar3
   0D8B 3B                 3664 	addc	a,r3
   0D8C A3                 3665 	inc	dptr
   0D8D F0                 3666 	movx	@dptr,a
                           3667 ;	main4.c:519: disp_4bytes(startadd);       //prints the 4 data and adress sets to the LCD
                           3668 ;	genCall
   0D8E 8A 82              3669 	mov	dpl,r2
   0D90 8B 83              3670 	mov	dph,r3
   0D92 12s1CrFC           3671 	lcall	_disp_4bytes
                           3672 ;	Peephole 112.b	changed ljmp to sjmp
   0D95 80 2A              3673 	sjmp	00124$
   0D97                    3674 00123$:
                           3675 ;	main4.c:523: startadd = prev_startadd;
                           3676 ;	genAssign
   0D97 90s00r56           3677 	mov	dptr,#_prev_startadd
   0D9A E0                 3678 	movx	a,@dptr
   0D9B FA                 3679 	mov	r2,a
   0D9C A3                 3680 	inc	dptr
   0D9D E0                 3681 	movx	a,@dptr
   0D9E FB                 3682 	mov	r3,a
                           3683 ;	genAssign
   0D9F 90s00r7D           3684 	mov	dptr,#_eeprom_functions_startadd_1_1
   0DA2 EA                 3685 	mov	a,r2
   0DA3 F0                 3686 	movx	@dptr,a
   0DA4 A3                 3687 	inc	dptr
   0DA5 EB                 3688 	mov	a,r3
   0DA6 F0                 3689 	movx	@dptr,a
                           3690 ;	main4.c:524: prev_startadd= startadd + 4;
                           3691 ;	genPlus
   0DA7 90s00r56           3692 	mov	dptr,#_prev_startadd
                           3693 ;     genPlusIncr
   0DAA 74 04              3694 	mov	a,#0x04
                           3695 ;	Peephole 236.a	used r2 instead of ar2
   0DAC 2A                 3696 	add	a,r2
   0DAD F0                 3697 	movx	@dptr,a
                           3698 ;	Peephole 181	changed mov to clr
   0DAE E4                 3699 	clr	a
                           3700 ;	Peephole 236.b	used r3 instead of ar3
   0DAF 3B                 3701 	addc	a,r3
   0DB0 A3                 3702 	inc	dptr
   0DB1 F0                 3703 	movx	@dptr,a
                           3704 ;	main4.c:525: disp_4bytes(startadd);      //prints the 4 data and adress sets to the LCD
                           3705 ;	genAssign
   0DB2 90s00r7D           3706 	mov	dptr,#_eeprom_functions_startadd_1_1
   0DB5 E0                 3707 	movx	a,@dptr
   0DB6 FA                 3708 	mov	r2,a
   0DB7 A3                 3709 	inc	dptr
   0DB8 E0                 3710 	movx	a,@dptr
   0DB9 FB                 3711 	mov	r3,a
                           3712 ;	genCall
   0DBA 8A 82              3713 	mov	dpl,r2
   0DBC 8B 83              3714 	mov	dph,r3
   0DBE 12s1CrFC           3715 	lcall	_disp_4bytes
   0DC1                    3716 00124$:
                           3717 ;	main4.c:527: eeprom_functions();     //Go back to EEPROM functions menu
                           3718 ;	genCall
                           3719 ;	main4.c:528: }break;
                           3720 ;	Peephole 251.a	replaced ljmp to ret with ret
                           3721 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0DC1 02s09rBE           3722 	ljmp	_eeprom_functions
                           3723 ;	main4.c:529: case 5:
   0DC4                    3724 00126$:
                           3725 ;	main4.c:532: printf("\n\n\rPlease enter the START address for block fill (0x000 to 0x7FF) 0x");
                           3726 ;	genIpush
   0DC4 74rB1              3727 	mov	a,#__str_53
   0DC6 C0 E0              3728 	push	acc
   0DC8 74s08              3729 	mov	a,#(__str_53 >> 8)
   0DCA C0 E0              3730 	push	acc
   0DCC 74 80              3731 	mov	a,#0x80
   0DCE C0 E0              3732 	push	acc
                           3733 ;	genCall
   0DD0 12s00r00           3734 	lcall	_printf
   0DD3 15 81              3735 	dec	sp
   0DD5 15 81              3736 	dec	sp
   0DD7 15 81              3737 	dec	sp
                           3738 ;	main4.c:533: startadd =get_addr();
                           3739 ;	genCall
   0DD9 12s10rD1           3740 	lcall	_get_addr
   0DDC AA 82              3741 	mov	r2,dpl
   0DDE AB 83              3742 	mov	r3,dph
                           3743 ;	main4.c:534: printf("\n\n\rPlease enter the END address for block fill (0x000 to 0x7FF) 0x");
                           3744 ;	genIpush
   0DE0 C0 02              3745 	push	ar2
   0DE2 C0 03              3746 	push	ar3
   0DE4 74rF6              3747 	mov	a,#__str_54
   0DE6 C0 E0              3748 	push	acc
   0DE8 74s08              3749 	mov	a,#(__str_54 >> 8)
   0DEA C0 E0              3750 	push	acc
   0DEC 74 80              3751 	mov	a,#0x80
   0DEE C0 E0              3752 	push	acc
                           3753 ;	genCall
   0DF0 12s00r00           3754 	lcall	_printf
   0DF3 15 81              3755 	dec	sp
   0DF5 15 81              3756 	dec	sp
   0DF7 15 81              3757 	dec	sp
   0DF9 D0 03              3758 	pop	ar3
   0DFB D0 02              3759 	pop	ar2
                           3760 ;	main4.c:535: endadd = get_addr();
                           3761 ;	genCall
   0DFD C0 02              3762 	push	ar2
   0DFF C0 03              3763 	push	ar3
   0E01 12s10rD1           3764 	lcall	_get_addr
   0E04 AC 82              3765 	mov	r4,dpl
   0E06 AD 83              3766 	mov	r5,dph
   0E08 D0 03              3767 	pop	ar3
   0E0A D0 02              3768 	pop	ar2
                           3769 ;	main4.c:536: if(startadd <endadd)
                           3770 ;	genCmpLt
                           3771 ;	genCmp
   0E0C C3                 3772 	clr	c
   0E0D EA                 3773 	mov	a,r2
   0E0E 9C                 3774 	subb	a,r4
   0E0F EB                 3775 	mov	a,r3
   0E10 64 80              3776 	xrl	a,#0x80
   0E12 8D F0              3777 	mov	b,r5
   0E14 63 F0 80           3778 	xrl	b,#0x80
   0E17 95 F0              3779 	subb	a,b
                           3780 ;	genIfxJump
                           3781 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0E19 50 5C              3782 	jnc	00134$
                           3783 ;	Peephole 300	removed redundant label 00170$
                           3784 ;	main4.c:538: if(startadd <= 2407 && endadd <= 2407 && startadd >= 0 && endadd >= 0)        //checks range of the block
                           3785 ;	genCmpGt
                           3786 ;	genCmp
   0E1B C3                 3787 	clr	c
   0E1C 74 67              3788 	mov	a,#0x67
   0E1E 9A                 3789 	subb	a,r2
                           3790 ;	Peephole 159	avoided xrl during execution
   0E1F 74 89              3791 	mov	a,#(0x09 ^ 0x80)
   0E21 8B F0              3792 	mov	b,r3
   0E23 63 F0 80           3793 	xrl	b,#0x80
   0E26 95 F0              3794 	subb	a,b
                           3795 ;	genIfxJump
                           3796 ;	Peephole 112.b	changed ljmp to sjmp
                           3797 ;	Peephole 160.a	removed sjmp by inverse jump logic
                           3798 ;	genCmpGt
                           3799 ;	genCmp
   0E28 40 23              3800 	jc	00128$
                           3801 ;	Peephole 300	removed redundant label 00171$
                           3802 ;	Peephole 256.a	removed redundant clr c
   0E2A 74 67              3803 	mov	a,#0x67
   0E2C 9C                 3804 	subb	a,r4
                           3805 ;	Peephole 159	avoided xrl during execution
   0E2D 74 89              3806 	mov	a,#(0x09 ^ 0x80)
   0E2F 8D F0              3807 	mov	b,r5
   0E31 63 F0 80           3808 	xrl	b,#0x80
   0E34 95 F0              3809 	subb	a,b
                           3810 ;	genIfxJump
                           3811 ;	Peephole 112.b	changed ljmp to sjmp
                           3812 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0E36 40 15              3813 	jc	00128$
                           3814 ;	Peephole 300	removed redundant label 00172$
                           3815 ;	genCmpLt
                           3816 ;	genCmp
   0E38 EB                 3817 	mov	a,r3
                           3818 ;	genIfxJump
                           3819 ;	Peephole 108.e	removed ljmp by inverse jump logic
   0E39 20 E7 11           3820 	jb	acc.7,00128$
                           3821 ;	Peephole 300	removed redundant label 00173$
                           3822 ;	genCmpLt
                           3823 ;	genCmp
   0E3C ED                 3824 	mov	a,r5
                           3825 ;	genIfxJump
                           3826 ;	Peephole 108.e	removed ljmp by inverse jump logic
   0E3D 20 E7 0D           3827 	jb	acc.7,00128$
                           3828 ;	Peephole 300	removed redundant label 00174$
                           3829 ;	main4.c:539: length = endadd-startadd;     //determinses the length of the block to be filled
                           3830 ;	genMinus
   0E40 90s00r7F           3831 	mov	dptr,#_eeprom_functions_length_1_1
   0E43 EC                 3832 	mov	a,r4
   0E44 C3                 3833 	clr	c
                           3834 ;	Peephole 236.l	used r2 instead of ar2
   0E45 9A                 3835 	subb	a,r2
   0E46 F0                 3836 	movx	@dptr,a
   0E47 ED                 3837 	mov	a,r5
                           3838 ;	Peephole 236.l	used r3 instead of ar3
   0E48 9B                 3839 	subb	a,r3
   0E49 A3                 3840 	inc	dptr
   0E4A F0                 3841 	movx	@dptr,a
                           3842 ;	Peephole 112.b	changed ljmp to sjmp
   0E4B 80 52              3843 	sjmp	00135$
   0E4D                    3844 00128$:
                           3845 ;	main4.c:542: printf("The Address if out of range. Please try again");
                           3846 ;	genIpush
   0E4D C0 02              3847 	push	ar2
   0E4F C0 03              3848 	push	ar3
   0E51 74r46              3849 	mov	a,#__str_61
   0E53 C0 E0              3850 	push	acc
   0E55 74s0A              3851 	mov	a,#(__str_61 >> 8)
   0E57 C0 E0              3852 	push	acc
   0E59 74 80              3853 	mov	a,#0x80
   0E5B C0 E0              3854 	push	acc
                           3855 ;	genCall
   0E5D 12s00r00           3856 	lcall	_printf
   0E60 15 81              3857 	dec	sp
   0E62 15 81              3858 	dec	sp
   0E64 15 81              3859 	dec	sp
   0E66 D0 03              3860 	pop	ar3
   0E68 D0 02              3861 	pop	ar2
                           3862 ;	main4.c:543: eeprom_functions();
                           3863 ;	genCall
   0E6A C0 02              3864 	push	ar2
   0E6C C0 03              3865 	push	ar3
   0E6E 12s09rBE           3866 	lcall	_eeprom_functions
   0E71 D0 03              3867 	pop	ar3
   0E73 D0 02              3868 	pop	ar2
                           3869 ;	Peephole 112.b	changed ljmp to sjmp
   0E75 80 28              3870 	sjmp	00135$
   0E77                    3871 00134$:
                           3872 ;	main4.c:548: printf("\n\rThe Start  Address is bigger than the end address please enter Valid Inputs");
                           3873 ;	genIpush
   0E77 C0 02              3874 	push	ar2
   0E79 C0 03              3875 	push	ar3
   0E7B 74r74              3876 	mov	a,#__str_62
   0E7D C0 E0              3877 	push	acc
   0E7F 74s0A              3878 	mov	a,#(__str_62 >> 8)
   0E81 C0 E0              3879 	push	acc
   0E83 74 80              3880 	mov	a,#0x80
   0E85 C0 E0              3881 	push	acc
                           3882 ;	genCall
   0E87 12s00r00           3883 	lcall	_printf
   0E8A 15 81              3884 	dec	sp
   0E8C 15 81              3885 	dec	sp
   0E8E 15 81              3886 	dec	sp
   0E90 D0 03              3887 	pop	ar3
   0E92 D0 02              3888 	pop	ar2
                           3889 ;	main4.c:549: eeprom_functions();
                           3890 ;	genCall
   0E94 C0 02              3891 	push	ar2
   0E96 C0 03              3892 	push	ar3
   0E98 12s09rBE           3893 	lcall	_eeprom_functions
   0E9B D0 03              3894 	pop	ar3
   0E9D D0 02              3895 	pop	ar2
   0E9F                    3896 00135$:
                           3897 ;	main4.c:551: sf = block_print(startadd,length);            //check address and print block
                           3898 ;	genAssign
   0E9F 90s00r7F           3899 	mov	dptr,#_eeprom_functions_length_1_1
   0EA2 E0                 3900 	movx	a,@dptr
   0EA3 FC                 3901 	mov	r4,a
   0EA4 A3                 3902 	inc	dptr
   0EA5 E0                 3903 	movx	a,@dptr
   0EA6 FD                 3904 	mov	r5,a
                           3905 ;	genAssign
   0EA7 90s00r9A           3906 	mov	dptr,#_block_print_PARM_2
   0EAA EC                 3907 	mov	a,r4
   0EAB F0                 3908 	movx	@dptr,a
   0EAC A3                 3909 	inc	dptr
   0EAD ED                 3910 	mov	a,r5
   0EAE F0                 3911 	movx	@dptr,a
                           3912 ;	genCall
   0EAF 8A 82              3913 	mov	dpl,r2
   0EB1 8B 83              3914 	mov	dph,r3
   0EB3 12s26rEB           3915 	lcall	_block_print
                           3916 ;	main4.c:552: eeprom_functions();                           //Go back to eeprom Functions
                           3917 ;	genCall
                           3918 ;	main4.c:553: }break;
                           3919 ;	main4.c:554: case 6:
                           3920 ;	Peephole 112.b	changed ljmp to sjmp
                           3921 ;	Peephole 251.b	replaced sjmp to ret with ret
                           3922 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0EB6 02s09rBE           3923 	ljmp	_eeprom_functions
   0EB9                    3924 00136$:
                           3925 ;	main4.c:556: printf("\n\n\rInitializing internal Reset");
                           3926 ;	genIpush
   0EB9 74rC2              3927 	mov	a,#__str_63
   0EBB C0 E0              3928 	push	acc
   0EBD 74s0A              3929 	mov	a,#(__str_63 >> 8)
   0EBF C0 E0              3930 	push	acc
   0EC1 74 80              3931 	mov	a,#0x80
   0EC3 C0 E0              3932 	push	acc
                           3933 ;	genCall
   0EC5 12s00r00           3934 	lcall	_printf
   0EC8 15 81              3935 	dec	sp
   0ECA 15 81              3936 	dec	sp
   0ECC 15 81              3937 	dec	sp
                           3938 ;	main4.c:557: I2CReset();     // Calls the RESET function
                           3939 ;	genCall
   0ECE 12s00r00           3940 	lcall	_I2CReset
                           3941 ;	main4.c:558: printf("\n\n\rThe EEPROM has been Reset to a valid state");
                           3942 ;	genIpush
   0ED1 74rE1              3943 	mov	a,#__str_64
   0ED3 C0 E0              3944 	push	acc
   0ED5 74s0A              3945 	mov	a,#(__str_64 >> 8)
   0ED7 C0 E0              3946 	push	acc
   0ED9 74 80              3947 	mov	a,#0x80
   0EDB C0 E0              3948 	push	acc
                           3949 ;	genCall
   0EDD 12s00r00           3950 	lcall	_printf
   0EE0 15 81              3951 	dec	sp
   0EE2 15 81              3952 	dec	sp
   0EE4 15 81              3953 	dec	sp
                           3954 ;	main4.c:559: eeprom_functions();             //Goes back to the eepromfunctions menu
                           3955 ;	genCall
                           3956 ;	main4.c:560: }break;
                           3957 ;	main4.c:562: default:
                           3958 ;	Peephole 112.b	changed ljmp to sjmp
                           3959 ;	Peephole 251.b	replaced sjmp to ret with ret
                           3960 ;	Peephole 253.a	replaced lcall/ret with ljmp
   0EE6 02s09rBE           3961 	ljmp	_eeprom_functions
   0EE9                    3962 00137$:
                           3963 ;	main4.c:564: printf("\n\n\r Inavlid Input! Please Try Again.");
                           3964 ;	genIpush
   0EE9 74r0F              3965 	mov	a,#__str_65
   0EEB C0 E0              3966 	push	acc
   0EED 74s0B              3967 	mov	a,#(__str_65 >> 8)
   0EEF C0 E0              3968 	push	acc
   0EF1 74 80              3969 	mov	a,#0x80
   0EF3 C0 E0              3970 	push	acc
                           3971 ;	genCall
   0EF5 12s00r00           3972 	lcall	_printf
   0EF8 15 81              3973 	dec	sp
   0EFA 15 81              3974 	dec	sp
   0EFC 15 81              3975 	dec	sp
                           3976 ;	main4.c:565: eeprom_functions();
                           3977 ;	genCall
                           3978 ;	main4.c:567: }
                           3979 ;	Peephole 253.b	replaced lcall/ret with ljmp
   0EFE 02s09rBE           3980 	ljmp	_eeprom_functions
                           3981 ;
                           3982 ;------------------------------------------------------------
                           3983 ;Allocation info for local variables in function 'main_menu'
                           3984 ;------------------------------------------------------------
                           3985 ;choice                    Allocated with name '_main_menu_choice_1_1'
                           3986 ;------------------------------------------------------------
                           3987 ;	main4.c:572: void main_menu(void)
                           3988 ;	-----------------------------------------
                           3989 ;	 function main_menu
                           3990 ;	-----------------------------------------
   0F01                    3991 _main_menu:
                           3992 ;	main4.c:578: printf("\n\n\n\n\n\n\n\n\n\n\n\n\n");
                           3993 ;	genIpush
   0F01 74r34              3994 	mov	a,#__str_66
   0F03 C0 E0              3995 	push	acc
   0F05 74s0B              3996 	mov	a,#(__str_66 >> 8)
   0F07 C0 E0              3997 	push	acc
   0F09 74 80              3998 	mov	a,#0x80
   0F0B C0 E0              3999 	push	acc
                           4000 ;	genCall
   0F0D 12s00r00           4001 	lcall	_printf
   0F10 15 81              4002 	dec	sp
   0F12 15 81              4003 	dec	sp
   0F14 15 81              4004 	dec	sp
                           4005 ;	main4.c:579: printf("\n\r.-.   .-. .--. .-.    .--.  .--. .-..-. .--.");
                           4006 ;	genIpush
   0F16 74r42              4007 	mov	a,#__str_67
   0F18 C0 E0              4008 	push	acc
   0F1A 74s0B              4009 	mov	a,#(__str_67 >> 8)
   0F1C C0 E0              4010 	push	acc
   0F1E 74 80              4011 	mov	a,#0x80
   0F20 C0 E0              4012 	push	acc
                           4013 ;	genCall
   0F22 12s00r00           4014 	lcall	_printf
   0F25 15 81              4015 	dec	sp
   0F27 15 81              4016 	dec	sp
   0F29 15 81              4017 	dec	sp
                           4018 ;	main4.c:580: printf("\n\r: :.-.: :: .--': :   : .--': ,. :: `' :: .--'");
                           4019 ;	genIpush
   0F2B 74r71              4020 	mov	a,#__str_68
   0F2D C0 E0              4021 	push	acc
   0F2F 74s0B              4022 	mov	a,#(__str_68 >> 8)
   0F31 C0 E0              4023 	push	acc
   0F33 74 80              4024 	mov	a,#0x80
   0F35 C0 E0              4025 	push	acc
                           4026 ;	genCall
   0F37 12s00r00           4027 	lcall	_printf
   0F3A 15 81              4028 	dec	sp
   0F3C 15 81              4029 	dec	sp
   0F3E 15 81              4030 	dec	sp
                           4031 ;	main4.c:581: printf("\n\r: :: :: :: `;  : :   : :   : :: :: .. :: `;:");
                           4032 ;	genIpush
   0F40 74rA1              4033 	mov	a,#__str_69
   0F42 C0 E0              4034 	push	acc
   0F44 74s0B              4035 	mov	a,#(__str_69 >> 8)
   0F46 C0 E0              4036 	push	acc
   0F48 74 80              4037 	mov	a,#0x80
   0F4A C0 E0              4038 	push	acc
                           4039 ;	genCall
   0F4C 12s00r00           4040 	lcall	_printf
   0F4F 15 81              4041 	dec	sp
   0F51 15 81              4042 	dec	sp
   0F53 15 81              4043 	dec	sp
                           4044 ;	main4.c:582: printf("\n\r:`' `'' ;: :__ : :__ : :__ : :; :: :; :: :__");
                           4045 ;	genIpush
   0F55 74rD0              4046 	mov	a,#__str_70
   0F57 C0 E0              4047 	push	acc
   0F59 74s0B              4048 	mov	a,#(__str_70 >> 8)
   0F5B C0 E0              4049 	push	acc
   0F5D 74 80              4050 	mov	a,#0x80
   0F5F C0 E0              4051 	push	acc
                           4052 ;	genCall
   0F61 12s00r00           4053 	lcall	_printf
   0F64 15 81              4054 	dec	sp
   0F66 15 81              4055 	dec	sp
   0F68 15 81              4056 	dec	sp
                           4057 ;	main4.c:583: printf("\n\r `.,`.,' `.__.':___.'`.__.'`.__.':_;:_;`.__.'");
                           4058 ;	genIpush
   0F6A 74rFF              4059 	mov	a,#__str_71
   0F6C C0 E0              4060 	push	acc
   0F6E 74s0B              4061 	mov	a,#(__str_71 >> 8)
   0F70 C0 E0              4062 	push	acc
   0F72 74 80              4063 	mov	a,#0x80
   0F74 C0 E0              4064 	push	acc
                           4065 ;	genCall
   0F76 12s00r00           4066 	lcall	_printf
   0F79 15 81              4067 	dec	sp
   0F7B 15 81              4068 	dec	sp
   0F7D 15 81              4069 	dec	sp
                           4070 ;	main4.c:585: printf("\n\n\rWelcome to the Lab 4 signoff");
                           4071 ;	genIpush
   0F7F 74r2F              4072 	mov	a,#__str_72
   0F81 C0 E0              4073 	push	acc
   0F83 74s0C              4074 	mov	a,#(__str_72 >> 8)
   0F85 C0 E0              4075 	push	acc
   0F87 74 80              4076 	mov	a,#0x80
   0F89 C0 E0              4077 	push	acc
                           4078 ;	genCall
   0F8B 12s00r00           4079 	lcall	_printf
   0F8E 15 81              4080 	dec	sp
   0F90 15 81              4081 	dec	sp
   0F92 15 81              4082 	dec	sp
                           4083 ;	main4.c:587: printf ("\n\n\rOptions :");
                           4084 ;	genIpush
   0F94 74r4F              4085 	mov	a,#__str_73
   0F96 C0 E0              4086 	push	acc
   0F98 74s0C              4087 	mov	a,#(__str_73 >> 8)
   0F9A C0 E0              4088 	push	acc
   0F9C 74 80              4089 	mov	a,#0x80
   0F9E C0 E0              4090 	push	acc
                           4091 ;	genCall
   0FA0 12s00r00           4092 	lcall	_printf
   0FA3 15 81              4093 	dec	sp
   0FA5 15 81              4094 	dec	sp
   0FA7 15 81              4095 	dec	sp
                           4096 ;	main4.c:589: printf ("\n\n\r Press 1 : LCD testing functions");
                           4097 ;	genIpush
   0FA9 74r5C              4098 	mov	a,#__str_74
   0FAB C0 E0              4099 	push	acc
   0FAD 74s0C              4100 	mov	a,#(__str_74 >> 8)
   0FAF C0 E0              4101 	push	acc
   0FB1 74 80              4102 	mov	a,#0x80
   0FB3 C0 E0              4103 	push	acc
                           4104 ;	genCall
   0FB5 12s00r00           4105 	lcall	_printf
   0FB8 15 81              4106 	dec	sp
   0FBA 15 81              4107 	dec	sp
   0FBC 15 81              4108 	dec	sp
                           4109 ;	main4.c:590: printf ("\n\n\r Press 2 : EEPROM testing functions");
                           4110 ;	genIpush
   0FBE 74r80              4111 	mov	a,#__str_75
   0FC0 C0 E0              4112 	push	acc
   0FC2 74s0C              4113 	mov	a,#(__str_75 >> 8)
   0FC4 C0 E0              4114 	push	acc
   0FC6 74 80              4115 	mov	a,#0x80
   0FC8 C0 E0              4116 	push	acc
                           4117 ;	genCall
   0FCA 12s00r00           4118 	lcall	_printf
   0FCD 15 81              4119 	dec	sp
   0FCF 15 81              4120 	dec	sp
   0FD1 15 81              4121 	dec	sp
                           4122 ;	main4.c:591: printf ("\n\n\r Press 3 : LCD TIMER functions");
                           4123 ;	genIpush
   0FD3 74rA7              4124 	mov	a,#__str_76
   0FD5 C0 E0              4125 	push	acc
   0FD7 74s0C              4126 	mov	a,#(__str_76 >> 8)
   0FD9 C0 E0              4127 	push	acc
   0FDB 74 80              4128 	mov	a,#0x80
   0FDD C0 E0              4129 	push	acc
                           4130 ;	genCall
   0FDF 12s00r00           4131 	lcall	_printf
   0FE2 15 81              4132 	dec	sp
   0FE4 15 81              4133 	dec	sp
   0FE6 15 81              4134 	dec	sp
                           4135 ;	main4.c:592: printf ("\n\n\r Press 4 : I2C PORT EXPANDER functions\n\r");
                           4136 ;	genIpush
   0FE8 74rC9              4137 	mov	a,#__str_77
   0FEA C0 E0              4138 	push	acc
   0FEC 74s0C              4139 	mov	a,#(__str_77 >> 8)
   0FEE C0 E0              4140 	push	acc
   0FF0 74 80              4141 	mov	a,#0x80
   0FF2 C0 E0              4142 	push	acc
                           4143 ;	genCall
   0FF4 12s00r00           4144 	lcall	_printf
   0FF7 15 81              4145 	dec	sp
   0FF9 15 81              4146 	dec	sp
   0FFB 15 81              4147 	dec	sp
                           4148 ;	main4.c:594: choice =getchar();
                           4149 ;	genCall
   0FFD 12s01r72           4150 	lcall	_getchar
                           4151 ;	genCast
                           4152 ;	peephole 177.g	optimized mov sequence
   1000 E5 82              4153 	mov	a,dpl
   1002 FA                 4154 	mov	r2,a
   1003 33                 4155 	rlc	a
   1004 95 E0              4156 	subb	a,acc
   1006 FB                 4157 	mov	r3,a
                           4158 ;	main4.c:597: putchar(choice);
                           4159 ;	genCast
   1007 8A 04              4160 	mov	ar4,r2
                           4161 ;	genCall
   1009 8C 82              4162 	mov	dpl,r4
   100B C0 02              4163 	push	ar2
   100D C0 03              4164 	push	ar3
   100F 12s01r60           4165 	lcall	_putchar
   1012 D0 03              4166 	pop	ar3
   1014 D0 02              4167 	pop	ar2
                           4168 ;	main4.c:601: switch(choice-48)
                           4169 ;	genMinus
   1016 EA                 4170 	mov	a,r2
   1017 24 D0              4171 	add	a,#0xd0
   1019 FA                 4172 	mov	r2,a
   101A EB                 4173 	mov	a,r3
   101B 34 FF              4174 	addc	a,#0xff
   101D FB                 4175 	mov	r3,a
                           4176 ;	genCmpEq
                           4177 ;	gencjneshort
   101E BA 01 05           4178 	cjne	r2,#0x01,00113$
   1021 BB 00 02           4179 	cjne	r3,#0x00,00113$
                           4180 ;	Peephole 112.b	changed ljmp to sjmp
   1024 80 18              4181 	sjmp	00101$
   1026                    4182 00113$:
                           4183 ;	genCmpEq
                           4184 ;	gencjneshort
   1026 BA 02 05           4185 	cjne	r2,#0x02,00114$
   1029 BB 00 02           4186 	cjne	r3,#0x00,00114$
                           4187 ;	Peephole 112.b	changed ljmp to sjmp
   102C 80 2A              4188 	sjmp	00102$
   102E                    4189 00114$:
                           4190 ;	genCmpEq
                           4191 ;	gencjneshort
   102E BA 03 05           4192 	cjne	r2,#0x03,00115$
   1031 BB 00 02           4193 	cjne	r3,#0x00,00115$
                           4194 ;	Peephole 112.b	changed ljmp to sjmp
   1034 80 3C              4195 	sjmp	00103$
   1036                    4196 00115$:
                           4197 ;	genCmpEq
                           4198 ;	gencjneshort
                           4199 ;	Peephole 112.b	changed ljmp to sjmp
                           4200 ;	main4.c:603: case 1:
                           4201 ;	Peephole 112.b	changed ljmp to sjmp
                           4202 ;	Peephole 198.a	optimized misc jump sequence
   1036 BA 04 6D           4203 	cjne	r2,#0x04,00105$
   1039 BB 00 6A           4204 	cjne	r3,#0x00,00105$
   103C 80 4E              4205 	sjmp	00104$
                           4206 ;	Peephole 300	removed redundant label 00116$
   103E                    4207 00101$:
                           4208 ;	main4.c:605: printf("Entering LCD function Menu: \n\n\n\n\n\n\n\n\n\n\n\n\n");
                           4209 ;	genIpush
   103E 74rF5              4210 	mov	a,#__str_78
   1040 C0 E0              4211 	push	acc
   1042 74s0C              4212 	mov	a,#(__str_78 >> 8)
   1044 C0 E0              4213 	push	acc
   1046 74 80              4214 	mov	a,#0x80
   1048 C0 E0              4215 	push	acc
                           4216 ;	genCall
   104A 12s00r00           4217 	lcall	_printf
   104D 15 81              4218 	dec	sp
   104F 15 81              4219 	dec	sp
   1051 15 81              4220 	dec	sp
                           4221 ;	main4.c:606: lcd_functions();            //got to lcd functions menu
                           4222 ;	genCall
   1053 12s06r8B           4223 	lcall	_lcd_functions
                           4224 ;	main4.c:607: } break;
                           4225 ;	main4.c:608: case 2:
                           4226 ;	Peephole 112.b	changed ljmp to sjmp
   1056 80 63              4227 	sjmp	00106$
   1058                    4228 00102$:
                           4229 ;	main4.c:610: printf("\n\rEnter EEPROM function Menu \n\n\n\n\n\n\n\n\n\n\n\n\n");
                           4230 ;	genIpush
   1058 74r1F              4231 	mov	a,#__str_79
   105A C0 E0              4232 	push	acc
   105C 74s0D              4233 	mov	a,#(__str_79 >> 8)
   105E C0 E0              4234 	push	acc
   1060 74 80              4235 	mov	a,#0x80
   1062 C0 E0              4236 	push	acc
                           4237 ;	genCall
   1064 12s00r00           4238 	lcall	_printf
   1067 15 81              4239 	dec	sp
   1069 15 81              4240 	dec	sp
   106B 15 81              4241 	dec	sp
                           4242 ;	main4.c:611: eeprom_functions();        //goto eeprom functions menu
                           4243 ;	genCall
   106D 12s09rBE           4244 	lcall	_eeprom_functions
                           4245 ;	main4.c:613: break;
                           4246 ;	main4.c:614: case 3:
                           4247 ;	Peephole 112.b	changed ljmp to sjmp
   1070 80 49              4248 	sjmp	00106$
   1072                    4249 00103$:
                           4250 ;	main4.c:616: printf("\n\rEntering LCD TIMER function Menu \n\n\n\n\n\n\n\n\n\n\n\n\n");
                           4251 ;	genIpush
   1072 74r4A              4252 	mov	a,#__str_80
   1074 C0 E0              4253 	push	acc
   1076 74s0D              4254 	mov	a,#(__str_80 >> 8)
   1078 C0 E0              4255 	push	acc
   107A 74 80              4256 	mov	a,#0x80
   107C C0 E0              4257 	push	acc
                           4258 ;	genCall
   107E 12s00r00           4259 	lcall	_printf
   1081 15 81              4260 	dec	sp
   1083 15 81              4261 	dec	sp
   1085 15 81              4262 	dec	sp
                           4263 ;	main4.c:617: clock_functions();          //goto clock/timer functions
                           4264 ;	genCall
   1087 12s2CrC4           4265 	lcall	_clock_functions
                           4266 ;	main4.c:619: break;
                           4267 ;	main4.c:620: case 4:
                           4268 ;	Peephole 112.b	changed ljmp to sjmp
   108A 80 2F              4269 	sjmp	00106$
   108C                    4270 00104$:
                           4271 ;	main4.c:622: printf("\n\rEntering I2C PORT EXPANDER function Menu \n\n\n\n\n\n\n\n\n\n\n\n\n");
                           4272 ;	genIpush
   108C 74r7B              4273 	mov	a,#__str_81
   108E C0 E0              4274 	push	acc
   1090 74s0D              4275 	mov	a,#(__str_81 >> 8)
   1092 C0 E0              4276 	push	acc
   1094 74 80              4277 	mov	a,#0x80
   1096 C0 E0              4278 	push	acc
                           4279 ;	genCall
   1098 12s00r00           4280 	lcall	_printf
   109B 15 81              4281 	dec	sp
   109D 15 81              4282 	dec	sp
   109F 15 81              4283 	dec	sp
                           4284 ;	main4.c:623: expander_functions();       // go to expander functions
                           4285 ;	genCall
   10A1 12s31r26           4286 	lcall	_expander_functions
                           4287 ;	main4.c:625: break;
                           4288 ;	main4.c:626: default: printf("\n\rERROR! Invalid Input."); ;break;
                           4289 ;	Peephole 112.b	changed ljmp to sjmp
   10A4 80 15              4290 	sjmp	00106$
   10A6                    4291 00105$:
                           4292 ;	genIpush
   10A6 74rB4              4293 	mov	a,#__str_82
   10A8 C0 E0              4294 	push	acc
   10AA 74s0D              4295 	mov	a,#(__str_82 >> 8)
   10AC C0 E0              4296 	push	acc
   10AE 74 80              4297 	mov	a,#0x80
   10B0 C0 E0              4298 	push	acc
                           4299 ;	genCall
   10B2 12s00r00           4300 	lcall	_printf
   10B5 15 81              4301 	dec	sp
   10B7 15 81              4302 	dec	sp
   10B9 15 81              4303 	dec	sp
                           4304 ;	main4.c:627: }
   10BB                    4305 00106$:
                           4306 ;	main4.c:628: printf("\n\n\r ERROR! Invalid Input");
                           4307 ;	genIpush
   10BB 74rCC              4308 	mov	a,#__str_83
   10BD C0 E0              4309 	push	acc
   10BF 74s0D              4310 	mov	a,#(__str_83 >> 8)
   10C1 C0 E0              4311 	push	acc
   10C3 74 80              4312 	mov	a,#0x80
   10C5 C0 E0              4313 	push	acc
                           4314 ;	genCall
   10C7 12s00r00           4315 	lcall	_printf
   10CA 15 81              4316 	dec	sp
   10CC 15 81              4317 	dec	sp
   10CE 15 81              4318 	dec	sp
                           4319 ;	Peephole 300	removed redundant label 00107$
   10D0 22                 4320 	ret
                           4321 ;------------------------------------------------------------
                           4322 ;Allocation info for local variables in function 'get_addr'
                           4323 ;------------------------------------------------------------
                           4324 ;i                         Allocated with name '_get_addr_i_1_1'
                           4325 ;num                       Allocated with name '_get_addr_num_1_1'
                           4326 ;exp                       Allocated with name '_get_addr_exp_1_1'
                           4327 ;c                         Allocated with name '_get_addr_c_1_1'
                           4328 ;------------------------------------------------------------
                           4329 ;	main4.c:632: int get_addr(void)      //Gets address from the user
                           4330 ;	-----------------------------------------
                           4331 ;	 function get_addr
                           4332 ;	-----------------------------------------
   10D1                    4333 _get_addr:
                           4334 ;	main4.c:634: int i=0, num=0,exp=0,c;
                           4335 ;	genAssign
   10D1 90s00r83           4336 	mov	dptr,#_get_addr_num_1_1
   10D4 E4                 4337 	clr	a
   10D5 F0                 4338 	movx	@dptr,a
   10D6 A3                 4339 	inc	dptr
   10D7 F0                 4340 	movx	@dptr,a
                           4341 ;	genAssign
   10D8 90s00r85           4342 	mov	dptr,#_get_addr_exp_1_1
   10DB E4                 4343 	clr	a
   10DC F0                 4344 	movx	@dptr,a
   10DD A3                 4345 	inc	dptr
   10DE F0                 4346 	movx	@dptr,a
                           4347 ;	main4.c:637: for(i=0;i<3;i++)    //3 digit to be input
                           4348 ;	genAssign
   10DF 90s00r81           4349 	mov	dptr,#_get_addr_i_1_1
   10E2 E4                 4350 	clr	a
   10E3 F0                 4351 	movx	@dptr,a
   10E4 A3                 4352 	inc	dptr
   10E5 F0                 4353 	movx	@dptr,a
   10E6                    4354 00178$:
                           4355 ;	genAssign
   10E6 90s00r81           4356 	mov	dptr,#_get_addr_i_1_1
   10E9 E0                 4357 	movx	a,@dptr
   10EA FA                 4358 	mov	r2,a
   10EB A3                 4359 	inc	dptr
   10EC E0                 4360 	movx	a,@dptr
   10ED FB                 4361 	mov	r3,a
                           4362 ;	genCmpLt
                           4363 ;	genCmp
   10EE C3                 4364 	clr	c
   10EF EA                 4365 	mov	a,r2
   10F0 94 03              4366 	subb	a,#0x03
   10F2 EB                 4367 	mov	a,r3
   10F3 64 80              4368 	xrl	a,#0x80
   10F5 94 80              4369 	subb	a,#0x80
                           4370 ;	genIfxJump
   10F7 40 03              4371 	jc	00238$
   10F9 02s17rB4           4372 	ljmp	00181$
   10FC                    4373 00238$:
                           4374 ;	main4.c:639: eeprom_adr[i]=getchar();
                           4375 ;	genPlus
                           4376 ;	Peephole 236.g	used r2 instead of ar2
   10FC EA                 4377 	mov	a,r2
   10FD 24r51              4378 	add	a,#_eeprom_adr
   10FF FC                 4379 	mov	r4,a
                           4380 ;	Peephole 236.g	used r3 instead of ar3
   1100 EB                 4381 	mov	a,r3
   1101 34s00              4382 	addc	a,#(_eeprom_adr >> 8)
   1103 FD                 4383 	mov	r5,a
                           4384 ;	genCall
   1104 C0 02              4385 	push	ar2
   1106 C0 03              4386 	push	ar3
   1108 C0 04              4387 	push	ar4
   110A C0 05              4388 	push	ar5
   110C 12s01r72           4389 	lcall	_getchar
   110F AE 82              4390 	mov	r6,dpl
   1111 D0 05              4391 	pop	ar5
   1113 D0 04              4392 	pop	ar4
   1115 D0 03              4393 	pop	ar3
   1117 D0 02              4394 	pop	ar2
                           4395 ;	genPointerSet
                           4396 ;     genFarPointerSet
   1119 8C 82              4397 	mov	dpl,r4
   111B 8D 83              4398 	mov	dph,r5
   111D EE                 4399 	mov	a,r6
   111E F0                 4400 	movx	@dptr,a
                           4401 ;	main4.c:640: putchar(eeprom_adr[i]);
                           4402 ;	genPlus
                           4403 ;	Peephole 236.g	used r2 instead of ar2
   111F EA                 4404 	mov	a,r2
   1120 24r51              4405 	add	a,#_eeprom_adr
   1122 F5 82              4406 	mov	dpl,a
                           4407 ;	Peephole 236.g	used r3 instead of ar3
   1124 EB                 4408 	mov	a,r3
   1125 34s00              4409 	addc	a,#(_eeprom_adr >> 8)
   1127 F5 83              4410 	mov	dph,a
                           4411 ;	genPointerGet
                           4412 ;	genFarPointerGet
   1129 E0                 4413 	movx	a,@dptr
                           4414 ;	genCall
   112A FC                 4415 	mov	r4,a
                           4416 ;	Peephole 244.c	loading dpl from a instead of r4
   112B F5 82              4417 	mov	dpl,a
   112D C0 02              4418 	push	ar2
   112F C0 03              4419 	push	ar3
   1131 12s01r60           4420 	lcall	_putchar
   1134 D0 03              4421 	pop	ar3
   1136 D0 02              4422 	pop	ar2
                           4423 ;	main4.c:642: if(isdigit(eeprom_adr[i])) // if the user inputs a digit convert it to a intiger
                           4424 ;	genPlus
                           4425 ;	Peephole 236.g	used r2 instead of ar2
   1138 EA                 4426 	mov	a,r2
   1139 24r51              4427 	add	a,#_eeprom_adr
   113B F5 82              4428 	mov	dpl,a
                           4429 ;	Peephole 236.g	used r3 instead of ar3
   113D EB                 4430 	mov	a,r3
   113E 34s00              4431 	addc	a,#(_eeprom_adr >> 8)
   1140 F5 83              4432 	mov	dph,a
                           4433 ;	genPointerGet
                           4434 ;	genFarPointerGet
   1142 E0                 4435 	movx	a,@dptr
                           4436 ;	genCall
   1143 FC                 4437 	mov	r4,a
                           4438 ;	Peephole 244.c	loading dpl from a instead of r4
   1144 F5 82              4439 	mov	dpl,a
   1146 C0 02              4440 	push	ar2
   1148 C0 03              4441 	push	ar3
   114A 12s00r00           4442 	lcall	_isdigit
   114D E5 82              4443 	mov	a,dpl
   114F D0 03              4444 	pop	ar3
   1151 D0 02              4445 	pop	ar2
                           4446 ;	genIfx
                           4447 ;	genIfxJump
                           4448 ;	Peephole 108.c	removed ljmp by inverse jump logic
   1153 60 37              4449 	jz	00102$
                           4450 ;	Peephole 300	removed redundant label 00239$
                           4451 ;	main4.c:644: num = num*16 + (eeprom_adr[i]-48);
                           4452 ;	genAssign
   1155 90s00r83           4453 	mov	dptr,#_get_addr_num_1_1
   1158 E0                 4454 	movx	a,@dptr
   1159 FC                 4455 	mov	r4,a
   115A A3                 4456 	inc	dptr
   115B E0                 4457 	movx	a,@dptr
                           4458 ;	genLeftShift
                           4459 ;	genLeftShiftLiteral
                           4460 ;	genlshTwo
   115C FD                 4461 	mov	r5,a
                           4462 ;	Peephole 105	removed redundant mov
   115D C4                 4463 	swap	a
   115E 54 F0              4464 	anl	a,#0xf0
   1160 CC                 4465 	xch	a,r4
   1161 C4                 4466 	swap	a
   1162 CC                 4467 	xch	a,r4
   1163 6C                 4468 	xrl	a,r4
   1164 CC                 4469 	xch	a,r4
   1165 54 F0              4470 	anl	a,#0xf0
   1167 CC                 4471 	xch	a,r4
   1168 6C                 4472 	xrl	a,r4
   1169 FD                 4473 	mov	r5,a
                           4474 ;	genPlus
                           4475 ;	Peephole 236.g	used r2 instead of ar2
   116A EA                 4476 	mov	a,r2
   116B 24r51              4477 	add	a,#_eeprom_adr
   116D F5 82              4478 	mov	dpl,a
                           4479 ;	Peephole 236.g	used r3 instead of ar3
   116F EB                 4480 	mov	a,r3
   1170 34s00              4481 	addc	a,#(_eeprom_adr >> 8)
   1172 F5 83              4482 	mov	dph,a
                           4483 ;	genPointerGet
                           4484 ;	genFarPointerGet
   1174 E0                 4485 	movx	a,@dptr
                           4486 ;	genCast
   1175 FA                 4487 	mov	r2,a
                           4488 ;	Peephole 105	removed redundant mov
   1176 33                 4489 	rlc	a
   1177 95 E0              4490 	subb	a,acc
   1179 FB                 4491 	mov	r3,a
                           4492 ;	genMinus
   117A EA                 4493 	mov	a,r2
   117B 24 D0              4494 	add	a,#0xd0
   117D FA                 4495 	mov	r2,a
   117E EB                 4496 	mov	a,r3
   117F 34 FF              4497 	addc	a,#0xff
   1181 FB                 4498 	mov	r3,a
                           4499 ;	genPlus
   1182 90s00r83           4500 	mov	dptr,#_get_addr_num_1_1
                           4501 ;	Peephole 236.g	used r2 instead of ar2
   1185 EA                 4502 	mov	a,r2
                           4503 ;	Peephole 236.a	used r4 instead of ar4
   1186 2C                 4504 	add	a,r4
   1187 F0                 4505 	movx	@dptr,a
                           4506 ;	Peephole 236.g	used r3 instead of ar3
   1188 EB                 4507 	mov	a,r3
                           4508 ;	Peephole 236.b	used r5 instead of ar5
   1189 3D                 4509 	addc	a,r5
   118A A3                 4510 	inc	dptr
   118B F0                 4511 	movx	@dptr,a
   118C                    4512 00102$:
                           4513 ;	main4.c:646: if(isalpha(eeprom_adr[i])) // if the user inputs a character  convert it to a intiger
                           4514 ;	genAssign
   118C 90s00r81           4515 	mov	dptr,#_get_addr_i_1_1
   118F E0                 4516 	movx	a,@dptr
   1190 FA                 4517 	mov	r2,a
   1191 A3                 4518 	inc	dptr
   1192 E0                 4519 	movx	a,@dptr
   1193 FB                 4520 	mov	r3,a
                           4521 ;	genPlus
                           4522 ;	Peephole 236.g	used r2 instead of ar2
   1194 EA                 4523 	mov	a,r2
   1195 24r51              4524 	add	a,#_eeprom_adr
   1197 F5 82              4525 	mov	dpl,a
                           4526 ;	Peephole 236.g	used r3 instead of ar3
   1199 EB                 4527 	mov	a,r3
   119A 34s00              4528 	addc	a,#(_eeprom_adr >> 8)
   119C F5 83              4529 	mov	dph,a
                           4530 ;	genPointerGet
                           4531 ;	genFarPointerGet
   119E E0                 4532 	movx	a,@dptr
                           4533 ;	genCall
   119F FC                 4534 	mov	r4,a
                           4535 ;	Peephole 244.c	loading dpl from a instead of r4
   11A0 F5 82              4536 	mov	dpl,a
   11A2 C0 02              4537 	push	ar2
   11A4 C0 03              4538 	push	ar3
   11A6 12s00r00           4539 	lcall	_isupper
   11A9 E5 82              4540 	mov	a,dpl
   11AB D0 03              4541 	pop	ar3
   11AD D0 02              4542 	pop	ar2
                           4543 ;	genIfx
                           4544 ;	genIfxJump
                           4545 ;	Peephole 108.b	removed ljmp by inverse jump logic
   11AF 70 18              4546 	jnz	00117$
                           4547 ;	Peephole 300	removed redundant label 00240$
                           4548 ;	genPlus
                           4549 ;	Peephole 236.g	used r2 instead of ar2
   11B1 EA                 4550 	mov	a,r2
   11B2 24r51              4551 	add	a,#_eeprom_adr
   11B4 F5 82              4552 	mov	dpl,a
                           4553 ;	Peephole 236.g	used r3 instead of ar3
   11B6 EB                 4554 	mov	a,r3
   11B7 34s00              4555 	addc	a,#(_eeprom_adr >> 8)
   11B9 F5 83              4556 	mov	dph,a
                           4557 ;	genPointerGet
                           4558 ;	genFarPointerGet
   11BB E0                 4559 	movx	a,@dptr
                           4560 ;	genCall
   11BC FA                 4561 	mov	r2,a
                           4562 ;	Peephole 244.c	loading dpl from a instead of r2
   11BD F5 82              4563 	mov	dpl,a
   11BF 12s00r00           4564 	lcall	_islower
   11C2 E5 82              4565 	mov	a,dpl
                           4566 ;	genIfx
                           4567 ;	genIfxJump
   11C4 70 03              4568 	jnz	00241$
   11C6 02s13r0B           4569 	ljmp	00118$
   11C9                    4570 00241$:
   11C9                    4571 00117$:
                           4572 ;	main4.c:649: switch (eeprom_adr[i])         //case statementd for A-F
                           4573 ;	genAssign
   11C9 90s00r81           4574 	mov	dptr,#_get_addr_i_1_1
   11CC E0                 4575 	movx	a,@dptr
   11CD FA                 4576 	mov	r2,a
   11CE A3                 4577 	inc	dptr
   11CF E0                 4578 	movx	a,@dptr
   11D0 FB                 4579 	mov	r3,a
                           4580 ;	genPlus
                           4581 ;	Peephole 236.g	used r2 instead of ar2
   11D1 EA                 4582 	mov	a,r2
   11D2 24r51              4583 	add	a,#_eeprom_adr
   11D4 F5 82              4584 	mov	dpl,a
                           4585 ;	Peephole 236.g	used r3 instead of ar3
   11D6 EB                 4586 	mov	a,r3
   11D7 34s00              4587 	addc	a,#(_eeprom_adr >> 8)
   11D9 F5 83              4588 	mov	dph,a
                           4589 ;	genPointerGet
                           4590 ;	genFarPointerGet
   11DB E0                 4591 	movx	a,@dptr
   11DC FA                 4592 	mov	r2,a
                           4593 ;	genCmpEq
                           4594 ;	gencjneshort
   11DD BA 41 02           4595 	cjne	r2,#0x41,00242$
                           4596 ;	Peephole 112.b	changed ljmp to sjmp
   11E0 80 41              4597 	sjmp	00104$
   11E2                    4598 00242$:
                           4599 ;	genCmpEq
                           4600 ;	gencjneshort
   11E2 BA 42 02           4601 	cjne	r2,#0x42,00243$
                           4602 ;	Peephole 112.b	changed ljmp to sjmp
   11E5 80 5F              4603 	sjmp	00106$
   11E7                    4604 00243$:
                           4605 ;	genCmpEq
                           4606 ;	gencjneshort
   11E7 BA 43 03           4607 	cjne	r2,#0x43,00244$
   11EA 02s12r69           4608 	ljmp	00108$
   11ED                    4609 00244$:
                           4610 ;	genCmpEq
                           4611 ;	gencjneshort
   11ED BA 44 03           4612 	cjne	r2,#0x44,00245$
   11F0 02s12r8C           4613 	ljmp	00110$
   11F3                    4614 00245$:
                           4615 ;	genCmpEq
                           4616 ;	gencjneshort
   11F3 BA 45 03           4617 	cjne	r2,#0x45,00246$
   11F6 02s12rAE           4618 	ljmp	00112$
   11F9                    4619 00246$:
                           4620 ;	genCmpEq
                           4621 ;	gencjneshort
   11F9 BA 46 03           4622 	cjne	r2,#0x46,00247$
   11FC 02s12rD0           4623 	ljmp	00114$
   11FF                    4624 00247$:
                           4625 ;	genCmpEq
                           4626 ;	gencjneshort
   11FF BA 61 02           4627 	cjne	r2,#0x61,00248$
                           4628 ;	Peephole 112.b	changed ljmp to sjmp
   1202 80 1F              4629 	sjmp	00104$
   1204                    4630 00248$:
                           4631 ;	genCmpEq
                           4632 ;	gencjneshort
   1204 BA 62 02           4633 	cjne	r2,#0x62,00249$
                           4634 ;	Peephole 112.b	changed ljmp to sjmp
   1207 80 3D              4635 	sjmp	00106$
   1209                    4636 00249$:
                           4637 ;	genCmpEq
                           4638 ;	gencjneshort
   1209 BA 63 02           4639 	cjne	r2,#0x63,00250$
                           4640 ;	Peephole 112.b	changed ljmp to sjmp
   120C 80 5B              4641 	sjmp	00108$
   120E                    4642 00250$:
                           4643 ;	genCmpEq
                           4644 ;	gencjneshort
   120E BA 64 03           4645 	cjne	r2,#0x64,00251$
   1211 02s12r8C           4646 	ljmp	00110$
   1214                    4647 00251$:
                           4648 ;	genCmpEq
                           4649 ;	gencjneshort
   1214 BA 65 03           4650 	cjne	r2,#0x65,00252$
   1217 02s12rAE           4651 	ljmp	00112$
   121A                    4652 00252$:
                           4653 ;	genCmpEq
                           4654 ;	gencjneshort
   121A BA 66 03           4655 	cjne	r2,#0x66,00253$
   121D 02s12rD0           4656 	ljmp	00114$
   1220                    4657 00253$:
   1220 02s12rF2           4658 	ljmp	00115$
                           4659 ;	main4.c:651: case 'A': case 'a': num = num*16 + 10; break;
   1223                    4660 00104$:
                           4661 ;	genAssign
   1223 90s00r83           4662 	mov	dptr,#_get_addr_num_1_1
   1226 E0                 4663 	movx	a,@dptr
   1227 FA                 4664 	mov	r2,a
   1228 A3                 4665 	inc	dptr
   1229 E0                 4666 	movx	a,@dptr
                           4667 ;	genLeftShift
                           4668 ;	genLeftShiftLiteral
                           4669 ;	genlshTwo
   122A FB                 4670 	mov	r3,a
                           4671 ;	Peephole 105	removed redundant mov
   122B C4                 4672 	swap	a
   122C 54 F0              4673 	anl	a,#0xf0
   122E CA                 4674 	xch	a,r2
   122F C4                 4675 	swap	a
   1230 CA                 4676 	xch	a,r2
   1231 6A                 4677 	xrl	a,r2
   1232 CA                 4678 	xch	a,r2
   1233 54 F0              4679 	anl	a,#0xf0
   1235 CA                 4680 	xch	a,r2
   1236 6A                 4681 	xrl	a,r2
   1237 FB                 4682 	mov	r3,a
                           4683 ;	genPlus
   1238 90s00r83           4684 	mov	dptr,#_get_addr_num_1_1
                           4685 ;     genPlusIncr
   123B 74 0A              4686 	mov	a,#0x0A
                           4687 ;	Peephole 236.a	used r2 instead of ar2
   123D 2A                 4688 	add	a,r2
   123E F0                 4689 	movx	@dptr,a
                           4690 ;	Peephole 181	changed mov to clr
   123F E4                 4691 	clr	a
                           4692 ;	Peephole 236.b	used r3 instead of ar3
   1240 3B                 4693 	addc	a,r3
   1241 A3                 4694 	inc	dptr
   1242 F0                 4695 	movx	@dptr,a
   1243 02s13r0B           4696 	ljmp	00118$
                           4697 ;	main4.c:652: case 'B': case 'b': num = num*16 + 11; break;
   1246                    4698 00106$:
                           4699 ;	genAssign
   1246 90s00r83           4700 	mov	dptr,#_get_addr_num_1_1
   1249 E0                 4701 	movx	a,@dptr
   124A FA                 4702 	mov	r2,a
   124B A3                 4703 	inc	dptr
   124C E0                 4704 	movx	a,@dptr
                           4705 ;	genLeftShift
                           4706 ;	genLeftShiftLiteral
                           4707 ;	genlshTwo
   124D FB                 4708 	mov	r3,a
                           4709 ;	Peephole 105	removed redundant mov
   124E C4                 4710 	swap	a
   124F 54 F0              4711 	anl	a,#0xf0
   1251 CA                 4712 	xch	a,r2
   1252 C4                 4713 	swap	a
   1253 CA                 4714 	xch	a,r2
   1254 6A                 4715 	xrl	a,r2
   1255 CA                 4716 	xch	a,r2
   1256 54 F0              4717 	anl	a,#0xf0
   1258 CA                 4718 	xch	a,r2
   1259 6A                 4719 	xrl	a,r2
   125A FB                 4720 	mov	r3,a
                           4721 ;	genPlus
   125B 90s00r83           4722 	mov	dptr,#_get_addr_num_1_1
                           4723 ;     genPlusIncr
   125E 74 0B              4724 	mov	a,#0x0B
                           4725 ;	Peephole 236.a	used r2 instead of ar2
   1260 2A                 4726 	add	a,r2
   1261 F0                 4727 	movx	@dptr,a
                           4728 ;	Peephole 181	changed mov to clr
   1262 E4                 4729 	clr	a
                           4730 ;	Peephole 236.b	used r3 instead of ar3
   1263 3B                 4731 	addc	a,r3
   1264 A3                 4732 	inc	dptr
   1265 F0                 4733 	movx	@dptr,a
   1266 02s13r0B           4734 	ljmp	00118$
                           4735 ;	main4.c:653: case 'C': case 'c': num = num*16 + 12; break;
   1269                    4736 00108$:
                           4737 ;	genAssign
   1269 90s00r83           4738 	mov	dptr,#_get_addr_num_1_1
   126C E0                 4739 	movx	a,@dptr
   126D FA                 4740 	mov	r2,a
   126E A3                 4741 	inc	dptr
   126F E0                 4742 	movx	a,@dptr
                           4743 ;	genLeftShift
                           4744 ;	genLeftShiftLiteral
                           4745 ;	genlshTwo
   1270 FB                 4746 	mov	r3,a
                           4747 ;	Peephole 105	removed redundant mov
   1271 C4                 4748 	swap	a
   1272 54 F0              4749 	anl	a,#0xf0
   1274 CA                 4750 	xch	a,r2
   1275 C4                 4751 	swap	a
   1276 CA                 4752 	xch	a,r2
   1277 6A                 4753 	xrl	a,r2
   1278 CA                 4754 	xch	a,r2
   1279 54 F0              4755 	anl	a,#0xf0
   127B CA                 4756 	xch	a,r2
   127C 6A                 4757 	xrl	a,r2
   127D FB                 4758 	mov	r3,a
                           4759 ;	genPlus
   127E 90s00r83           4760 	mov	dptr,#_get_addr_num_1_1
                           4761 ;     genPlusIncr
   1281 74 0C              4762 	mov	a,#0x0C
                           4763 ;	Peephole 236.a	used r2 instead of ar2
   1283 2A                 4764 	add	a,r2
   1284 F0                 4765 	movx	@dptr,a
                           4766 ;	Peephole 181	changed mov to clr
   1285 E4                 4767 	clr	a
                           4768 ;	Peephole 236.b	used r3 instead of ar3
   1286 3B                 4769 	addc	a,r3
   1287 A3                 4770 	inc	dptr
   1288 F0                 4771 	movx	@dptr,a
   1289 02s13r0B           4772 	ljmp	00118$
                           4773 ;	main4.c:654: case 'D': case 'd': num = num*16 + 13; break;
   128C                    4774 00110$:
                           4775 ;	genAssign
   128C 90s00r83           4776 	mov	dptr,#_get_addr_num_1_1
   128F E0                 4777 	movx	a,@dptr
   1290 FA                 4778 	mov	r2,a
   1291 A3                 4779 	inc	dptr
   1292 E0                 4780 	movx	a,@dptr
                           4781 ;	genLeftShift
                           4782 ;	genLeftShiftLiteral
                           4783 ;	genlshTwo
   1293 FB                 4784 	mov	r3,a
                           4785 ;	Peephole 105	removed redundant mov
   1294 C4                 4786 	swap	a
   1295 54 F0              4787 	anl	a,#0xf0
   1297 CA                 4788 	xch	a,r2
   1298 C4                 4789 	swap	a
   1299 CA                 4790 	xch	a,r2
   129A 6A                 4791 	xrl	a,r2
   129B CA                 4792 	xch	a,r2
   129C 54 F0              4793 	anl	a,#0xf0
   129E CA                 4794 	xch	a,r2
   129F 6A                 4795 	xrl	a,r2
   12A0 FB                 4796 	mov	r3,a
                           4797 ;	genPlus
   12A1 90s00r83           4798 	mov	dptr,#_get_addr_num_1_1
                           4799 ;     genPlusIncr
   12A4 74 0D              4800 	mov	a,#0x0D
                           4801 ;	Peephole 236.a	used r2 instead of ar2
   12A6 2A                 4802 	add	a,r2
   12A7 F0                 4803 	movx	@dptr,a
                           4804 ;	Peephole 181	changed mov to clr
   12A8 E4                 4805 	clr	a
                           4806 ;	Peephole 236.b	used r3 instead of ar3
   12A9 3B                 4807 	addc	a,r3
   12AA A3                 4808 	inc	dptr
   12AB F0                 4809 	movx	@dptr,a
                           4810 ;	main4.c:655: case 'E': case 'e': num = num*16 + 14; break;
                           4811 ;	Peephole 112.b	changed ljmp to sjmp
   12AC 80 5D              4812 	sjmp	00118$
   12AE                    4813 00112$:
                           4814 ;	genAssign
   12AE 90s00r83           4815 	mov	dptr,#_get_addr_num_1_1
   12B1 E0                 4816 	movx	a,@dptr
   12B2 FA                 4817 	mov	r2,a
   12B3 A3                 4818 	inc	dptr
   12B4 E0                 4819 	movx	a,@dptr
                           4820 ;	genLeftShift
                           4821 ;	genLeftShiftLiteral
                           4822 ;	genlshTwo
   12B5 FB                 4823 	mov	r3,a
                           4824 ;	Peephole 105	removed redundant mov
   12B6 C4                 4825 	swap	a
   12B7 54 F0              4826 	anl	a,#0xf0
   12B9 CA                 4827 	xch	a,r2
   12BA C4                 4828 	swap	a
   12BB CA                 4829 	xch	a,r2
   12BC 6A                 4830 	xrl	a,r2
   12BD CA                 4831 	xch	a,r2
   12BE 54 F0              4832 	anl	a,#0xf0
   12C0 CA                 4833 	xch	a,r2
   12C1 6A                 4834 	xrl	a,r2
   12C2 FB                 4835 	mov	r3,a
                           4836 ;	genPlus
   12C3 90s00r83           4837 	mov	dptr,#_get_addr_num_1_1
                           4838 ;     genPlusIncr
   12C6 74 0E              4839 	mov	a,#0x0E
                           4840 ;	Peephole 236.a	used r2 instead of ar2
   12C8 2A                 4841 	add	a,r2
   12C9 F0                 4842 	movx	@dptr,a
                           4843 ;	Peephole 181	changed mov to clr
   12CA E4                 4844 	clr	a
                           4845 ;	Peephole 236.b	used r3 instead of ar3
   12CB 3B                 4846 	addc	a,r3
   12CC A3                 4847 	inc	dptr
   12CD F0                 4848 	movx	@dptr,a
                           4849 ;	main4.c:656: case 'F': case 'f': num = num*16 + 15; break;
                           4850 ;	Peephole 112.b	changed ljmp to sjmp
   12CE 80 3B              4851 	sjmp	00118$
   12D0                    4852 00114$:
                           4853 ;	genAssign
   12D0 90s00r83           4854 	mov	dptr,#_get_addr_num_1_1
   12D3 E0                 4855 	movx	a,@dptr
   12D4 FA                 4856 	mov	r2,a
   12D5 A3                 4857 	inc	dptr
   12D6 E0                 4858 	movx	a,@dptr
                           4859 ;	genLeftShift
                           4860 ;	genLeftShiftLiteral
                           4861 ;	genlshTwo
   12D7 FB                 4862 	mov	r3,a
                           4863 ;	Peephole 105	removed redundant mov
   12D8 C4                 4864 	swap	a
   12D9 54 F0              4865 	anl	a,#0xf0
   12DB CA                 4866 	xch	a,r2
   12DC C4                 4867 	swap	a
   12DD CA                 4868 	xch	a,r2
   12DE 6A                 4869 	xrl	a,r2
   12DF CA                 4870 	xch	a,r2
   12E0 54 F0              4871 	anl	a,#0xf0
   12E2 CA                 4872 	xch	a,r2
   12E3 6A                 4873 	xrl	a,r2
   12E4 FB                 4874 	mov	r3,a
                           4875 ;	genPlus
   12E5 90s00r83           4876 	mov	dptr,#_get_addr_num_1_1
                           4877 ;     genPlusIncr
   12E8 74 0F              4878 	mov	a,#0x0F
                           4879 ;	Peephole 236.a	used r2 instead of ar2
   12EA 2A                 4880 	add	a,r2
   12EB F0                 4881 	movx	@dptr,a
                           4882 ;	Peephole 181	changed mov to clr
   12EC E4                 4883 	clr	a
                           4884 ;	Peephole 236.b	used r3 instead of ar3
   12ED 3B                 4885 	addc	a,r3
   12EE A3                 4886 	inc	dptr
   12EF F0                 4887 	movx	@dptr,a
                           4888 ;	main4.c:657: default:printf("\n\rInvalid Input(bb)"); return -1; break;//error handling for invalid input
                           4889 ;	Peephole 112.b	changed ljmp to sjmp
   12F0 80 19              4890 	sjmp	00118$
   12F2                    4891 00115$:
                           4892 ;	genIpush
   12F2 74rE5              4893 	mov	a,#__str_84
   12F4 C0 E0              4894 	push	acc
   12F6 74s0D              4895 	mov	a,#(__str_84 >> 8)
   12F8 C0 E0              4896 	push	acc
   12FA 74 80              4897 	mov	a,#0x80
   12FC C0 E0              4898 	push	acc
                           4899 ;	genCall
   12FE 12s00r00           4900 	lcall	_printf
   1301 15 81              4901 	dec	sp
   1303 15 81              4902 	dec	sp
   1305 15 81              4903 	dec	sp
                           4904 ;	genRet
                           4905 ;	Peephole 182.b	used 16 bit load of dptr
   1307 90 FF FF           4906 	mov	dptr,#0xFFFF
                           4907 ;	Peephole 251.a	replaced ljmp to ret with ret
   130A 22                 4908 	ret
                           4909 ;	main4.c:658: }
   130B                    4910 00118$:
                           4911 ;	main4.c:661: if(eeprom_adr[i] == '\r')
                           4912 ;	genAssign
   130B 90s00r81           4913 	mov	dptr,#_get_addr_i_1_1
   130E E0                 4914 	movx	a,@dptr
   130F FA                 4915 	mov	r2,a
   1310 A3                 4916 	inc	dptr
   1311 E0                 4917 	movx	a,@dptr
   1312 FB                 4918 	mov	r3,a
                           4919 ;	genPlus
                           4920 ;	Peephole 236.g	used r2 instead of ar2
   1313 EA                 4921 	mov	a,r2
   1314 24r51              4922 	add	a,#_eeprom_adr
   1316 F5 82              4923 	mov	dpl,a
                           4924 ;	Peephole 236.g	used r3 instead of ar3
   1318 EB                 4925 	mov	a,r3
   1319 34s00              4926 	addc	a,#(_eeprom_adr >> 8)
   131B F5 83              4927 	mov	dph,a
                           4928 ;	genPointerGet
                           4929 ;	genFarPointerGet
   131D E0                 4930 	movx	a,@dptr
   131E FC                 4931 	mov	r4,a
                           4932 ;	genCmpEq
                           4933 ;	gencjneshort
   131F BC 0D 02           4934 	cjne	r4,#0x0D,00254$
   1322 80 03              4935 	sjmp	00255$
   1324                    4936 00254$:
   1324 02s17r9E           4937 	ljmp	00180$
   1327                    4938 00255$:
                           4939 ;	main4.c:663: if(i==0)
                           4940 ;	genIfx
   1327 EA                 4941 	mov	a,r2
   1328 4B                 4942 	orl	a,r3
                           4943 ;	genIfxJump
                           4944 ;	Peephole 108.b	removed ljmp by inverse jump logic
   1329 70 19              4945 	jnz	00121$
                           4946 ;	Peephole 300	removed redundant label 00256$
                           4947 ;	main4.c:665: printf("Invalid Input . Try Again");        //nothing entered by user
                           4948 ;	genIpush
   132B 74rF9              4949 	mov	a,#__str_85
   132D C0 E0              4950 	push	acc
   132F 74s0D              4951 	mov	a,#(__str_85 >> 8)
   1331 C0 E0              4952 	push	acc
   1333 74 80              4953 	mov	a,#0x80
   1335 C0 E0              4954 	push	acc
                           4955 ;	genCall
   1337 12s00r00           4956 	lcall	_printf
   133A 15 81              4957 	dec	sp
   133C 15 81              4958 	dec	sp
   133E 15 81              4959 	dec	sp
                           4960 ;	main4.c:666: return -1;                         //
                           4961 ;	genRet
                           4962 ;	Peephole 182.b	used 16 bit load of dptr
   1340 90 FF FF           4963 	mov	dptr,#0xFFFF
                           4964 ;	Peephole 251.a	replaced ljmp to ret with ret
   1343 22                 4965 	ret
   1344                    4966 00121$:
                           4967 ;	main4.c:668: if(i==1)
                           4968 ;	genCmpEq
                           4969 ;	gencjneshort
   1344 BA 01 05           4970 	cjne	r2,#0x01,00257$
   1347 BB 00 02           4971 	cjne	r3,#0x00,00257$
   134A 80 03              4972 	sjmp	00258$
   134C                    4973 00257$:
   134C 02s14rB9           4974 	ljmp	00142$
   134F                    4975 00258$:
                           4976 ;	main4.c:669: {               exp=1;
                           4977 ;	genAssign
   134F 90s00r85           4978 	mov	dptr,#_get_addr_exp_1_1
   1352 74 01              4979 	mov	a,#0x01
   1354 F0                 4980 	movx	@dptr,a
   1355 E4                 4981 	clr	a
   1356 A3                 4982 	inc	dptr
   1357 F0                 4983 	movx	@dptr,a
                           4984 ;	main4.c:670: i=0;
                           4985 ;	genAssign
   1358 90s00r81           4986 	mov	dptr,#_get_addr_i_1_1
   135B E4                 4987 	clr	a
   135C F0                 4988 	movx	@dptr,a
   135D A3                 4989 	inc	dptr
   135E F0                 4990 	movx	@dptr,a
                           4991 ;	main4.c:671: if(isdigit(eeprom_adr[i]))
                           4992 ;	genPointerGet
                           4993 ;	genFarPointerGet
   135F 90s00r51           4994 	mov	dptr,#_eeprom_adr
   1362 E0                 4995 	movx	a,@dptr
                           4996 ;	genCall
   1363 FA                 4997 	mov	r2,a
                           4998 ;	Peephole 244.c	loading dpl from a instead of r2
   1364 F5 82              4999 	mov	dpl,a
   1366 12s00r00           5000 	lcall	_isdigit
   1369 E5 82              5001 	mov	a,dpl
                           5002 ;	genIfx
                           5003 ;	genIfxJump
                           5004 ;	Peephole 108.c	removed ljmp by inverse jump logic
   136B 60 23              5005 	jz	00123$
                           5006 ;	Peephole 300	removed redundant label 00259$
                           5007 ;	main4.c:673: num = num + (eeprom_adr[i]-48)*exp;
                           5008 ;	genPointerGet
                           5009 ;	genFarPointerGet
   136D 90s00r51           5010 	mov	dptr,#_eeprom_adr
   1370 E0                 5011 	movx	a,@dptr
                           5012 ;	genCast
   1371 FA                 5013 	mov	r2,a
                           5014 ;	Peephole 105	removed redundant mov
   1372 33                 5015 	rlc	a
   1373 95 E0              5016 	subb	a,acc
   1375 FB                 5017 	mov	r3,a
                           5018 ;	genMinus
   1376 EA                 5019 	mov	a,r2
   1377 24 D0              5020 	add	a,#0xd0
   1379 FA                 5021 	mov	r2,a
   137A EB                 5022 	mov	a,r3
   137B 34 FF              5023 	addc	a,#0xff
   137D FB                 5024 	mov	r3,a
                           5025 ;	genAssign
   137E 90s00r83           5026 	mov	dptr,#_get_addr_num_1_1
   1381 E0                 5027 	movx	a,@dptr
   1382 FC                 5028 	mov	r4,a
   1383 A3                 5029 	inc	dptr
   1384 E0                 5030 	movx	a,@dptr
   1385 FD                 5031 	mov	r5,a
                           5032 ;	genPlus
   1386 90s00r83           5033 	mov	dptr,#_get_addr_num_1_1
                           5034 ;	Peephole 236.g	used r2 instead of ar2
   1389 EA                 5035 	mov	a,r2
                           5036 ;	Peephole 236.a	used r4 instead of ar4
   138A 2C                 5037 	add	a,r4
   138B F0                 5038 	movx	@dptr,a
                           5039 ;	Peephole 236.g	used r3 instead of ar3
   138C EB                 5040 	mov	a,r3
                           5041 ;	Peephole 236.b	used r5 instead of ar5
   138D 3D                 5042 	addc	a,r5
   138E A3                 5043 	inc	dptr
   138F F0                 5044 	movx	@dptr,a
   1390                    5045 00123$:
                           5046 ;	main4.c:675: if(isalpha(eeprom_adr[i]))
                           5047 ;	genPointerGet
                           5048 ;	genFarPointerGet
   1390 90s00r51           5049 	mov	dptr,#_eeprom_adr
   1393 E0                 5050 	movx	a,@dptr
                           5051 ;	genCall
   1394 FA                 5052 	mov	r2,a
                           5053 ;	Peephole 244.c	loading dpl from a instead of r2
   1395 F5 82              5054 	mov	dpl,a
   1397 12s00r00           5055 	lcall	_isupper
   139A E5 82              5056 	mov	a,dpl
                           5057 ;	genIfx
                           5058 ;	genIfxJump
                           5059 ;	Peephole 108.b	removed ljmp by inverse jump logic
   139C 70 11              5060 	jnz	00138$
                           5061 ;	Peephole 300	removed redundant label 00260$
                           5062 ;	genPointerGet
                           5063 ;	genFarPointerGet
   139E 90s00r51           5064 	mov	dptr,#_eeprom_adr
   13A1 E0                 5065 	movx	a,@dptr
                           5066 ;	genCall
   13A2 FA                 5067 	mov	r2,a
                           5068 ;	Peephole 244.c	loading dpl from a instead of r2
   13A3 F5 82              5069 	mov	dpl,a
   13A5 12s00r00           5070 	lcall	_islower
   13A8 E5 82              5071 	mov	a,dpl
                           5072 ;	genIfx
                           5073 ;	genIfxJump
   13AA 70 03              5074 	jnz	00261$
   13AC 02s14rB9           5075 	ljmp	00142$
   13AF                    5076 00261$:
   13AF                    5077 00138$:
                           5078 ;	main4.c:677: c = eeprom_adr[i];
                           5079 ;	genPointerGet
                           5080 ;	genFarPointerGet
   13AF 90s00r51           5081 	mov	dptr,#_eeprom_adr
   13B2 E0                 5082 	movx	a,@dptr
                           5083 ;	genCast
   13B3 FA                 5084 	mov	r2,a
                           5085 ;	Peephole 105	removed redundant mov
   13B4 33                 5086 	rlc	a
   13B5 95 E0              5087 	subb	a,acc
   13B7 FB                 5088 	mov	r3,a
                           5089 ;	main4.c:678: switch (c)
                           5090 ;	genCmpEq
                           5091 ;	gencjneshort
   13B8 BA 41 05           5092 	cjne	r2,#0x41,00262$
   13BB BB 00 02           5093 	cjne	r3,#0x00,00262$
                           5094 ;	Peephole 112.b	changed ljmp to sjmp
   13BE 80 60              5095 	sjmp	00125$
   13C0                    5096 00262$:
                           5097 ;	genCmpEq
                           5098 ;	gencjneshort
   13C0 BA 42 05           5099 	cjne	r2,#0x42,00263$
   13C3 BB 00 02           5100 	cjne	r3,#0x00,00263$
                           5101 ;	Peephole 112.b	changed ljmp to sjmp
   13C6 80 6E              5102 	sjmp	00127$
   13C8                    5103 00263$:
                           5104 ;	genCmpEq
                           5105 ;	gencjneshort
   13C8 BA 43 06           5106 	cjne	r2,#0x43,00264$
   13CB BB 00 03           5107 	cjne	r3,#0x00,00264$
   13CE 02s14r4C           5108 	ljmp	00129$
   13D1                    5109 00264$:
                           5110 ;	genCmpEq
                           5111 ;	gencjneshort
   13D1 BA 44 06           5112 	cjne	r2,#0x44,00265$
   13D4 BB 00 03           5113 	cjne	r3,#0x00,00265$
   13D7 02s14r61           5114 	ljmp	00131$
   13DA                    5115 00265$:
                           5116 ;	genCmpEq
                           5117 ;	gencjneshort
   13DA BA 45 06           5118 	cjne	r2,#0x45,00266$
   13DD BB 00 03           5119 	cjne	r3,#0x00,00266$
   13E0 02s14r76           5120 	ljmp	00133$
   13E3                    5121 00266$:
                           5122 ;	genCmpEq
                           5123 ;	gencjneshort
   13E3 BA 46 06           5124 	cjne	r2,#0x46,00267$
   13E6 BB 00 03           5125 	cjne	r3,#0x00,00267$
   13E9 02s14r8B           5126 	ljmp	00135$
   13EC                    5127 00267$:
                           5128 ;	genCmpEq
                           5129 ;	gencjneshort
   13EC BA 61 05           5130 	cjne	r2,#0x61,00268$
   13EF BB 00 02           5131 	cjne	r3,#0x00,00268$
                           5132 ;	Peephole 112.b	changed ljmp to sjmp
   13F2 80 2C              5133 	sjmp	00125$
   13F4                    5134 00268$:
                           5135 ;	genCmpEq
                           5136 ;	gencjneshort
   13F4 BA 62 05           5137 	cjne	r2,#0x62,00269$
   13F7 BB 00 02           5138 	cjne	r3,#0x00,00269$
                           5139 ;	Peephole 112.b	changed ljmp to sjmp
   13FA 80 3A              5140 	sjmp	00127$
   13FC                    5141 00269$:
                           5142 ;	genCmpEq
                           5143 ;	gencjneshort
   13FC BA 63 05           5144 	cjne	r2,#0x63,00270$
   13FF BB 00 02           5145 	cjne	r3,#0x00,00270$
                           5146 ;	Peephole 112.b	changed ljmp to sjmp
   1402 80 48              5147 	sjmp	00129$
   1404                    5148 00270$:
                           5149 ;	genCmpEq
                           5150 ;	gencjneshort
   1404 BA 64 05           5151 	cjne	r2,#0x64,00271$
   1407 BB 00 02           5152 	cjne	r3,#0x00,00271$
                           5153 ;	Peephole 112.b	changed ljmp to sjmp
   140A 80 55              5154 	sjmp	00131$
   140C                    5155 00271$:
                           5156 ;	genCmpEq
                           5157 ;	gencjneshort
   140C BA 65 05           5158 	cjne	r2,#0x65,00272$
   140F BB 00 02           5159 	cjne	r3,#0x00,00272$
                           5160 ;	Peephole 112.b	changed ljmp to sjmp
   1412 80 62              5161 	sjmp	00133$
   1414                    5162 00272$:
                           5163 ;	genCmpEq
                           5164 ;	gencjneshort
   1414 BA 66 06           5165 	cjne	r2,#0x66,00273$
   1417 BB 00 03           5166 	cjne	r3,#0x00,00273$
   141A 02s14r8B           5167 	ljmp	00135$
   141D                    5168 00273$:
   141D 02s14rA0           5169 	ljmp	00136$
                           5170 ;	main4.c:680: case 'A': case 'a': num = num + exp*10; break;
   1420                    5171 00125$:
                           5172 ;	genAssign
   1420 90s00r83           5173 	mov	dptr,#_get_addr_num_1_1
   1423 E0                 5174 	movx	a,@dptr
   1424 FA                 5175 	mov	r2,a
   1425 A3                 5176 	inc	dptr
   1426 E0                 5177 	movx	a,@dptr
   1427 FB                 5178 	mov	r3,a
                           5179 ;	genPlus
   1428 90s00r83           5180 	mov	dptr,#_get_addr_num_1_1
                           5181 ;     genPlusIncr
   142B 74 0A              5182 	mov	a,#0x0A
                           5183 ;	Peephole 236.a	used r2 instead of ar2
   142D 2A                 5184 	add	a,r2
   142E F0                 5185 	movx	@dptr,a
                           5186 ;	Peephole 181	changed mov to clr
   142F E4                 5187 	clr	a
                           5188 ;	Peephole 236.b	used r3 instead of ar3
   1430 3B                 5189 	addc	a,r3
   1431 A3                 5190 	inc	dptr
   1432 F0                 5191 	movx	@dptr,a
   1433 02s14rB9           5192 	ljmp	00142$
                           5193 ;	main4.c:681: case 'B': case 'b': num = num + exp*11; break;
   1436                    5194 00127$:
                           5195 ;	genAssign
   1436 90s00r83           5196 	mov	dptr,#_get_addr_num_1_1
   1439 E0                 5197 	movx	a,@dptr
   143A FA                 5198 	mov	r2,a
   143B A3                 5199 	inc	dptr
   143C E0                 5200 	movx	a,@dptr
   143D FB                 5201 	mov	r3,a
                           5202 ;	genPlus
   143E 90s00r83           5203 	mov	dptr,#_get_addr_num_1_1
                           5204 ;     genPlusIncr
   1441 74 0B              5205 	mov	a,#0x0B
                           5206 ;	Peephole 236.a	used r2 instead of ar2
   1443 2A                 5207 	add	a,r2
   1444 F0                 5208 	movx	@dptr,a
                           5209 ;	Peephole 181	changed mov to clr
   1445 E4                 5210 	clr	a
                           5211 ;	Peephole 236.b	used r3 instead of ar3
   1446 3B                 5212 	addc	a,r3
   1447 A3                 5213 	inc	dptr
   1448 F0                 5214 	movx	@dptr,a
   1449 02s14rB9           5215 	ljmp	00142$
                           5216 ;	main4.c:682: case 'C': case 'c': num = num + exp*12; break;
   144C                    5217 00129$:
                           5218 ;	genAssign
   144C 90s00r83           5219 	mov	dptr,#_get_addr_num_1_1
   144F E0                 5220 	movx	a,@dptr
   1450 FA                 5221 	mov	r2,a
   1451 A3                 5222 	inc	dptr
   1452 E0                 5223 	movx	a,@dptr
   1453 FB                 5224 	mov	r3,a
                           5225 ;	genPlus
   1454 90s00r83           5226 	mov	dptr,#_get_addr_num_1_1
                           5227 ;     genPlusIncr
   1457 74 0C              5228 	mov	a,#0x0C
                           5229 ;	Peephole 236.a	used r2 instead of ar2
   1459 2A                 5230 	add	a,r2
   145A F0                 5231 	movx	@dptr,a
                           5232 ;	Peephole 181	changed mov to clr
   145B E4                 5233 	clr	a
                           5234 ;	Peephole 236.b	used r3 instead of ar3
   145C 3B                 5235 	addc	a,r3
   145D A3                 5236 	inc	dptr
   145E F0                 5237 	movx	@dptr,a
                           5238 ;	main4.c:683: case 'D': case 'd': num = num + exp*13; break;
                           5239 ;	Peephole 112.b	changed ljmp to sjmp
   145F 80 58              5240 	sjmp	00142$
   1461                    5241 00131$:
                           5242 ;	genAssign
   1461 90s00r83           5243 	mov	dptr,#_get_addr_num_1_1
   1464 E0                 5244 	movx	a,@dptr
   1465 FA                 5245 	mov	r2,a
   1466 A3                 5246 	inc	dptr
   1467 E0                 5247 	movx	a,@dptr
   1468 FB                 5248 	mov	r3,a
                           5249 ;	genPlus
   1469 90s00r83           5250 	mov	dptr,#_get_addr_num_1_1
                           5251 ;     genPlusIncr
   146C 74 0D              5252 	mov	a,#0x0D
                           5253 ;	Peephole 236.a	used r2 instead of ar2
   146E 2A                 5254 	add	a,r2
   146F F0                 5255 	movx	@dptr,a
                           5256 ;	Peephole 181	changed mov to clr
   1470 E4                 5257 	clr	a
                           5258 ;	Peephole 236.b	used r3 instead of ar3
   1471 3B                 5259 	addc	a,r3
   1472 A3                 5260 	inc	dptr
   1473 F0                 5261 	movx	@dptr,a
                           5262 ;	main4.c:684: case 'E': case 'e': num = num + exp*14; break;
                           5263 ;	Peephole 112.b	changed ljmp to sjmp
   1474 80 43              5264 	sjmp	00142$
   1476                    5265 00133$:
                           5266 ;	genAssign
   1476 90s00r83           5267 	mov	dptr,#_get_addr_num_1_1
   1479 E0                 5268 	movx	a,@dptr
   147A FA                 5269 	mov	r2,a
   147B A3                 5270 	inc	dptr
   147C E0                 5271 	movx	a,@dptr
   147D FB                 5272 	mov	r3,a
                           5273 ;	genPlus
   147E 90s00r83           5274 	mov	dptr,#_get_addr_num_1_1
                           5275 ;     genPlusIncr
   1481 74 0E              5276 	mov	a,#0x0E
                           5277 ;	Peephole 236.a	used r2 instead of ar2
   1483 2A                 5278 	add	a,r2
   1484 F0                 5279 	movx	@dptr,a
                           5280 ;	Peephole 181	changed mov to clr
   1485 E4                 5281 	clr	a
                           5282 ;	Peephole 236.b	used r3 instead of ar3
   1486 3B                 5283 	addc	a,r3
   1487 A3                 5284 	inc	dptr
   1488 F0                 5285 	movx	@dptr,a
                           5286 ;	main4.c:685: case 'F': case 'f': num = num + exp*15; break;
                           5287 ;	Peephole 112.b	changed ljmp to sjmp
   1489 80 2E              5288 	sjmp	00142$
   148B                    5289 00135$:
                           5290 ;	genAssign
   148B 90s00r83           5291 	mov	dptr,#_get_addr_num_1_1
   148E E0                 5292 	movx	a,@dptr
   148F FA                 5293 	mov	r2,a
   1490 A3                 5294 	inc	dptr
   1491 E0                 5295 	movx	a,@dptr
   1492 FB                 5296 	mov	r3,a
                           5297 ;	genPlus
   1493 90s00r83           5298 	mov	dptr,#_get_addr_num_1_1
                           5299 ;     genPlusIncr
   1496 74 0F              5300 	mov	a,#0x0F
                           5301 ;	Peephole 236.a	used r2 instead of ar2
   1498 2A                 5302 	add	a,r2
   1499 F0                 5303 	movx	@dptr,a
                           5304 ;	Peephole 181	changed mov to clr
   149A E4                 5305 	clr	a
                           5306 ;	Peephole 236.b	used r3 instead of ar3
   149B 3B                 5307 	addc	a,r3
   149C A3                 5308 	inc	dptr
   149D F0                 5309 	movx	@dptr,a
                           5310 ;	main4.c:686: default:printf("\n\rInvalid Input");  return -1; break;
                           5311 ;	Peephole 112.b	changed ljmp to sjmp
   149E 80 19              5312 	sjmp	00142$
   14A0                    5313 00136$:
                           5314 ;	genIpush
   14A0 74rC8              5315 	mov	a,#__str_9
   14A2 C0 E0              5316 	push	acc
   14A4 74s01              5317 	mov	a,#(__str_9 >> 8)
   14A6 C0 E0              5318 	push	acc
   14A8 74 80              5319 	mov	a,#0x80
   14AA C0 E0              5320 	push	acc
                           5321 ;	genCall
   14AC 12s00r00           5322 	lcall	_printf
   14AF 15 81              5323 	dec	sp
   14B1 15 81              5324 	dec	sp
   14B3 15 81              5325 	dec	sp
                           5326 ;	genRet
                           5327 ;	Peephole 182.b	used 16 bit load of dptr
   14B5 90 FF FF           5328 	mov	dptr,#0xFFFF
                           5329 ;	Peephole 251.a	replaced ljmp to ret with ret
   14B8 22                 5330 	ret
                           5331 ;	main4.c:687: }
   14B9                    5332 00142$:
                           5333 ;	main4.c:691: if(i==2)    //if two characters are entered and then return ke is pressed
                           5334 ;	genAssign
   14B9 90s00r81           5335 	mov	dptr,#_get_addr_i_1_1
   14BC E0                 5336 	movx	a,@dptr
   14BD FA                 5337 	mov	r2,a
   14BE A3                 5338 	inc	dptr
   14BF E0                 5339 	movx	a,@dptr
   14C0 FB                 5340 	mov	r3,a
                           5341 ;	genCmpEq
                           5342 ;	gencjneshort
   14C1 BA 02 05           5343 	cjne	r2,#0x02,00274$
   14C4 BB 00 02           5344 	cjne	r3,#0x00,00274$
   14C7 80 03              5345 	sjmp	00275$
   14C9                    5346 00274$:
   14C9 02s17r9E           5347 	ljmp	00180$
   14CC                    5348 00275$:
                           5349 ;	main4.c:694: for(i=0;i<2;i++)
                           5350 ;	genAssign
   14CC 7A 00              5351 	mov	r2,#0x00
   14CE 7B 00              5352 	mov	r3,#0x00
   14D0                    5353 00174$:
                           5354 ;	genCmpLt
                           5355 ;	genCmp
   14D0 C3                 5356 	clr	c
   14D1 EA                 5357 	mov	a,r2
   14D2 94 02              5358 	subb	a,#0x02
   14D4 EB                 5359 	mov	a,r3
   14D5 64 80              5360 	xrl	a,#0x80
   14D7 94 80              5361 	subb	a,#0x80
                           5362 ;	genIfxJump
   14D9 40 03              5363 	jc	00276$
   14DB 02s17r96           5364 	ljmp	00237$
   14DE                    5365 00276$:
                           5366 ;	main4.c:696: if(i==0) exp=16;
                           5367 ;	genIfx
   14DE EA                 5368 	mov	a,r2
   14DF 4B                 5369 	orl	a,r3
                           5370 ;	genIfxJump
                           5371 ;	Peephole 108.b	removed ljmp by inverse jump logic
   14E0 70 09              5372 	jnz	00144$
                           5373 ;	Peephole 300	removed redundant label 00277$
                           5374 ;	genAssign
   14E2 90s00r85           5375 	mov	dptr,#_get_addr_exp_1_1
   14E5 74 10              5376 	mov	a,#0x10
   14E7 F0                 5377 	movx	@dptr,a
   14E8 E4                 5378 	clr	a
   14E9 A3                 5379 	inc	dptr
   14EA F0                 5380 	movx	@dptr,a
   14EB                    5381 00144$:
                           5382 ;	main4.c:697: if(i==1) exp=1;
                           5383 ;	genCmpEq
                           5384 ;	gencjneshort
                           5385 ;	Peephole 112.b	changed ljmp to sjmp
                           5386 ;	Peephole 198.a	optimized misc jump sequence
   14EB BA 01 0C           5387 	cjne	r2,#0x01,00146$
   14EE BB 00 09           5388 	cjne	r3,#0x00,00146$
                           5389 ;	Peephole 200.b	removed redundant sjmp
                           5390 ;	Peephole 300	removed redundant label 00278$
                           5391 ;	Peephole 300	removed redundant label 00279$
                           5392 ;	genAssign
   14F1 90s00r85           5393 	mov	dptr,#_get_addr_exp_1_1
   14F4 74 01              5394 	mov	a,#0x01
   14F6 F0                 5395 	movx	@dptr,a
   14F7 E4                 5396 	clr	a
   14F8 A3                 5397 	inc	dptr
   14F9 F0                 5398 	movx	@dptr,a
   14FA                    5399 00146$:
                           5400 ;	main4.c:698: if(isdigit(eeprom_adr[i]))
                           5401 ;	genPlus
                           5402 ;	Peephole 236.g	used r2 instead of ar2
   14FA EA                 5403 	mov	a,r2
   14FB 24r51              5404 	add	a,#_eeprom_adr
   14FD F5 82              5405 	mov	dpl,a
                           5406 ;	Peephole 236.g	used r3 instead of ar3
   14FF EB                 5407 	mov	a,r3
   1500 34s00              5408 	addc	a,#(_eeprom_adr >> 8)
   1502 F5 83              5409 	mov	dph,a
                           5410 ;	genPointerGet
                           5411 ;	genFarPointerGet
   1504 E0                 5412 	movx	a,@dptr
                           5413 ;	genCall
   1505 FC                 5414 	mov	r4,a
                           5415 ;	Peephole 244.c	loading dpl from a instead of r4
   1506 F5 82              5416 	mov	dpl,a
   1508 C0 02              5417 	push	ar2
   150A C0 03              5418 	push	ar3
   150C 12s00r00           5419 	lcall	_isdigit
   150F E5 82              5420 	mov	a,dpl
   1511 D0 03              5421 	pop	ar3
   1513 D0 02              5422 	pop	ar2
                           5423 ;	genIfx
                           5424 ;	genIfxJump
                           5425 ;	Peephole 108.c	removed ljmp by inverse jump logic
   1515 60 4D              5426 	jz	00148$
                           5427 ;	Peephole 300	removed redundant label 00280$
                           5428 ;	main4.c:700: num = num + (eeprom_adr[i]-48)*exp;
                           5429 ;	genPlus
                           5430 ;	Peephole 236.g	used r2 instead of ar2
   1517 EA                 5431 	mov	a,r2
   1518 24r51              5432 	add	a,#_eeprom_adr
   151A F5 82              5433 	mov	dpl,a
                           5434 ;	Peephole 236.g	used r3 instead of ar3
   151C EB                 5435 	mov	a,r3
   151D 34s00              5436 	addc	a,#(_eeprom_adr >> 8)
   151F F5 83              5437 	mov	dph,a
                           5438 ;	genPointerGet
                           5439 ;	genFarPointerGet
   1521 E0                 5440 	movx	a,@dptr
                           5441 ;	genCast
   1522 FC                 5442 	mov	r4,a
                           5443 ;	Peephole 105	removed redundant mov
   1523 33                 5444 	rlc	a
   1524 95 E0              5445 	subb	a,acc
   1526 FD                 5446 	mov	r5,a
                           5447 ;	genMinus
   1527 EC                 5448 	mov	a,r4
   1528 24 D0              5449 	add	a,#0xd0
   152A FC                 5450 	mov	r4,a
   152B ED                 5451 	mov	a,r5
   152C 34 FF              5452 	addc	a,#0xff
   152E FD                 5453 	mov	r5,a
                           5454 ;	genAssign
   152F 90s00r85           5455 	mov	dptr,#_get_addr_exp_1_1
   1532 E0                 5456 	movx	a,@dptr
   1533 FE                 5457 	mov	r6,a
   1534 A3                 5458 	inc	dptr
   1535 E0                 5459 	movx	a,@dptr
   1536 FF                 5460 	mov	r7,a
                           5461 ;	genAssign
   1537 90s00r00           5462 	mov	dptr,#__mulint_PARM_2
   153A EE                 5463 	mov	a,r6
   153B F0                 5464 	movx	@dptr,a
   153C A3                 5465 	inc	dptr
   153D EF                 5466 	mov	a,r7
   153E F0                 5467 	movx	@dptr,a
                           5468 ;	genCall
   153F 8C 82              5469 	mov	dpl,r4
   1541 8D 83              5470 	mov	dph,r5
   1543 C0 02              5471 	push	ar2
   1545 C0 03              5472 	push	ar3
   1547 12s00r00           5473 	lcall	__mulint
   154A AC 82              5474 	mov	r4,dpl
   154C AD 83              5475 	mov	r5,dph
   154E D0 03              5476 	pop	ar3
   1550 D0 02              5477 	pop	ar2
                           5478 ;	genAssign
   1552 90s00r83           5479 	mov	dptr,#_get_addr_num_1_1
   1555 E0                 5480 	movx	a,@dptr
   1556 FE                 5481 	mov	r6,a
   1557 A3                 5482 	inc	dptr
   1558 E0                 5483 	movx	a,@dptr
   1559 FF                 5484 	mov	r7,a
                           5485 ;	genPlus
   155A 90s00r83           5486 	mov	dptr,#_get_addr_num_1_1
                           5487 ;	Peephole 236.g	used r4 instead of ar4
   155D EC                 5488 	mov	a,r4
                           5489 ;	Peephole 236.a	used r6 instead of ar6
   155E 2E                 5490 	add	a,r6
   155F F0                 5491 	movx	@dptr,a
                           5492 ;	Peephole 236.g	used r5 instead of ar5
   1560 ED                 5493 	mov	a,r5
                           5494 ;	Peephole 236.b	used r7 instead of ar7
   1561 3F                 5495 	addc	a,r7
   1562 A3                 5496 	inc	dptr
   1563 F0                 5497 	movx	@dptr,a
   1564                    5498 00148$:
                           5499 ;	main4.c:702: if(isalpha(eeprom_adr[i]))
                           5500 ;	genPlus
                           5501 ;	Peephole 236.g	used r2 instead of ar2
   1564 EA                 5502 	mov	a,r2
   1565 24r51              5503 	add	a,#_eeprom_adr
   1567 F5 82              5504 	mov	dpl,a
                           5505 ;	Peephole 236.g	used r3 instead of ar3
   1569 EB                 5506 	mov	a,r3
   156A 34s00              5507 	addc	a,#(_eeprom_adr >> 8)
   156C F5 83              5508 	mov	dph,a
                           5509 ;	genPointerGet
                           5510 ;	genFarPointerGet
   156E E0                 5511 	movx	a,@dptr
                           5512 ;	genCall
   156F FC                 5513 	mov	r4,a
                           5514 ;	Peephole 244.c	loading dpl from a instead of r4
   1570 F5 82              5515 	mov	dpl,a
   1572 C0 02              5516 	push	ar2
   1574 C0 03              5517 	push	ar3
   1576 12s00r00           5518 	lcall	_isupper
   1579 E5 82              5519 	mov	a,dpl
   157B D0 03              5520 	pop	ar3
   157D D0 02              5521 	pop	ar2
                           5522 ;	genIfx
                           5523 ;	genIfxJump
                           5524 ;	Peephole 108.b	removed ljmp by inverse jump logic
   157F 70 20              5525 	jnz	00163$
                           5526 ;	Peephole 300	removed redundant label 00281$
                           5527 ;	genPlus
                           5528 ;	Peephole 236.g	used r2 instead of ar2
   1581 EA                 5529 	mov	a,r2
   1582 24r51              5530 	add	a,#_eeprom_adr
   1584 F5 82              5531 	mov	dpl,a
                           5532 ;	Peephole 236.g	used r3 instead of ar3
   1586 EB                 5533 	mov	a,r3
   1587 34s00              5534 	addc	a,#(_eeprom_adr >> 8)
   1589 F5 83              5535 	mov	dph,a
                           5536 ;	genPointerGet
                           5537 ;	genFarPointerGet
   158B E0                 5538 	movx	a,@dptr
                           5539 ;	genCall
   158C FC                 5540 	mov	r4,a
                           5541 ;	Peephole 244.c	loading dpl from a instead of r4
   158D F5 82              5542 	mov	dpl,a
   158F C0 02              5543 	push	ar2
   1591 C0 03              5544 	push	ar3
   1593 12s00r00           5545 	lcall	_islower
   1596 E5 82              5546 	mov	a,dpl
   1598 D0 03              5547 	pop	ar3
   159A D0 02              5548 	pop	ar2
                           5549 ;	genIfx
                           5550 ;	genIfxJump
   159C 70 03              5551 	jnz	00282$
   159E 02s17r8E           5552 	ljmp	00176$
   15A1                    5553 00282$:
   15A1                    5554 00163$:
                           5555 ;	main4.c:704: c = eeprom_adr[i];
                           5556 ;	genPlus
                           5557 ;	Peephole 236.g	used r2 instead of ar2
   15A1 EA                 5558 	mov	a,r2
   15A2 24r51              5559 	add	a,#_eeprom_adr
   15A4 F5 82              5560 	mov	dpl,a
                           5561 ;	Peephole 236.g	used r3 instead of ar3
   15A6 EB                 5562 	mov	a,r3
   15A7 34s00              5563 	addc	a,#(_eeprom_adr >> 8)
   15A9 F5 83              5564 	mov	dph,a
                           5565 ;	genPointerGet
                           5566 ;	genFarPointerGet
   15AB E0                 5567 	movx	a,@dptr
                           5568 ;	genCast
   15AC FC                 5569 	mov	r4,a
                           5570 ;	Peephole 105	removed redundant mov
   15AD 33                 5571 	rlc	a
   15AE 95 E0              5572 	subb	a,acc
   15B0 FD                 5573 	mov	r5,a
                           5574 ;	main4.c:705: switch (c)
                           5575 ;	genCmpEq
                           5576 ;	gencjneshort
   15B1 BC 41 05           5577 	cjne	r4,#0x41,00283$
   15B4 BD 00 02           5578 	cjne	r5,#0x00,00283$
                           5579 ;	Peephole 112.b	changed ljmp to sjmp
   15B7 80 64              5580 	sjmp	00150$
   15B9                    5581 00283$:
                           5582 ;	genCmpEq
                           5583 ;	gencjneshort
   15B9 BC 42 06           5584 	cjne	r4,#0x42,00284$
   15BC BD 00 03           5585 	cjne	r5,#0x00,00284$
   15BF 02s16r56           5586 	ljmp	00152$
   15C2                    5587 00284$:
                           5588 ;	genCmpEq
                           5589 ;	gencjneshort
   15C2 BC 43 06           5590 	cjne	r4,#0x43,00285$
   15C5 BD 00 03           5591 	cjne	r5,#0x00,00285$
   15C8 02s16r8F           5592 	ljmp	00154$
   15CB                    5593 00285$:
                           5594 ;	genCmpEq
                           5595 ;	gencjneshort
   15CB BC 44 06           5596 	cjne	r4,#0x44,00286$
   15CE BD 00 03           5597 	cjne	r5,#0x00,00286$
   15D1 02s16rC8           5598 	ljmp	00156$
   15D4                    5599 00286$:
                           5600 ;	genCmpEq
                           5601 ;	gencjneshort
   15D4 BC 45 06           5602 	cjne	r4,#0x45,00287$
   15D7 BD 00 03           5603 	cjne	r5,#0x00,00287$
   15DA 02s17r01           5604 	ljmp	00158$
   15DD                    5605 00287$:
                           5606 ;	genCmpEq
                           5607 ;	gencjneshort
   15DD BC 46 06           5608 	cjne	r4,#0x46,00288$
   15E0 BD 00 03           5609 	cjne	r5,#0x00,00288$
   15E3 02s17r39           5610 	ljmp	00160$
   15E6                    5611 00288$:
                           5612 ;	genCmpEq
                           5613 ;	gencjneshort
   15E6 BC 61 05           5614 	cjne	r4,#0x61,00289$
   15E9 BD 00 02           5615 	cjne	r5,#0x00,00289$
                           5616 ;	Peephole 112.b	changed ljmp to sjmp
   15EC 80 2F              5617 	sjmp	00150$
   15EE                    5618 00289$:
                           5619 ;	genCmpEq
                           5620 ;	gencjneshort
   15EE BC 62 05           5621 	cjne	r4,#0x62,00290$
   15F1 BD 00 02           5622 	cjne	r5,#0x00,00290$
                           5623 ;	Peephole 112.b	changed ljmp to sjmp
   15F4 80 60              5624 	sjmp	00152$
   15F6                    5625 00290$:
                           5626 ;	genCmpEq
                           5627 ;	gencjneshort
   15F6 BC 63 06           5628 	cjne	r4,#0x63,00291$
   15F9 BD 00 03           5629 	cjne	r5,#0x00,00291$
   15FC 02s16r8F           5630 	ljmp	00154$
   15FF                    5631 00291$:
                           5632 ;	genCmpEq
                           5633 ;	gencjneshort
   15FF BC 64 06           5634 	cjne	r4,#0x64,00292$
   1602 BD 00 03           5635 	cjne	r5,#0x00,00292$
   1605 02s16rC8           5636 	ljmp	00156$
   1608                    5637 00292$:
                           5638 ;	genCmpEq
                           5639 ;	gencjneshort
   1608 BC 65 06           5640 	cjne	r4,#0x65,00293$
   160B BD 00 03           5641 	cjne	r5,#0x00,00293$
   160E 02s17r01           5642 	ljmp	00158$
   1611                    5643 00293$:
                           5644 ;	genCmpEq
                           5645 ;	gencjneshort
   1611 BC 66 06           5646 	cjne	r4,#0x66,00294$
   1614 BD 00 03           5647 	cjne	r5,#0x00,00294$
   1617 02s17r39           5648 	ljmp	00160$
   161A                    5649 00294$:
   161A 02s17r71           5650 	ljmp	00161$
                           5651 ;	main4.c:707: case 'A': case 'a': num = num + exp*10; break;
   161D                    5652 00150$:
                           5653 ;	genAssign
   161D 90s00r85           5654 	mov	dptr,#_get_addr_exp_1_1
   1620 E0                 5655 	movx	a,@dptr
   1621 FC                 5656 	mov	r4,a
   1622 A3                 5657 	inc	dptr
   1623 E0                 5658 	movx	a,@dptr
   1624 FD                 5659 	mov	r5,a
                           5660 ;	genAssign
   1625 90s00r00           5661 	mov	dptr,#__mulint_PARM_2
   1628 74 0A              5662 	mov	a,#0x0A
   162A F0                 5663 	movx	@dptr,a
   162B E4                 5664 	clr	a
   162C A3                 5665 	inc	dptr
   162D F0                 5666 	movx	@dptr,a
                           5667 ;	genCall
   162E 8C 82              5668 	mov	dpl,r4
   1630 8D 83              5669 	mov	dph,r5
   1632 C0 02              5670 	push	ar2
   1634 C0 03              5671 	push	ar3
   1636 12s00r00           5672 	lcall	__mulint
   1639 AC 82              5673 	mov	r4,dpl
   163B AD 83              5674 	mov	r5,dph
   163D D0 03              5675 	pop	ar3
   163F D0 02              5676 	pop	ar2
                           5677 ;	genAssign
   1641 90s00r83           5678 	mov	dptr,#_get_addr_num_1_1
   1644 E0                 5679 	movx	a,@dptr
   1645 FE                 5680 	mov	r6,a
   1646 A3                 5681 	inc	dptr
   1647 E0                 5682 	movx	a,@dptr
   1648 FF                 5683 	mov	r7,a
                           5684 ;	genPlus
   1649 90s00r83           5685 	mov	dptr,#_get_addr_num_1_1
                           5686 ;	Peephole 236.g	used r4 instead of ar4
   164C EC                 5687 	mov	a,r4
                           5688 ;	Peephole 236.a	used r6 instead of ar6
   164D 2E                 5689 	add	a,r6
   164E F0                 5690 	movx	@dptr,a
                           5691 ;	Peephole 236.g	used r5 instead of ar5
   164F ED                 5692 	mov	a,r5
                           5693 ;	Peephole 236.b	used r7 instead of ar7
   1650 3F                 5694 	addc	a,r7
   1651 A3                 5695 	inc	dptr
   1652 F0                 5696 	movx	@dptr,a
   1653 02s17r8E           5697 	ljmp	00176$
                           5698 ;	main4.c:708: case 'B': case 'b': num = num + exp*11; break;
   1656                    5699 00152$:
                           5700 ;	genAssign
   1656 90s00r85           5701 	mov	dptr,#_get_addr_exp_1_1
   1659 E0                 5702 	movx	a,@dptr
   165A FC                 5703 	mov	r4,a
   165B A3                 5704 	inc	dptr
   165C E0                 5705 	movx	a,@dptr
   165D FD                 5706 	mov	r5,a
                           5707 ;	genAssign
   165E 90s00r00           5708 	mov	dptr,#__mulint_PARM_2
   1661 74 0B              5709 	mov	a,#0x0B
   1663 F0                 5710 	movx	@dptr,a
   1664 E4                 5711 	clr	a
   1665 A3                 5712 	inc	dptr
   1666 F0                 5713 	movx	@dptr,a
                           5714 ;	genCall
   1667 8C 82              5715 	mov	dpl,r4
   1669 8D 83              5716 	mov	dph,r5
   166B C0 02              5717 	push	ar2
   166D C0 03              5718 	push	ar3
   166F 12s00r00           5719 	lcall	__mulint
   1672 AC 82              5720 	mov	r4,dpl
   1674 AD 83              5721 	mov	r5,dph
   1676 D0 03              5722 	pop	ar3
   1678 D0 02              5723 	pop	ar2
                           5724 ;	genAssign
   167A 90s00r83           5725 	mov	dptr,#_get_addr_num_1_1
   167D E0                 5726 	movx	a,@dptr
   167E FE                 5727 	mov	r6,a
   167F A3                 5728 	inc	dptr
   1680 E0                 5729 	movx	a,@dptr
   1681 FF                 5730 	mov	r7,a
                           5731 ;	genPlus
   1682 90s00r83           5732 	mov	dptr,#_get_addr_num_1_1
                           5733 ;	Peephole 236.g	used r4 instead of ar4
   1685 EC                 5734 	mov	a,r4
                           5735 ;	Peephole 236.a	used r6 instead of ar6
   1686 2E                 5736 	add	a,r6
   1687 F0                 5737 	movx	@dptr,a
                           5738 ;	Peephole 236.g	used r5 instead of ar5
   1688 ED                 5739 	mov	a,r5
                           5740 ;	Peephole 236.b	used r7 instead of ar7
   1689 3F                 5741 	addc	a,r7
   168A A3                 5742 	inc	dptr
   168B F0                 5743 	movx	@dptr,a
   168C 02s17r8E           5744 	ljmp	00176$
                           5745 ;	main4.c:709: case 'C': case 'c': num = num + exp*12; break;
   168F                    5746 00154$:
                           5747 ;	genAssign
   168F 90s00r85           5748 	mov	dptr,#_get_addr_exp_1_1
   1692 E0                 5749 	movx	a,@dptr
   1693 FC                 5750 	mov	r4,a
   1694 A3                 5751 	inc	dptr
   1695 E0                 5752 	movx	a,@dptr
   1696 FD                 5753 	mov	r5,a
                           5754 ;	genAssign
   1697 90s00r00           5755 	mov	dptr,#__mulint_PARM_2
   169A 74 0C              5756 	mov	a,#0x0C
   169C F0                 5757 	movx	@dptr,a
   169D E4                 5758 	clr	a
   169E A3                 5759 	inc	dptr
   169F F0                 5760 	movx	@dptr,a
                           5761 ;	genCall
   16A0 8C 82              5762 	mov	dpl,r4
   16A2 8D 83              5763 	mov	dph,r5
   16A4 C0 02              5764 	push	ar2
   16A6 C0 03              5765 	push	ar3
   16A8 12s00r00           5766 	lcall	__mulint
   16AB AC 82              5767 	mov	r4,dpl
   16AD AD 83              5768 	mov	r5,dph
   16AF D0 03              5769 	pop	ar3
   16B1 D0 02              5770 	pop	ar2
                           5771 ;	genAssign
   16B3 90s00r83           5772 	mov	dptr,#_get_addr_num_1_1
   16B6 E0                 5773 	movx	a,@dptr
   16B7 FE                 5774 	mov	r6,a
   16B8 A3                 5775 	inc	dptr
   16B9 E0                 5776 	movx	a,@dptr
   16BA FF                 5777 	mov	r7,a
                           5778 ;	genPlus
   16BB 90s00r83           5779 	mov	dptr,#_get_addr_num_1_1
                           5780 ;	Peephole 236.g	used r4 instead of ar4
   16BE EC                 5781 	mov	a,r4
                           5782 ;	Peephole 236.a	used r6 instead of ar6
   16BF 2E                 5783 	add	a,r6
   16C0 F0                 5784 	movx	@dptr,a
                           5785 ;	Peephole 236.g	used r5 instead of ar5
   16C1 ED                 5786 	mov	a,r5
                           5787 ;	Peephole 236.b	used r7 instead of ar7
   16C2 3F                 5788 	addc	a,r7
   16C3 A3                 5789 	inc	dptr
   16C4 F0                 5790 	movx	@dptr,a
   16C5 02s17r8E           5791 	ljmp	00176$
                           5792 ;	main4.c:710: case 'D': case 'd': num = num + exp*13; break;
   16C8                    5793 00156$:
                           5794 ;	genAssign
   16C8 90s00r85           5795 	mov	dptr,#_get_addr_exp_1_1
   16CB E0                 5796 	movx	a,@dptr
   16CC FC                 5797 	mov	r4,a
   16CD A3                 5798 	inc	dptr
   16CE E0                 5799 	movx	a,@dptr
   16CF FD                 5800 	mov	r5,a
                           5801 ;	genAssign
   16D0 90s00r00           5802 	mov	dptr,#__mulint_PARM_2
   16D3 74 0D              5803 	mov	a,#0x0D
   16D5 F0                 5804 	movx	@dptr,a
   16D6 E4                 5805 	clr	a
   16D7 A3                 5806 	inc	dptr
   16D8 F0                 5807 	movx	@dptr,a
                           5808 ;	genCall
   16D9 8C 82              5809 	mov	dpl,r4
   16DB 8D 83              5810 	mov	dph,r5
   16DD C0 02              5811 	push	ar2
   16DF C0 03              5812 	push	ar3
   16E1 12s00r00           5813 	lcall	__mulint
   16E4 AC 82              5814 	mov	r4,dpl
   16E6 AD 83              5815 	mov	r5,dph
   16E8 D0 03              5816 	pop	ar3
   16EA D0 02              5817 	pop	ar2
                           5818 ;	genAssign
   16EC 90s00r83           5819 	mov	dptr,#_get_addr_num_1_1
   16EF E0                 5820 	movx	a,@dptr
   16F0 FE                 5821 	mov	r6,a
   16F1 A3                 5822 	inc	dptr
   16F2 E0                 5823 	movx	a,@dptr
   16F3 FF                 5824 	mov	r7,a
                           5825 ;	genPlus
   16F4 90s00r83           5826 	mov	dptr,#_get_addr_num_1_1
                           5827 ;	Peephole 236.g	used r4 instead of ar4
   16F7 EC                 5828 	mov	a,r4
                           5829 ;	Peephole 236.a	used r6 instead of ar6
   16F8 2E                 5830 	add	a,r6
   16F9 F0                 5831 	movx	@dptr,a
                           5832 ;	Peephole 236.g	used r5 instead of ar5
   16FA ED                 5833 	mov	a,r5
                           5834 ;	Peephole 236.b	used r7 instead of ar7
   16FB 3F                 5835 	addc	a,r7
   16FC A3                 5836 	inc	dptr
   16FD F0                 5837 	movx	@dptr,a
   16FE 02s17r8E           5838 	ljmp	00176$
                           5839 ;	main4.c:711: case 'E': case 'e': num = num + exp*14; break;
   1701                    5840 00158$:
                           5841 ;	genAssign
   1701 90s00r85           5842 	mov	dptr,#_get_addr_exp_1_1
   1704 E0                 5843 	movx	a,@dptr
   1705 FC                 5844 	mov	r4,a
   1706 A3                 5845 	inc	dptr
   1707 E0                 5846 	movx	a,@dptr
   1708 FD                 5847 	mov	r5,a
                           5848 ;	genAssign
   1709 90s00r00           5849 	mov	dptr,#__mulint_PARM_2
   170C 74 0E              5850 	mov	a,#0x0E
   170E F0                 5851 	movx	@dptr,a
   170F E4                 5852 	clr	a
   1710 A3                 5853 	inc	dptr
   1711 F0                 5854 	movx	@dptr,a
                           5855 ;	genCall
   1712 8C 82              5856 	mov	dpl,r4
   1714 8D 83              5857 	mov	dph,r5
   1716 C0 02              5858 	push	ar2
   1718 C0 03              5859 	push	ar3
   171A 12s00r00           5860 	lcall	__mulint
   171D AC 82              5861 	mov	r4,dpl
   171F AD 83              5862 	mov	r5,dph
   1721 D0 03              5863 	pop	ar3
   1723 D0 02              5864 	pop	ar2
                           5865 ;	genAssign
   1725 90s00r83           5866 	mov	dptr,#_get_addr_num_1_1
   1728 E0                 5867 	movx	a,@dptr
   1729 FE                 5868 	mov	r6,a
   172A A3                 5869 	inc	dptr
   172B E0                 5870 	movx	a,@dptr
   172C FF                 5871 	mov	r7,a
                           5872 ;	genPlus
   172D 90s00r83           5873 	mov	dptr,#_get_addr_num_1_1
                           5874 ;	Peephole 236.g	used r4 instead of ar4
   1730 EC                 5875 	mov	a,r4
                           5876 ;	Peephole 236.a	used r6 instead of ar6
   1731 2E                 5877 	add	a,r6
   1732 F0                 5878 	movx	@dptr,a
                           5879 ;	Peephole 236.g	used r5 instead of ar5
   1733 ED                 5880 	mov	a,r5
                           5881 ;	Peephole 236.b	used r7 instead of ar7
   1734 3F                 5882 	addc	a,r7
   1735 A3                 5883 	inc	dptr
   1736 F0                 5884 	movx	@dptr,a
                           5885 ;	main4.c:712: case 'F': case 'f': num = num + exp*15; break;
                           5886 ;	Peephole 112.b	changed ljmp to sjmp
   1737 80 55              5887 	sjmp	00176$
   1739                    5888 00160$:
                           5889 ;	genAssign
   1739 90s00r85           5890 	mov	dptr,#_get_addr_exp_1_1
   173C E0                 5891 	movx	a,@dptr
   173D FC                 5892 	mov	r4,a
   173E A3                 5893 	inc	dptr
   173F E0                 5894 	movx	a,@dptr
   1740 FD                 5895 	mov	r5,a
                           5896 ;	genAssign
   1741 90s00r00           5897 	mov	dptr,#__mulint_PARM_2
   1744 74 0F              5898 	mov	a,#0x0F
   1746 F0                 5899 	movx	@dptr,a
   1747 E4                 5900 	clr	a
   1748 A3                 5901 	inc	dptr
   1749 F0                 5902 	movx	@dptr,a
                           5903 ;	genCall
   174A 8C 82              5904 	mov	dpl,r4
   174C 8D 83              5905 	mov	dph,r5
   174E C0 02              5906 	push	ar2
   1750 C0 03              5907 	push	ar3
   1752 12s00r00           5908 	lcall	__mulint
   1755 AC 82              5909 	mov	r4,dpl
   1757 AD 83              5910 	mov	r5,dph
   1759 D0 03              5911 	pop	ar3
   175B D0 02              5912 	pop	ar2
                           5913 ;	genAssign
   175D 90s00r83           5914 	mov	dptr,#_get_addr_num_1_1
   1760 E0                 5915 	movx	a,@dptr
   1761 FE                 5916 	mov	r6,a
   1762 A3                 5917 	inc	dptr
   1763 E0                 5918 	movx	a,@dptr
   1764 FF                 5919 	mov	r7,a
                           5920 ;	genPlus
   1765 90s00r83           5921 	mov	dptr,#_get_addr_num_1_1
                           5922 ;	Peephole 236.g	used r4 instead of ar4
   1768 EC                 5923 	mov	a,r4
                           5924 ;	Peephole 236.a	used r6 instead of ar6
   1769 2E                 5925 	add	a,r6
   176A F0                 5926 	movx	@dptr,a
                           5927 ;	Peephole 236.g	used r5 instead of ar5
   176B ED                 5928 	mov	a,r5
                           5929 ;	Peephole 236.b	used r7 instead of ar7
   176C 3F                 5930 	addc	a,r7
   176D A3                 5931 	inc	dptr
   176E F0                 5932 	movx	@dptr,a
                           5933 ;	main4.c:713: default:printf("\n\rInvalid Input"); break;
                           5934 ;	Peephole 112.b	changed ljmp to sjmp
   176F 80 1D              5935 	sjmp	00176$
   1771                    5936 00161$:
                           5937 ;	genIpush
   1771 C0 02              5938 	push	ar2
   1773 C0 03              5939 	push	ar3
   1775 74rC8              5940 	mov	a,#__str_9
   1777 C0 E0              5941 	push	acc
   1779 74s01              5942 	mov	a,#(__str_9 >> 8)
   177B C0 E0              5943 	push	acc
   177D 74 80              5944 	mov	a,#0x80
   177F C0 E0              5945 	push	acc
                           5946 ;	genCall
   1781 12s00r00           5947 	lcall	_printf
   1784 15 81              5948 	dec	sp
   1786 15 81              5949 	dec	sp
   1788 15 81              5950 	dec	sp
   178A D0 03              5951 	pop	ar3
   178C D0 02              5952 	pop	ar2
                           5953 ;	main4.c:714: }
   178E                    5954 00176$:
                           5955 ;	main4.c:694: for(i=0;i<2;i++)
                           5956 ;	genPlus
                           5957 ;     genPlusIncr
   178E 0A                 5958 	inc	r2
   178F BA 00 01           5959 	cjne	r2,#0x00,00295$
   1792 0B                 5960 	inc	r3
   1793                    5961 00295$:
   1793 02s14rD0           5962 	ljmp	00174$
   1796                    5963 00237$:
                           5964 ;	genAssign
   1796 90s00r81           5965 	mov	dptr,#_get_addr_i_1_1
   1799 EA                 5966 	mov	a,r2
   179A F0                 5967 	movx	@dptr,a
   179B A3                 5968 	inc	dptr
   179C EB                 5969 	mov	a,r3
   179D F0                 5970 	movx	@dptr,a
   179E                    5971 00180$:
                           5972 ;	main4.c:637: for(i=0;i<3;i++)    //3 digit to be input
                           5973 ;	genAssign
   179E 90s00r81           5974 	mov	dptr,#_get_addr_i_1_1
   17A1 E0                 5975 	movx	a,@dptr
   17A2 FA                 5976 	mov	r2,a
   17A3 A3                 5977 	inc	dptr
   17A4 E0                 5978 	movx	a,@dptr
   17A5 FB                 5979 	mov	r3,a
                           5980 ;	genPlus
   17A6 90s00r81           5981 	mov	dptr,#_get_addr_i_1_1
                           5982 ;     genPlusIncr
   17A9 74 01              5983 	mov	a,#0x01
                           5984 ;	Peephole 236.a	used r2 instead of ar2
   17AB 2A                 5985 	add	a,r2
   17AC F0                 5986 	movx	@dptr,a
                           5987 ;	Peephole 181	changed mov to clr
   17AD E4                 5988 	clr	a
                           5989 ;	Peephole 236.b	used r3 instead of ar3
   17AE 3B                 5990 	addc	a,r3
   17AF A3                 5991 	inc	dptr
   17B0 F0                 5992 	movx	@dptr,a
   17B1 02s10rE6           5993 	ljmp	00178$
   17B4                    5994 00181$:
                           5995 ;	main4.c:724: if( num>=0 && num<=2047) //CHECKS ADDRESS RANGE
                           5996 ;	genAssign
   17B4 90s00r83           5997 	mov	dptr,#_get_addr_num_1_1
   17B7 E0                 5998 	movx	a,@dptr
   17B8 FA                 5999 	mov	r2,a
   17B9 A3                 6000 	inc	dptr
   17BA E0                 6001 	movx	a,@dptr
                           6002 ;	genCmpLt
                           6003 ;	genCmp
   17BB FB                 6004 	mov	r3,a
                           6005 ;	Peephole 105	removed redundant mov
                           6006 ;	genIfxJump
                           6007 ;	Peephole 108.e	removed ljmp by inverse jump logic
   17BC 20 E7 0F           6008 	jb	acc.7,00171$
                           6009 ;	Peephole 300	removed redundant label 00296$
                           6010 ;	genCmpGt
                           6011 ;	genCmp
   17BF C3                 6012 	clr	c
   17C0 74 FF              6013 	mov	a,#0xFF
   17C2 9A                 6014 	subb	a,r2
                           6015 ;	Peephole 159	avoided xrl during execution
   17C3 74 87              6016 	mov	a,#(0x07 ^ 0x80)
   17C5 8B F0              6017 	mov	b,r3
   17C7 63 F0 80           6018 	xrl	b,#0x80
   17CA 95 F0              6019 	subb	a,b
                           6020 ;	genIfxJump
                           6021 ;	Peephole 108.a	removed ljmp by inverse jump logic
   17CC 50 22              6022 	jnc	00172$
                           6023 ;	Peephole 300	removed redundant label 00297$
   17CE                    6024 00171$:
                           6025 ;	main4.c:733: printf("\n\n\rOut of Range  %d",num);
                           6026 ;	genIpush
   17CE 90s00r83           6027 	mov	dptr,#_get_addr_num_1_1
   17D1 E0                 6028 	movx	a,@dptr
   17D2 C0 E0              6029 	push	acc
   17D4 A3                 6030 	inc	dptr
   17D5 E0                 6031 	movx	a,@dptr
   17D6 C0 E0              6032 	push	acc
                           6033 ;	genIpush
   17D8 74r13              6034 	mov	a,#__str_86
   17DA C0 E0              6035 	push	acc
   17DC 74s0E              6036 	mov	a,#(__str_86 >> 8)
   17DE C0 E0              6037 	push	acc
   17E0 74 80              6038 	mov	a,#0x80
   17E2 C0 E0              6039 	push	acc
                           6040 ;	genCall
   17E4 12s00r00           6041 	lcall	_printf
   17E7 E5 81              6042 	mov	a,sp
   17E9 24 FB              6043 	add	a,#0xfb
   17EB F5 81              6044 	mov	sp,a
                           6045 ;	main4.c:734: eeprom_functions();
                           6046 ;	genCall
   17ED 12s09rBE           6047 	lcall	_eeprom_functions
   17F0                    6048 00172$:
                           6049 ;	main4.c:737: return(num);            //returns the address
                           6050 ;	genAssign
   17F0 90s00r83           6051 	mov	dptr,#_get_addr_num_1_1
   17F3 E0                 6052 	movx	a,@dptr
   17F4 FA                 6053 	mov	r2,a
   17F5 A3                 6054 	inc	dptr
   17F6 E0                 6055 	movx	a,@dptr
                           6056 ;	genRet
                           6057 ;	Peephole 234.b	loading dph directly from a(ccumulator), r3 not set
   17F7 8A 82              6058 	mov	dpl,r2
   17F9 F5 83              6059 	mov	dph,a
                           6060 ;	Peephole 300	removed redundant label 00182$
   17FB 22                 6061 	ret
                           6062 ;------------------------------------------------------------
                           6063 ;Allocation info for local variables in function 'get_data'
                           6064 ;------------------------------------------------------------
                           6065 ;i                         Allocated with name '_get_data_i_1_1'
                           6066 ;num                       Allocated with name '_get_data_num_1_1'
                           6067 ;c                         Allocated with name '_get_data_c_1_1'
                           6068 ;exp                       Allocated with name '_get_data_exp_1_1'
                           6069 ;dta                       Allocated with name '_get_data_dta_1_1'
                           6070 ;------------------------------------------------------------
                           6071 ;	main4.c:744: int get_data(void)      //gets data from the user
                           6072 ;	-----------------------------------------
                           6073 ;	 function get_data
                           6074 ;	-----------------------------------------
   17FC                    6075 _get_data:
                           6076 ;	main4.c:746: int i=0,num=0,c=0,exp=0;
                           6077 ;	genAssign
   17FC 90s00r89           6078 	mov	dptr,#_get_data_num_1_1
   17FF E4                 6079 	clr	a
   1800 F0                 6080 	movx	@dptr,a
   1801 A3                 6081 	inc	dptr
   1802 F0                 6082 	movx	@dptr,a
                           6083 ;	genAssign
   1803 90s00r8B           6084 	mov	dptr,#_get_data_exp_1_1
   1806 E4                 6085 	clr	a
   1807 F0                 6086 	movx	@dptr,a
   1808 A3                 6087 	inc	dptr
   1809 F0                 6088 	movx	@dptr,a
                           6089 ;	main4.c:748: for(i=0;i<2;i++)
                           6090 ;	genAssign
   180A 7A 00              6091 	mov	r2,#0x00
   180C 7B 00              6092 	mov	r3,#0x00
   180E                    6093 00150$:
                           6094 ;	genCmpLt
                           6095 ;	genCmp
   180E C3                 6096 	clr	c
   180F EA                 6097 	mov	a,r2
   1810 94 02              6098 	subb	a,#0x02
   1812 EB                 6099 	mov	a,r3
   1813 64 80              6100 	xrl	a,#0x80
   1815 94 80              6101 	subb	a,#0x80
                           6102 ;	genIfxJump
                           6103 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1817 50 37              6104 	jnc	00153$
                           6105 ;	Peephole 300	removed redundant label 00198$
                           6106 ;	main4.c:750: dta[i]=getchar();
                           6107 ;	genPlus
                           6108 ;	Peephole 236.g	used r2 instead of ar2
   1819 EA                 6109 	mov	a,r2
   181A 24r8D              6110 	add	a,#_get_data_dta_1_1
   181C FC                 6111 	mov	r4,a
                           6112 ;	Peephole 236.g	used r3 instead of ar3
   181D EB                 6113 	mov	a,r3
   181E 34s00              6114 	addc	a,#(_get_data_dta_1_1 >> 8)
   1820 FD                 6115 	mov	r5,a
                           6116 ;	genCall
   1821 C0 02              6117 	push	ar2
   1823 C0 03              6118 	push	ar3
   1825 C0 04              6119 	push	ar4
   1827 C0 05              6120 	push	ar5
   1829 12s01r72           6121 	lcall	_getchar
   182C AE 82              6122 	mov	r6,dpl
   182E D0 05              6123 	pop	ar5
   1830 D0 04              6124 	pop	ar4
   1832 D0 03              6125 	pop	ar3
   1834 D0 02              6126 	pop	ar2
                           6127 ;	genPointerSet
                           6128 ;     genFarPointerSet
   1836 8C 82              6129 	mov	dpl,r4
   1838 8D 83              6130 	mov	dph,r5
   183A EE                 6131 	mov	a,r6
   183B F0                 6132 	movx	@dptr,a
                           6133 ;	main4.c:751: putchar(dta[i]);
                           6134 ;	genCall
   183C 8E 82              6135 	mov	dpl,r6
   183E C0 02              6136 	push	ar2
   1840 C0 03              6137 	push	ar3
   1842 12s01r60           6138 	lcall	_putchar
   1845 D0 03              6139 	pop	ar3
   1847 D0 02              6140 	pop	ar2
                           6141 ;	main4.c:748: for(i=0;i<2;i++)
                           6142 ;	genPlus
                           6143 ;     genPlusIncr
                           6144 ;	tail increment optimized (range 8)
   1849 0A                 6145 	inc	r2
   184A BA 00 C1           6146 	cjne	r2,#0x00,00150$
   184D 0B                 6147 	inc	r3
                           6148 ;	Peephole 112.b	changed ljmp to sjmp
   184E 80 BE              6149 	sjmp	00150$
   1850                    6150 00153$:
                           6151 ;	main4.c:753: for(i=0;i<2;i++)        //get two data characters
                           6152 ;	genAssign
   1850 90s00r87           6153 	mov	dptr,#_get_data_i_1_1
   1853 E4                 6154 	clr	a
   1854 F0                 6155 	movx	@dptr,a
   1855 A3                 6156 	inc	dptr
   1856 F0                 6157 	movx	@dptr,a
   1857                    6158 00154$:
                           6159 ;	genAssign
   1857 90s00r87           6160 	mov	dptr,#_get_data_i_1_1
   185A E0                 6161 	movx	a,@dptr
   185B FA                 6162 	mov	r2,a
   185C A3                 6163 	inc	dptr
   185D E0                 6164 	movx	a,@dptr
   185E FB                 6165 	mov	r3,a
                           6166 ;	genCmpLt
                           6167 ;	genCmp
   185F C3                 6168 	clr	c
   1860 EA                 6169 	mov	a,r2
   1861 94 02              6170 	subb	a,#0x02
   1863 EB                 6171 	mov	a,r3
   1864 64 80              6172 	xrl	a,#0x80
   1866 94 80              6173 	subb	a,#0x80
                           6174 ;	genIfxJump
   1868 40 03              6175 	jc	00199$
   186A 02s1CrF0           6176 	ljmp	00157$
   186D                    6177 00199$:
                           6178 ;	main4.c:756: if(isalnum(dta[i]))     //check if alphanumeric
                           6179 ;	genPlus
                           6180 ;	Peephole 236.g	used r2 instead of ar2
   186D EA                 6181 	mov	a,r2
   186E 24r8D              6182 	add	a,#_get_data_dta_1_1
   1870 FA                 6183 	mov	r2,a
                           6184 ;	Peephole 236.g	used r3 instead of ar3
   1871 EB                 6185 	mov	a,r3
   1872 34s00              6186 	addc	a,#(_get_data_dta_1_1 >> 8)
   1874 FB                 6187 	mov	r3,a
                           6188 ;	genPointerGet
                           6189 ;	genFarPointerGet
   1875 8A 82              6190 	mov	dpl,r2
   1877 8B 83              6191 	mov	dph,r3
   1879 E0                 6192 	movx	a,@dptr
                           6193 ;	genCall
   187A FC                 6194 	mov	r4,a
                           6195 ;	Peephole 244.c	loading dpl from a instead of r4
   187B F5 82              6196 	mov	dpl,a
   187D C0 02              6197 	push	ar2
   187F C0 03              6198 	push	ar3
   1881 12s00r00           6199 	lcall	_isupper
   1884 E5 82              6200 	mov	a,dpl
   1886 D0 03              6201 	pop	ar3
   1888 D0 02              6202 	pop	ar2
                           6203 ;	genIfx
                           6204 ;	genIfxJump
                           6205 ;	Peephole 108.b	removed ljmp by inverse jump logic
   188A 70 29              6206 	jnz	00145$
                           6207 ;	Peephole 300	removed redundant label 00200$
                           6208 ;	genPointerGet
                           6209 ;	genFarPointerGet
   188C 8A 82              6210 	mov	dpl,r2
   188E 8B 83              6211 	mov	dph,r3
   1890 E0                 6212 	movx	a,@dptr
                           6213 ;	genCall
   1891 FC                 6214 	mov	r4,a
                           6215 ;	Peephole 244.c	loading dpl from a instead of r4
   1892 F5 82              6216 	mov	dpl,a
   1894 C0 02              6217 	push	ar2
   1896 C0 03              6218 	push	ar3
   1898 12s00r00           6219 	lcall	_islower
   189B E5 82              6220 	mov	a,dpl
   189D D0 03              6221 	pop	ar3
   189F D0 02              6222 	pop	ar2
                           6223 ;	genIfx
                           6224 ;	genIfxJump
                           6225 ;	Peephole 108.b	removed ljmp by inverse jump logic
   18A1 70 12              6226 	jnz	00145$
                           6227 ;	Peephole 300	removed redundant label 00201$
                           6228 ;	genPointerGet
                           6229 ;	genFarPointerGet
   18A3 8A 82              6230 	mov	dpl,r2
   18A5 8B 83              6231 	mov	dph,r3
   18A7 E0                 6232 	movx	a,@dptr
                           6233 ;	genCall
   18A8 FA                 6234 	mov	r2,a
                           6235 ;	Peephole 244.c	loading dpl from a instead of r2
   18A9 F5 82              6236 	mov	dpl,a
   18AB 12s00r00           6237 	lcall	_isdigit
   18AE E5 82              6238 	mov	a,dpl
                           6239 ;	genIfx
                           6240 ;	genIfxJump
   18B0 70 03              6241 	jnz	00202$
   18B2 02s1CrC1           6242 	ljmp	00146$
   18B5                    6243 00202$:
   18B5                    6244 00145$:
                           6245 ;	main4.c:758: if(i==0) exp = 16;
                           6246 ;	genAssign
   18B5 90s00r87           6247 	mov	dptr,#_get_data_i_1_1
   18B8 E0                 6248 	movx	a,@dptr
   18B9 FA                 6249 	mov	r2,a
   18BA A3                 6250 	inc	dptr
   18BB E0                 6251 	movx	a,@dptr
                           6252 ;	genIfx
   18BC FB                 6253 	mov	r3,a
                           6254 ;	Peephole 135	removed redundant mov
   18BD 4A                 6255 	orl	a,r2
                           6256 ;	genIfxJump
                           6257 ;	Peephole 108.b	removed ljmp by inverse jump logic
   18BE 70 09              6258 	jnz	00102$
                           6259 ;	Peephole 300	removed redundant label 00203$
                           6260 ;	genAssign
   18C0 90s00r8B           6261 	mov	dptr,#_get_data_exp_1_1
   18C3 74 10              6262 	mov	a,#0x10
   18C5 F0                 6263 	movx	@dptr,a
   18C6 E4                 6264 	clr	a
   18C7 A3                 6265 	inc	dptr
   18C8 F0                 6266 	movx	@dptr,a
   18C9                    6267 00102$:
                           6268 ;	main4.c:759: if(i==1) exp = 1;
                           6269 ;	genAssign
   18C9 90s00r87           6270 	mov	dptr,#_get_data_i_1_1
   18CC E0                 6271 	movx	a,@dptr
   18CD FA                 6272 	mov	r2,a
   18CE A3                 6273 	inc	dptr
   18CF E0                 6274 	movx	a,@dptr
   18D0 FB                 6275 	mov	r3,a
                           6276 ;	genCmpEq
                           6277 ;	gencjneshort
                           6278 ;	Peephole 112.b	changed ljmp to sjmp
                           6279 ;	Peephole 198.a	optimized misc jump sequence
   18D1 BA 01 0C           6280 	cjne	r2,#0x01,00104$
   18D4 BB 00 09           6281 	cjne	r3,#0x00,00104$
                           6282 ;	Peephole 200.b	removed redundant sjmp
                           6283 ;	Peephole 300	removed redundant label 00204$
                           6284 ;	Peephole 300	removed redundant label 00205$
                           6285 ;	genAssign
   18D7 90s00r8B           6286 	mov	dptr,#_get_data_exp_1_1
   18DA 74 01              6287 	mov	a,#0x01
   18DC F0                 6288 	movx	@dptr,a
   18DD E4                 6289 	clr	a
   18DE A3                 6290 	inc	dptr
   18DF F0                 6291 	movx	@dptr,a
   18E0                    6292 00104$:
                           6293 ;	main4.c:762: if(isdigit(dta[i]))        //if user eneterd a digit convert to intiger
                           6294 ;	genAssign
   18E0 90s00r87           6295 	mov	dptr,#_get_data_i_1_1
   18E3 E0                 6296 	movx	a,@dptr
   18E4 FA                 6297 	mov	r2,a
   18E5 A3                 6298 	inc	dptr
   18E6 E0                 6299 	movx	a,@dptr
   18E7 FB                 6300 	mov	r3,a
                           6301 ;	genPlus
                           6302 ;	Peephole 236.g	used r2 instead of ar2
   18E8 EA                 6303 	mov	a,r2
   18E9 24r8D              6304 	add	a,#_get_data_dta_1_1
   18EB FA                 6305 	mov	r2,a
                           6306 ;	Peephole 236.g	used r3 instead of ar3
   18EC EB                 6307 	mov	a,r3
   18ED 34s00              6308 	addc	a,#(_get_data_dta_1_1 >> 8)
   18EF FB                 6309 	mov	r3,a
                           6310 ;	genPointerGet
                           6311 ;	genFarPointerGet
   18F0 8A 82              6312 	mov	dpl,r2
   18F2 8B 83              6313 	mov	dph,r3
   18F4 E0                 6314 	movx	a,@dptr
                           6315 ;	genCall
   18F5 FC                 6316 	mov	r4,a
                           6317 ;	Peephole 244.c	loading dpl from a instead of r4
   18F6 F5 82              6318 	mov	dpl,a
   18F8 C0 02              6319 	push	ar2
   18FA C0 03              6320 	push	ar3
   18FC 12s00r00           6321 	lcall	_isdigit
   18FF E5 82              6322 	mov	a,dpl
   1901 D0 03              6323 	pop	ar3
   1903 D0 02              6324 	pop	ar2
                           6325 ;	genIfx
                           6326 ;	genIfxJump
                           6327 ;	Peephole 108.c	removed ljmp by inverse jump logic
   1905 60 3F              6328 	jz	00106$
                           6329 ;	Peephole 300	removed redundant label 00206$
                           6330 ;	main4.c:764: num = num + (dta[i]-48)*exp;
                           6331 ;	genPointerGet
                           6332 ;	genFarPointerGet
   1907 8A 82              6333 	mov	dpl,r2
   1909 8B 83              6334 	mov	dph,r3
   190B E0                 6335 	movx	a,@dptr
                           6336 ;	genCast
   190C FA                 6337 	mov	r2,a
                           6338 ;	Peephole 105	removed redundant mov
   190D 33                 6339 	rlc	a
   190E 95 E0              6340 	subb	a,acc
   1910 FB                 6341 	mov	r3,a
                           6342 ;	genMinus
   1911 EA                 6343 	mov	a,r2
   1912 24 D0              6344 	add	a,#0xd0
   1914 FA                 6345 	mov	r2,a
   1915 EB                 6346 	mov	a,r3
   1916 34 FF              6347 	addc	a,#0xff
   1918 FB                 6348 	mov	r3,a
                           6349 ;	genAssign
   1919 90s00r8B           6350 	mov	dptr,#_get_data_exp_1_1
   191C E0                 6351 	movx	a,@dptr
   191D FC                 6352 	mov	r4,a
   191E A3                 6353 	inc	dptr
   191F E0                 6354 	movx	a,@dptr
   1920 FD                 6355 	mov	r5,a
                           6356 ;	genAssign
   1921 90s00r00           6357 	mov	dptr,#__mulint_PARM_2
   1924 EC                 6358 	mov	a,r4
   1925 F0                 6359 	movx	@dptr,a
   1926 A3                 6360 	inc	dptr
   1927 ED                 6361 	mov	a,r5
   1928 F0                 6362 	movx	@dptr,a
                           6363 ;	genCall
   1929 8A 82              6364 	mov	dpl,r2
   192B 8B 83              6365 	mov	dph,r3
   192D 12s00r00           6366 	lcall	__mulint
   1930 AA 82              6367 	mov	r2,dpl
   1932 AB 83              6368 	mov	r3,dph
                           6369 ;	genAssign
   1934 90s00r89           6370 	mov	dptr,#_get_data_num_1_1
   1937 E0                 6371 	movx	a,@dptr
   1938 FC                 6372 	mov	r4,a
   1939 A3                 6373 	inc	dptr
   193A E0                 6374 	movx	a,@dptr
   193B FD                 6375 	mov	r5,a
                           6376 ;	genPlus
   193C 90s00r89           6377 	mov	dptr,#_get_data_num_1_1
                           6378 ;	Peephole 236.g	used r2 instead of ar2
   193F EA                 6379 	mov	a,r2
                           6380 ;	Peephole 236.a	used r4 instead of ar4
   1940 2C                 6381 	add	a,r4
   1941 F0                 6382 	movx	@dptr,a
                           6383 ;	Peephole 236.g	used r3 instead of ar3
   1942 EB                 6384 	mov	a,r3
                           6385 ;	Peephole 236.b	used r5 instead of ar5
   1943 3D                 6386 	addc	a,r5
   1944 A3                 6387 	inc	dptr
   1945 F0                 6388 	movx	@dptr,a
   1946                    6389 00106$:
                           6390 ;	main4.c:767: if(isalpha(dta[i]))        //if user eneterd a character convert to intiger
                           6391 ;	genAssign
   1946 90s00r87           6392 	mov	dptr,#_get_data_i_1_1
   1949 E0                 6393 	movx	a,@dptr
   194A FA                 6394 	mov	r2,a
   194B A3                 6395 	inc	dptr
   194C E0                 6396 	movx	a,@dptr
   194D FB                 6397 	mov	r3,a
                           6398 ;	genPlus
                           6399 ;	Peephole 236.g	used r2 instead of ar2
   194E EA                 6400 	mov	a,r2
   194F 24r8D              6401 	add	a,#_get_data_dta_1_1
   1951 FA                 6402 	mov	r2,a
                           6403 ;	Peephole 236.g	used r3 instead of ar3
   1952 EB                 6404 	mov	a,r3
   1953 34s00              6405 	addc	a,#(_get_data_dta_1_1 >> 8)
   1955 FB                 6406 	mov	r3,a
                           6407 ;	genPointerGet
                           6408 ;	genFarPointerGet
   1956 8A 82              6409 	mov	dpl,r2
   1958 8B 83              6410 	mov	dph,r3
   195A E0                 6411 	movx	a,@dptr
                           6412 ;	genCall
   195B FC                 6413 	mov	r4,a
                           6414 ;	Peephole 244.c	loading dpl from a instead of r4
   195C F5 82              6415 	mov	dpl,a
   195E C0 02              6416 	push	ar2
   1960 C0 03              6417 	push	ar3
   1962 12s00r00           6418 	lcall	_isupper
   1965 E5 82              6419 	mov	a,dpl
   1967 D0 03              6420 	pop	ar3
   1969 D0 02              6421 	pop	ar2
                           6422 ;	genIfx
                           6423 ;	genIfxJump
                           6424 ;	Peephole 108.b	removed ljmp by inverse jump logic
   196B 70 12              6425 	jnz	00121$
                           6426 ;	Peephole 300	removed redundant label 00207$
                           6427 ;	genPointerGet
                           6428 ;	genFarPointerGet
   196D 8A 82              6429 	mov	dpl,r2
   196F 8B 83              6430 	mov	dph,r3
   1971 E0                 6431 	movx	a,@dptr
                           6432 ;	genCall
   1972 FA                 6433 	mov	r2,a
                           6434 ;	Peephole 244.c	loading dpl from a instead of r2
   1973 F5 82              6435 	mov	dpl,a
   1975 12s00r00           6436 	lcall	_islower
   1978 E5 82              6437 	mov	a,dpl
                           6438 ;	genIfx
                           6439 ;	genIfxJump
   197A 70 03              6440 	jnz	00208$
   197C 02s1Br3C           6441 	ljmp	00122$
   197F                    6442 00208$:
   197F                    6443 00121$:
                           6444 ;	main4.c:769: c = dta[i];
                           6445 ;	genAssign
   197F 90s00r87           6446 	mov	dptr,#_get_data_i_1_1
   1982 E0                 6447 	movx	a,@dptr
   1983 FA                 6448 	mov	r2,a
   1984 A3                 6449 	inc	dptr
   1985 E0                 6450 	movx	a,@dptr
   1986 FB                 6451 	mov	r3,a
                           6452 ;	genPlus
                           6453 ;	Peephole 236.g	used r2 instead of ar2
   1987 EA                 6454 	mov	a,r2
   1988 24r8D              6455 	add	a,#_get_data_dta_1_1
   198A F5 82              6456 	mov	dpl,a
                           6457 ;	Peephole 236.g	used r3 instead of ar3
   198C EB                 6458 	mov	a,r3
   198D 34s00              6459 	addc	a,#(_get_data_dta_1_1 >> 8)
   198F F5 83              6460 	mov	dph,a
                           6461 ;	genPointerGet
                           6462 ;	genFarPointerGet
   1991 E0                 6463 	movx	a,@dptr
                           6464 ;	genCast
   1992 FA                 6465 	mov	r2,a
                           6466 ;	Peephole 105	removed redundant mov
   1993 33                 6467 	rlc	a
   1994 95 E0              6468 	subb	a,acc
   1996 FB                 6469 	mov	r3,a
                           6470 ;	main4.c:772: switch (c)     //cases for A through F for intiger conversion
                           6471 ;	genCmpEq
                           6472 ;	gencjneshort
   1997 BA 41 05           6473 	cjne	r2,#0x41,00209$
   199A BB 00 02           6474 	cjne	r3,#0x00,00209$
                           6475 ;	Peephole 112.b	changed ljmp to sjmp
   199D 80 64              6476 	sjmp	00108$
   199F                    6477 00209$:
                           6478 ;	genCmpEq
                           6479 ;	gencjneshort
   199F BA 42 06           6480 	cjne	r2,#0x42,00210$
   19A2 BB 00 03           6481 	cjne	r3,#0x00,00210$
   19A5 02s1Ar34           6482 	ljmp	00110$
   19A8                    6483 00210$:
                           6484 ;	genCmpEq
                           6485 ;	gencjneshort
   19A8 BA 43 06           6486 	cjne	r2,#0x43,00211$
   19AB BB 00 03           6487 	cjne	r3,#0x00,00211$
   19AE 02s1Ar65           6488 	ljmp	00112$
   19B1                    6489 00211$:
                           6490 ;	genCmpEq
                           6491 ;	gencjneshort
   19B1 BA 44 06           6492 	cjne	r2,#0x44,00212$
   19B4 BB 00 03           6493 	cjne	r3,#0x00,00212$
   19B7 02s1Ar96           6494 	ljmp	00114$
   19BA                    6495 00212$:
                           6496 ;	genCmpEq
                           6497 ;	gencjneshort
   19BA BA 45 06           6498 	cjne	r2,#0x45,00213$
   19BD BB 00 03           6499 	cjne	r3,#0x00,00213$
   19C0 02s1ArC7           6500 	ljmp	00116$
   19C3                    6501 00213$:
                           6502 ;	genCmpEq
                           6503 ;	gencjneshort
   19C3 BA 46 06           6504 	cjne	r2,#0x46,00214$
   19C6 BB 00 03           6505 	cjne	r3,#0x00,00214$
   19C9 02s1ArF7           6506 	ljmp	00118$
   19CC                    6507 00214$:
                           6508 ;	genCmpEq
                           6509 ;	gencjneshort
   19CC BA 61 05           6510 	cjne	r2,#0x61,00215$
   19CF BB 00 02           6511 	cjne	r3,#0x00,00215$
                           6512 ;	Peephole 112.b	changed ljmp to sjmp
   19D2 80 2F              6513 	sjmp	00108$
   19D4                    6514 00215$:
                           6515 ;	genCmpEq
                           6516 ;	gencjneshort
   19D4 BA 62 05           6517 	cjne	r2,#0x62,00216$
   19D7 BB 00 02           6518 	cjne	r3,#0x00,00216$
                           6519 ;	Peephole 112.b	changed ljmp to sjmp
   19DA 80 58              6520 	sjmp	00110$
   19DC                    6521 00216$:
                           6522 ;	genCmpEq
                           6523 ;	gencjneshort
   19DC BA 63 06           6524 	cjne	r2,#0x63,00217$
   19DF BB 00 03           6525 	cjne	r3,#0x00,00217$
   19E2 02s1Ar65           6526 	ljmp	00112$
   19E5                    6527 00217$:
                           6528 ;	genCmpEq
                           6529 ;	gencjneshort
   19E5 BA 64 06           6530 	cjne	r2,#0x64,00218$
   19E8 BB 00 03           6531 	cjne	r3,#0x00,00218$
   19EB 02s1Ar96           6532 	ljmp	00114$
   19EE                    6533 00218$:
                           6534 ;	genCmpEq
                           6535 ;	gencjneshort
   19EE BA 65 06           6536 	cjne	r2,#0x65,00219$
   19F1 BB 00 03           6537 	cjne	r3,#0x00,00219$
   19F4 02s1ArC7           6538 	ljmp	00116$
   19F7                    6539 00219$:
                           6540 ;	genCmpEq
                           6541 ;	gencjneshort
   19F7 BA 66 06           6542 	cjne	r2,#0x66,00220$
   19FA BB 00 03           6543 	cjne	r3,#0x00,00220$
   19FD 02s1ArF7           6544 	ljmp	00118$
   1A00                    6545 00220$:
   1A00 02s1Br27           6546 	ljmp	00119$
                           6547 ;	main4.c:775: case 'A': case 'a': num = num + exp*10; break;
   1A03                    6548 00108$:
                           6549 ;	genAssign
   1A03 90s00r8B           6550 	mov	dptr,#_get_data_exp_1_1
   1A06 E0                 6551 	movx	a,@dptr
   1A07 FA                 6552 	mov	r2,a
   1A08 A3                 6553 	inc	dptr
   1A09 E0                 6554 	movx	a,@dptr
   1A0A FB                 6555 	mov	r3,a
                           6556 ;	genAssign
   1A0B 90s00r00           6557 	mov	dptr,#__mulint_PARM_2
   1A0E 74 0A              6558 	mov	a,#0x0A
   1A10 F0                 6559 	movx	@dptr,a
   1A11 E4                 6560 	clr	a
   1A12 A3                 6561 	inc	dptr
   1A13 F0                 6562 	movx	@dptr,a
                           6563 ;	genCall
   1A14 8A 82              6564 	mov	dpl,r2
   1A16 8B 83              6565 	mov	dph,r3
   1A18 12s00r00           6566 	lcall	__mulint
   1A1B AA 82              6567 	mov	r2,dpl
   1A1D AB 83              6568 	mov	r3,dph
                           6569 ;	genAssign
   1A1F 90s00r89           6570 	mov	dptr,#_get_data_num_1_1
   1A22 E0                 6571 	movx	a,@dptr
   1A23 FC                 6572 	mov	r4,a
   1A24 A3                 6573 	inc	dptr
   1A25 E0                 6574 	movx	a,@dptr
   1A26 FD                 6575 	mov	r5,a
                           6576 ;	genPlus
   1A27 90s00r89           6577 	mov	dptr,#_get_data_num_1_1
                           6578 ;	Peephole 236.g	used r2 instead of ar2
   1A2A EA                 6579 	mov	a,r2
                           6580 ;	Peephole 236.a	used r4 instead of ar4
   1A2B 2C                 6581 	add	a,r4
   1A2C F0                 6582 	movx	@dptr,a
                           6583 ;	Peephole 236.g	used r3 instead of ar3
   1A2D EB                 6584 	mov	a,r3
                           6585 ;	Peephole 236.b	used r5 instead of ar5
   1A2E 3D                 6586 	addc	a,r5
   1A2F A3                 6587 	inc	dptr
   1A30 F0                 6588 	movx	@dptr,a
   1A31 02s1Br3C           6589 	ljmp	00122$
                           6590 ;	main4.c:776: case 'B': case 'b': num = num + exp*11; break;
   1A34                    6591 00110$:
                           6592 ;	genAssign
   1A34 90s00r8B           6593 	mov	dptr,#_get_data_exp_1_1
   1A37 E0                 6594 	movx	a,@dptr
   1A38 FA                 6595 	mov	r2,a
   1A39 A3                 6596 	inc	dptr
   1A3A E0                 6597 	movx	a,@dptr
   1A3B FB                 6598 	mov	r3,a
                           6599 ;	genAssign
   1A3C 90s00r00           6600 	mov	dptr,#__mulint_PARM_2
   1A3F 74 0B              6601 	mov	a,#0x0B
   1A41 F0                 6602 	movx	@dptr,a
   1A42 E4                 6603 	clr	a
   1A43 A3                 6604 	inc	dptr
   1A44 F0                 6605 	movx	@dptr,a
                           6606 ;	genCall
   1A45 8A 82              6607 	mov	dpl,r2
   1A47 8B 83              6608 	mov	dph,r3
   1A49 12s00r00           6609 	lcall	__mulint
   1A4C AA 82              6610 	mov	r2,dpl
   1A4E AB 83              6611 	mov	r3,dph
                           6612 ;	genAssign
   1A50 90s00r89           6613 	mov	dptr,#_get_data_num_1_1
   1A53 E0                 6614 	movx	a,@dptr
   1A54 FC                 6615 	mov	r4,a
   1A55 A3                 6616 	inc	dptr
   1A56 E0                 6617 	movx	a,@dptr
   1A57 FD                 6618 	mov	r5,a
                           6619 ;	genPlus
   1A58 90s00r89           6620 	mov	dptr,#_get_data_num_1_1
                           6621 ;	Peephole 236.g	used r2 instead of ar2
   1A5B EA                 6622 	mov	a,r2
                           6623 ;	Peephole 236.a	used r4 instead of ar4
   1A5C 2C                 6624 	add	a,r4
   1A5D F0                 6625 	movx	@dptr,a
                           6626 ;	Peephole 236.g	used r3 instead of ar3
   1A5E EB                 6627 	mov	a,r3
                           6628 ;	Peephole 236.b	used r5 instead of ar5
   1A5F 3D                 6629 	addc	a,r5
   1A60 A3                 6630 	inc	dptr
   1A61 F0                 6631 	movx	@dptr,a
   1A62 02s1Br3C           6632 	ljmp	00122$
                           6633 ;	main4.c:777: case 'C': case 'c': num = num + exp*12; break;
   1A65                    6634 00112$:
                           6635 ;	genAssign
   1A65 90s00r8B           6636 	mov	dptr,#_get_data_exp_1_1
   1A68 E0                 6637 	movx	a,@dptr
   1A69 FA                 6638 	mov	r2,a
   1A6A A3                 6639 	inc	dptr
   1A6B E0                 6640 	movx	a,@dptr
   1A6C FB                 6641 	mov	r3,a
                           6642 ;	genAssign
   1A6D 90s00r00           6643 	mov	dptr,#__mulint_PARM_2
   1A70 74 0C              6644 	mov	a,#0x0C
   1A72 F0                 6645 	movx	@dptr,a
   1A73 E4                 6646 	clr	a
   1A74 A3                 6647 	inc	dptr
   1A75 F0                 6648 	movx	@dptr,a
                           6649 ;	genCall
   1A76 8A 82              6650 	mov	dpl,r2
   1A78 8B 83              6651 	mov	dph,r3
   1A7A 12s00r00           6652 	lcall	__mulint
   1A7D AA 82              6653 	mov	r2,dpl
   1A7F AB 83              6654 	mov	r3,dph
                           6655 ;	genAssign
   1A81 90s00r89           6656 	mov	dptr,#_get_data_num_1_1
   1A84 E0                 6657 	movx	a,@dptr
   1A85 FC                 6658 	mov	r4,a
   1A86 A3                 6659 	inc	dptr
   1A87 E0                 6660 	movx	a,@dptr
   1A88 FD                 6661 	mov	r5,a
                           6662 ;	genPlus
   1A89 90s00r89           6663 	mov	dptr,#_get_data_num_1_1
                           6664 ;	Peephole 236.g	used r2 instead of ar2
   1A8C EA                 6665 	mov	a,r2
                           6666 ;	Peephole 236.a	used r4 instead of ar4
   1A8D 2C                 6667 	add	a,r4
   1A8E F0                 6668 	movx	@dptr,a
                           6669 ;	Peephole 236.g	used r3 instead of ar3
   1A8F EB                 6670 	mov	a,r3
                           6671 ;	Peephole 236.b	used r5 instead of ar5
   1A90 3D                 6672 	addc	a,r5
   1A91 A3                 6673 	inc	dptr
   1A92 F0                 6674 	movx	@dptr,a
   1A93 02s1Br3C           6675 	ljmp	00122$
                           6676 ;	main4.c:778: case 'D': case 'd': num = num + exp*13; break;
   1A96                    6677 00114$:
                           6678 ;	genAssign
   1A96 90s00r8B           6679 	mov	dptr,#_get_data_exp_1_1
   1A99 E0                 6680 	movx	a,@dptr
   1A9A FA                 6681 	mov	r2,a
   1A9B A3                 6682 	inc	dptr
   1A9C E0                 6683 	movx	a,@dptr
   1A9D FB                 6684 	mov	r3,a
                           6685 ;	genAssign
   1A9E 90s00r00           6686 	mov	dptr,#__mulint_PARM_2
   1AA1 74 0D              6687 	mov	a,#0x0D
   1AA3 F0                 6688 	movx	@dptr,a
   1AA4 E4                 6689 	clr	a
   1AA5 A3                 6690 	inc	dptr
   1AA6 F0                 6691 	movx	@dptr,a
                           6692 ;	genCall
   1AA7 8A 82              6693 	mov	dpl,r2
   1AA9 8B 83              6694 	mov	dph,r3
   1AAB 12s00r00           6695 	lcall	__mulint
   1AAE AA 82              6696 	mov	r2,dpl
   1AB0 AB 83              6697 	mov	r3,dph
                           6698 ;	genAssign
   1AB2 90s00r89           6699 	mov	dptr,#_get_data_num_1_1
   1AB5 E0                 6700 	movx	a,@dptr
   1AB6 FC                 6701 	mov	r4,a
   1AB7 A3                 6702 	inc	dptr
   1AB8 E0                 6703 	movx	a,@dptr
   1AB9 FD                 6704 	mov	r5,a
                           6705 ;	genPlus
   1ABA 90s00r89           6706 	mov	dptr,#_get_data_num_1_1
                           6707 ;	Peephole 236.g	used r2 instead of ar2
   1ABD EA                 6708 	mov	a,r2
                           6709 ;	Peephole 236.a	used r4 instead of ar4
   1ABE 2C                 6710 	add	a,r4
   1ABF F0                 6711 	movx	@dptr,a
                           6712 ;	Peephole 236.g	used r3 instead of ar3
   1AC0 EB                 6713 	mov	a,r3
                           6714 ;	Peephole 236.b	used r5 instead of ar5
   1AC1 3D                 6715 	addc	a,r5
   1AC2 A3                 6716 	inc	dptr
   1AC3 F0                 6717 	movx	@dptr,a
   1AC4 02s1Br3C           6718 	ljmp	00122$
                           6719 ;	main4.c:779: case 'E': case 'e': num = num + exp*14; break;
   1AC7                    6720 00116$:
                           6721 ;	genAssign
   1AC7 90s00r8B           6722 	mov	dptr,#_get_data_exp_1_1
   1ACA E0                 6723 	movx	a,@dptr
   1ACB FA                 6724 	mov	r2,a
   1ACC A3                 6725 	inc	dptr
   1ACD E0                 6726 	movx	a,@dptr
   1ACE FB                 6727 	mov	r3,a
                           6728 ;	genAssign
   1ACF 90s00r00           6729 	mov	dptr,#__mulint_PARM_2
   1AD2 74 0E              6730 	mov	a,#0x0E
   1AD4 F0                 6731 	movx	@dptr,a
   1AD5 E4                 6732 	clr	a
   1AD6 A3                 6733 	inc	dptr
   1AD7 F0                 6734 	movx	@dptr,a
                           6735 ;	genCall
   1AD8 8A 82              6736 	mov	dpl,r2
   1ADA 8B 83              6737 	mov	dph,r3
   1ADC 12s00r00           6738 	lcall	__mulint
   1ADF AA 82              6739 	mov	r2,dpl
   1AE1 AB 83              6740 	mov	r3,dph
                           6741 ;	genAssign
   1AE3 90s00r89           6742 	mov	dptr,#_get_data_num_1_1
   1AE6 E0                 6743 	movx	a,@dptr
   1AE7 FC                 6744 	mov	r4,a
   1AE8 A3                 6745 	inc	dptr
   1AE9 E0                 6746 	movx	a,@dptr
   1AEA FD                 6747 	mov	r5,a
                           6748 ;	genPlus
   1AEB 90s00r89           6749 	mov	dptr,#_get_data_num_1_1
                           6750 ;	Peephole 236.g	used r2 instead of ar2
   1AEE EA                 6751 	mov	a,r2
                           6752 ;	Peephole 236.a	used r4 instead of ar4
   1AEF 2C                 6753 	add	a,r4
   1AF0 F0                 6754 	movx	@dptr,a
                           6755 ;	Peephole 236.g	used r3 instead of ar3
   1AF1 EB                 6756 	mov	a,r3
                           6757 ;	Peephole 236.b	used r5 instead of ar5
   1AF2 3D                 6758 	addc	a,r5
   1AF3 A3                 6759 	inc	dptr
   1AF4 F0                 6760 	movx	@dptr,a
                           6761 ;	main4.c:780: case 'F': case 'f': num = num + exp*15; break;
                           6762 ;	Peephole 112.b	changed ljmp to sjmp
   1AF5 80 45              6763 	sjmp	00122$
   1AF7                    6764 00118$:
                           6765 ;	genAssign
   1AF7 90s00r8B           6766 	mov	dptr,#_get_data_exp_1_1
   1AFA E0                 6767 	movx	a,@dptr
   1AFB FA                 6768 	mov	r2,a
   1AFC A3                 6769 	inc	dptr
   1AFD E0                 6770 	movx	a,@dptr
   1AFE FB                 6771 	mov	r3,a
                           6772 ;	genAssign
   1AFF 90s00r00           6773 	mov	dptr,#__mulint_PARM_2
   1B02 74 0F              6774 	mov	a,#0x0F
   1B04 F0                 6775 	movx	@dptr,a
   1B05 E4                 6776 	clr	a
   1B06 A3                 6777 	inc	dptr
   1B07 F0                 6778 	movx	@dptr,a
                           6779 ;	genCall
   1B08 8A 82              6780 	mov	dpl,r2
   1B0A 8B 83              6781 	mov	dph,r3
   1B0C 12s00r00           6782 	lcall	__mulint
   1B0F AA 82              6783 	mov	r2,dpl
   1B11 AB 83              6784 	mov	r3,dph
                           6785 ;	genAssign
   1B13 90s00r89           6786 	mov	dptr,#_get_data_num_1_1
   1B16 E0                 6787 	movx	a,@dptr
   1B17 FC                 6788 	mov	r4,a
   1B18 A3                 6789 	inc	dptr
   1B19 E0                 6790 	movx	a,@dptr
   1B1A FD                 6791 	mov	r5,a
                           6792 ;	genPlus
   1B1B 90s00r89           6793 	mov	dptr,#_get_data_num_1_1
                           6794 ;	Peephole 236.g	used r2 instead of ar2
   1B1E EA                 6795 	mov	a,r2
                           6796 ;	Peephole 236.a	used r4 instead of ar4
   1B1F 2C                 6797 	add	a,r4
   1B20 F0                 6798 	movx	@dptr,a
                           6799 ;	Peephole 236.g	used r3 instead of ar3
   1B21 EB                 6800 	mov	a,r3
                           6801 ;	Peephole 236.b	used r5 instead of ar5
   1B22 3D                 6802 	addc	a,r5
   1B23 A3                 6803 	inc	dptr
   1B24 F0                 6804 	movx	@dptr,a
                           6805 ;	main4.c:781: default:printf("\n\rInvalid Input"); break;
                           6806 ;	Peephole 112.b	changed ljmp to sjmp
   1B25 80 15              6807 	sjmp	00122$
   1B27                    6808 00119$:
                           6809 ;	genIpush
   1B27 74rC8              6810 	mov	a,#__str_9
   1B29 C0 E0              6811 	push	acc
   1B2B 74s01              6812 	mov	a,#(__str_9 >> 8)
   1B2D C0 E0              6813 	push	acc
   1B2F 74 80              6814 	mov	a,#0x80
   1B31 C0 E0              6815 	push	acc
                           6816 ;	genCall
   1B33 12s00r00           6817 	lcall	_printf
   1B36 15 81              6818 	dec	sp
   1B38 15 81              6819 	dec	sp
   1B3A 15 81              6820 	dec	sp
                           6821 ;	main4.c:782: }
   1B3C                    6822 00122$:
                           6823 ;	main4.c:784: if(dta[i] == '\r') //if user presses a Return key after a single Character entered
                           6824 ;	genAssign
   1B3C 90s00r87           6825 	mov	dptr,#_get_data_i_1_1
   1B3F E0                 6826 	movx	a,@dptr
   1B40 FA                 6827 	mov	r2,a
   1B41 A3                 6828 	inc	dptr
   1B42 E0                 6829 	movx	a,@dptr
   1B43 FB                 6830 	mov	r3,a
                           6831 ;	genPlus
                           6832 ;	Peephole 236.g	used r2 instead of ar2
   1B44 EA                 6833 	mov	a,r2
   1B45 24r8D              6834 	add	a,#_get_data_dta_1_1
   1B47 F5 82              6835 	mov	dpl,a
                           6836 ;	Peephole 236.g	used r3 instead of ar3
   1B49 EB                 6837 	mov	a,r3
   1B4A 34s00              6838 	addc	a,#(_get_data_dta_1_1 >> 8)
   1B4C F5 83              6839 	mov	dph,a
                           6840 ;	genPointerGet
                           6841 ;	genFarPointerGet
   1B4E E0                 6842 	movx	a,@dptr
   1B4F FA                 6843 	mov	r2,a
                           6844 ;	genCmpEq
                           6845 ;	gencjneshort
   1B50 BA 0D 02           6846 	cjne	r2,#0x0D,00221$
   1B53 80 03              6847 	sjmp	00222$
   1B55                    6848 00221$:
   1B55 02s1CrDA           6849 	ljmp	00156$
   1B58                    6850 00222$:
                           6851 ;	main4.c:786: i=0;
                           6852 ;	genAssign
   1B58 90s00r87           6853 	mov	dptr,#_get_data_i_1_1
   1B5B E4                 6854 	clr	a
   1B5C F0                 6855 	movx	@dptr,a
   1B5D A3                 6856 	inc	dptr
   1B5E F0                 6857 	movx	@dptr,a
                           6858 ;	main4.c:787: exp =1;
                           6859 ;	genAssign
   1B5F 90s00r8B           6860 	mov	dptr,#_get_data_exp_1_1
   1B62 74 01              6861 	mov	a,#0x01
   1B64 F0                 6862 	movx	@dptr,a
   1B65 E4                 6863 	clr	a
   1B66 A3                 6864 	inc	dptr
   1B67 F0                 6865 	movx	@dptr,a
                           6866 ;	main4.c:789: if(isdigit(dta[i]))    // if user entered a digiit convert to intiger
                           6867 ;	genPointerGet
                           6868 ;	genFarPointerGet
   1B68 90s00r8D           6869 	mov	dptr,#_get_data_dta_1_1
   1B6B E0                 6870 	movx	a,@dptr
                           6871 ;	genCall
   1B6C FA                 6872 	mov	r2,a
                           6873 ;	Peephole 244.c	loading dpl from a instead of r2
   1B6D F5 82              6874 	mov	dpl,a
   1B6F 12s00r00           6875 	lcall	_isdigit
   1B72 E5 82              6876 	mov	a,dpl
                           6877 ;	genIfx
                           6878 ;	genIfxJump
                           6879 ;	Peephole 108.c	removed ljmp by inverse jump logic
   1B74 60 23              6880 	jz	00125$
                           6881 ;	Peephole 300	removed redundant label 00223$
                           6882 ;	main4.c:791: num = num + (dta[i]-48)*exp;
                           6883 ;	genPointerGet
                           6884 ;	genFarPointerGet
   1B76 90s00r8D           6885 	mov	dptr,#_get_data_dta_1_1
   1B79 E0                 6886 	movx	a,@dptr
                           6887 ;	genCast
   1B7A FA                 6888 	mov	r2,a
                           6889 ;	Peephole 105	removed redundant mov
   1B7B 33                 6890 	rlc	a
   1B7C 95 E0              6891 	subb	a,acc
   1B7E FB                 6892 	mov	r3,a
                           6893 ;	genMinus
   1B7F EA                 6894 	mov	a,r2
   1B80 24 D0              6895 	add	a,#0xd0
   1B82 FA                 6896 	mov	r2,a
   1B83 EB                 6897 	mov	a,r3
   1B84 34 FF              6898 	addc	a,#0xff
   1B86 FB                 6899 	mov	r3,a
                           6900 ;	genAssign
   1B87 90s00r89           6901 	mov	dptr,#_get_data_num_1_1
   1B8A E0                 6902 	movx	a,@dptr
   1B8B FC                 6903 	mov	r4,a
   1B8C A3                 6904 	inc	dptr
   1B8D E0                 6905 	movx	a,@dptr
   1B8E FD                 6906 	mov	r5,a
                           6907 ;	genPlus
   1B8F 90s00r89           6908 	mov	dptr,#_get_data_num_1_1
                           6909 ;	Peephole 236.g	used r2 instead of ar2
   1B92 EA                 6910 	mov	a,r2
                           6911 ;	Peephole 236.a	used r4 instead of ar4
   1B93 2C                 6912 	add	a,r4
   1B94 F0                 6913 	movx	@dptr,a
                           6914 ;	Peephole 236.g	used r3 instead of ar3
   1B95 EB                 6915 	mov	a,r3
                           6916 ;	Peephole 236.b	used r5 instead of ar5
   1B96 3D                 6917 	addc	a,r5
   1B97 A3                 6918 	inc	dptr
   1B98 F0                 6919 	movx	@dptr,a
   1B99                    6920 00125$:
                           6921 ;	main4.c:794: if(isalpha(dta[i]))        //if user eneterd a character convert to intiger
                           6922 ;	genPointerGet
                           6923 ;	genFarPointerGet
   1B99 90s00r8D           6924 	mov	dptr,#_get_data_dta_1_1
   1B9C E0                 6925 	movx	a,@dptr
                           6926 ;	genCall
   1B9D FA                 6927 	mov	r2,a
                           6928 ;	Peephole 244.c	loading dpl from a instead of r2
   1B9E F5 82              6929 	mov	dpl,a
   1BA0 12s00r00           6930 	lcall	_isupper
   1BA3 E5 82              6931 	mov	a,dpl
                           6932 ;	genIfx
                           6933 ;	genIfxJump
                           6934 ;	Peephole 108.b	removed ljmp by inverse jump logic
   1BA5 70 11              6935 	jnz	00140$
                           6936 ;	Peephole 300	removed redundant label 00224$
                           6937 ;	genPointerGet
                           6938 ;	genFarPointerGet
   1BA7 90s00r8D           6939 	mov	dptr,#_get_data_dta_1_1
   1BAA E0                 6940 	movx	a,@dptr
                           6941 ;	genCall
   1BAB FA                 6942 	mov	r2,a
                           6943 ;	Peephole 244.c	loading dpl from a instead of r2
   1BAC F5 82              6944 	mov	dpl,a
   1BAE 12s00r00           6945 	lcall	_islower
   1BB1 E5 82              6946 	mov	a,dpl
                           6947 ;	genIfx
                           6948 ;	genIfxJump
   1BB3 70 03              6949 	jnz	00225$
   1BB5 02s1CrDA           6950 	ljmp	00156$
   1BB8                    6951 00225$:
   1BB8                    6952 00140$:
                           6953 ;	main4.c:796: c = dta[i];
                           6954 ;	genPointerGet
                           6955 ;	genFarPointerGet
   1BB8 90s00r8D           6956 	mov	dptr,#_get_data_dta_1_1
   1BBB E0                 6957 	movx	a,@dptr
                           6958 ;	genCast
   1BBC FA                 6959 	mov	r2,a
                           6960 ;	Peephole 105	removed redundant mov
   1BBD 33                 6961 	rlc	a
   1BBE 95 E0              6962 	subb	a,acc
   1BC0 FB                 6963 	mov	r3,a
                           6964 ;	main4.c:799: switch (c)             //cases for A through F for intiger conversion
                           6965 ;	genCmpEq
                           6966 ;	gencjneshort
   1BC1 BA 41 05           6967 	cjne	r2,#0x41,00226$
   1BC4 BB 00 02           6968 	cjne	r3,#0x00,00226$
                           6969 ;	Peephole 112.b	changed ljmp to sjmp
   1BC7 80 60              6970 	sjmp	00127$
   1BC9                    6971 00226$:
                           6972 ;	genCmpEq
                           6973 ;	gencjneshort
   1BC9 BA 42 05           6974 	cjne	r2,#0x42,00227$
   1BCC BB 00 02           6975 	cjne	r3,#0x00,00227$
                           6976 ;	Peephole 112.b	changed ljmp to sjmp
   1BCF 80 6E              6977 	sjmp	00129$
   1BD1                    6978 00227$:
                           6979 ;	genCmpEq
                           6980 ;	gencjneshort
   1BD1 BA 43 06           6981 	cjne	r2,#0x43,00228$
   1BD4 BB 00 03           6982 	cjne	r3,#0x00,00228$
   1BD7 02s1Cr55           6983 	ljmp	00131$
   1BDA                    6984 00228$:
                           6985 ;	genCmpEq
                           6986 ;	gencjneshort
   1BDA BA 44 06           6987 	cjne	r2,#0x44,00229$
   1BDD BB 00 03           6988 	cjne	r3,#0x00,00229$
   1BE0 02s1Cr6B           6989 	ljmp	00133$
   1BE3                    6990 00229$:
                           6991 ;	genCmpEq
                           6992 ;	gencjneshort
   1BE3 BA 45 06           6993 	cjne	r2,#0x45,00230$
   1BE6 BB 00 03           6994 	cjne	r3,#0x00,00230$
   1BE9 02s1Cr80           6995 	ljmp	00135$
   1BEC                    6996 00230$:
                           6997 ;	genCmpEq
                           6998 ;	gencjneshort
   1BEC BA 46 06           6999 	cjne	r2,#0x46,00231$
   1BEF BB 00 03           7000 	cjne	r3,#0x00,00231$
   1BF2 02s1Cr95           7001 	ljmp	00137$
   1BF5                    7002 00231$:
                           7003 ;	genCmpEq
                           7004 ;	gencjneshort
   1BF5 BA 61 05           7005 	cjne	r2,#0x61,00232$
   1BF8 BB 00 02           7006 	cjne	r3,#0x00,00232$
                           7007 ;	Peephole 112.b	changed ljmp to sjmp
   1BFB 80 2C              7008 	sjmp	00127$
   1BFD                    7009 00232$:
                           7010 ;	genCmpEq
                           7011 ;	gencjneshort
   1BFD BA 62 05           7012 	cjne	r2,#0x62,00233$
   1C00 BB 00 02           7013 	cjne	r3,#0x00,00233$
                           7014 ;	Peephole 112.b	changed ljmp to sjmp
   1C03 80 3A              7015 	sjmp	00129$
   1C05                    7016 00233$:
                           7017 ;	genCmpEq
                           7018 ;	gencjneshort
   1C05 BA 63 05           7019 	cjne	r2,#0x63,00234$
   1C08 BB 00 02           7020 	cjne	r3,#0x00,00234$
                           7021 ;	Peephole 112.b	changed ljmp to sjmp
   1C0B 80 48              7022 	sjmp	00131$
   1C0D                    7023 00234$:
                           7024 ;	genCmpEq
                           7025 ;	gencjneshort
   1C0D BA 64 05           7026 	cjne	r2,#0x64,00235$
   1C10 BB 00 02           7027 	cjne	r3,#0x00,00235$
                           7028 ;	Peephole 112.b	changed ljmp to sjmp
   1C13 80 56              7029 	sjmp	00133$
   1C15                    7030 00235$:
                           7031 ;	genCmpEq
                           7032 ;	gencjneshort
   1C15 BA 65 05           7033 	cjne	r2,#0x65,00236$
   1C18 BB 00 02           7034 	cjne	r3,#0x00,00236$
                           7035 ;	Peephole 112.b	changed ljmp to sjmp
   1C1B 80 63              7036 	sjmp	00135$
   1C1D                    7037 00236$:
                           7038 ;	genCmpEq
                           7039 ;	gencjneshort
   1C1D BA 66 06           7040 	cjne	r2,#0x66,00237$
   1C20 BB 00 03           7041 	cjne	r3,#0x00,00237$
   1C23 02s1Cr95           7042 	ljmp	00137$
   1C26                    7043 00237$:
   1C26 02s1CrAA           7044 	ljmp	00138$
                           7045 ;	main4.c:802: case 'A': case 'a': num = num + exp*10; break;
   1C29                    7046 00127$:
                           7047 ;	genAssign
   1C29 90s00r89           7048 	mov	dptr,#_get_data_num_1_1
   1C2C E0                 7049 	movx	a,@dptr
   1C2D FA                 7050 	mov	r2,a
   1C2E A3                 7051 	inc	dptr
   1C2F E0                 7052 	movx	a,@dptr
   1C30 FB                 7053 	mov	r3,a
                           7054 ;	genPlus
   1C31 90s00r89           7055 	mov	dptr,#_get_data_num_1_1
                           7056 ;     genPlusIncr
   1C34 74 0A              7057 	mov	a,#0x0A
                           7058 ;	Peephole 236.a	used r2 instead of ar2
   1C36 2A                 7059 	add	a,r2
   1C37 F0                 7060 	movx	@dptr,a
                           7061 ;	Peephole 181	changed mov to clr
   1C38 E4                 7062 	clr	a
                           7063 ;	Peephole 236.b	used r3 instead of ar3
   1C39 3B                 7064 	addc	a,r3
   1C3A A3                 7065 	inc	dptr
   1C3B F0                 7066 	movx	@dptr,a
   1C3C 02s1CrDA           7067 	ljmp	00156$
                           7068 ;	main4.c:803: case 'B': case 'b': num = num + exp*11; break;
   1C3F                    7069 00129$:
                           7070 ;	genAssign
   1C3F 90s00r89           7071 	mov	dptr,#_get_data_num_1_1
   1C42 E0                 7072 	movx	a,@dptr
   1C43 FA                 7073 	mov	r2,a
   1C44 A3                 7074 	inc	dptr
   1C45 E0                 7075 	movx	a,@dptr
   1C46 FB                 7076 	mov	r3,a
                           7077 ;	genPlus
   1C47 90s00r89           7078 	mov	dptr,#_get_data_num_1_1
                           7079 ;     genPlusIncr
   1C4A 74 0B              7080 	mov	a,#0x0B
                           7081 ;	Peephole 236.a	used r2 instead of ar2
   1C4C 2A                 7082 	add	a,r2
   1C4D F0                 7083 	movx	@dptr,a
                           7084 ;	Peephole 181	changed mov to clr
   1C4E E4                 7085 	clr	a
                           7086 ;	Peephole 236.b	used r3 instead of ar3
   1C4F 3B                 7087 	addc	a,r3
   1C50 A3                 7088 	inc	dptr
   1C51 F0                 7089 	movx	@dptr,a
   1C52 02s1CrDA           7090 	ljmp	00156$
                           7091 ;	main4.c:804: case 'C': case 'c': num = num + exp*12; break;
   1C55                    7092 00131$:
                           7093 ;	genAssign
   1C55 90s00r89           7094 	mov	dptr,#_get_data_num_1_1
   1C58 E0                 7095 	movx	a,@dptr
   1C59 FA                 7096 	mov	r2,a
   1C5A A3                 7097 	inc	dptr
   1C5B E0                 7098 	movx	a,@dptr
   1C5C FB                 7099 	mov	r3,a
                           7100 ;	genPlus
   1C5D 90s00r89           7101 	mov	dptr,#_get_data_num_1_1
                           7102 ;     genPlusIncr
   1C60 74 0C              7103 	mov	a,#0x0C
                           7104 ;	Peephole 236.a	used r2 instead of ar2
   1C62 2A                 7105 	add	a,r2
   1C63 F0                 7106 	movx	@dptr,a
                           7107 ;	Peephole 181	changed mov to clr
   1C64 E4                 7108 	clr	a
                           7109 ;	Peephole 236.b	used r3 instead of ar3
   1C65 3B                 7110 	addc	a,r3
   1C66 A3                 7111 	inc	dptr
   1C67 F0                 7112 	movx	@dptr,a
   1C68 02s1CrDA           7113 	ljmp	00156$
                           7114 ;	main4.c:805: case 'D': case 'd': num = num + exp*13; break;
   1C6B                    7115 00133$:
                           7116 ;	genAssign
   1C6B 90s00r89           7117 	mov	dptr,#_get_data_num_1_1
   1C6E E0                 7118 	movx	a,@dptr
   1C6F FA                 7119 	mov	r2,a
   1C70 A3                 7120 	inc	dptr
   1C71 E0                 7121 	movx	a,@dptr
   1C72 FB                 7122 	mov	r3,a
                           7123 ;	genPlus
   1C73 90s00r89           7124 	mov	dptr,#_get_data_num_1_1
                           7125 ;     genPlusIncr
   1C76 74 0D              7126 	mov	a,#0x0D
                           7127 ;	Peephole 236.a	used r2 instead of ar2
   1C78 2A                 7128 	add	a,r2
   1C79 F0                 7129 	movx	@dptr,a
                           7130 ;	Peephole 181	changed mov to clr
   1C7A E4                 7131 	clr	a
                           7132 ;	Peephole 236.b	used r3 instead of ar3
   1C7B 3B                 7133 	addc	a,r3
   1C7C A3                 7134 	inc	dptr
   1C7D F0                 7135 	movx	@dptr,a
                           7136 ;	main4.c:806: case 'E': case 'e': num = num + exp*14; break;
                           7137 ;	Peephole 112.b	changed ljmp to sjmp
   1C7E 80 5A              7138 	sjmp	00156$
   1C80                    7139 00135$:
                           7140 ;	genAssign
   1C80 90s00r89           7141 	mov	dptr,#_get_data_num_1_1
   1C83 E0                 7142 	movx	a,@dptr
   1C84 FA                 7143 	mov	r2,a
   1C85 A3                 7144 	inc	dptr
   1C86 E0                 7145 	movx	a,@dptr
   1C87 FB                 7146 	mov	r3,a
                           7147 ;	genPlus
   1C88 90s00r89           7148 	mov	dptr,#_get_data_num_1_1
                           7149 ;     genPlusIncr
   1C8B 74 0E              7150 	mov	a,#0x0E
                           7151 ;	Peephole 236.a	used r2 instead of ar2
   1C8D 2A                 7152 	add	a,r2
   1C8E F0                 7153 	movx	@dptr,a
                           7154 ;	Peephole 181	changed mov to clr
   1C8F E4                 7155 	clr	a
                           7156 ;	Peephole 236.b	used r3 instead of ar3
   1C90 3B                 7157 	addc	a,r3
   1C91 A3                 7158 	inc	dptr
   1C92 F0                 7159 	movx	@dptr,a
                           7160 ;	main4.c:807: case 'F': case 'f': num = num + exp*15; break;
                           7161 ;	Peephole 112.b	changed ljmp to sjmp
   1C93 80 45              7162 	sjmp	00156$
   1C95                    7163 00137$:
                           7164 ;	genAssign
   1C95 90s00r89           7165 	mov	dptr,#_get_data_num_1_1
   1C98 E0                 7166 	movx	a,@dptr
   1C99 FA                 7167 	mov	r2,a
   1C9A A3                 7168 	inc	dptr
   1C9B E0                 7169 	movx	a,@dptr
   1C9C FB                 7170 	mov	r3,a
                           7171 ;	genPlus
   1C9D 90s00r89           7172 	mov	dptr,#_get_data_num_1_1
                           7173 ;     genPlusIncr
   1CA0 74 0F              7174 	mov	a,#0x0F
                           7175 ;	Peephole 236.a	used r2 instead of ar2
   1CA2 2A                 7176 	add	a,r2
   1CA3 F0                 7177 	movx	@dptr,a
                           7178 ;	Peephole 181	changed mov to clr
   1CA4 E4                 7179 	clr	a
                           7180 ;	Peephole 236.b	used r3 instead of ar3
   1CA5 3B                 7181 	addc	a,r3
   1CA6 A3                 7182 	inc	dptr
   1CA7 F0                 7183 	movx	@dptr,a
                           7184 ;	main4.c:808: default:printf("\n\rInvalid Input"); break;
                           7185 ;	Peephole 112.b	changed ljmp to sjmp
   1CA8 80 30              7186 	sjmp	00156$
   1CAA                    7187 00138$:
                           7188 ;	genIpush
   1CAA 74rC8              7189 	mov	a,#__str_9
   1CAC C0 E0              7190 	push	acc
   1CAE 74s01              7191 	mov	a,#(__str_9 >> 8)
   1CB0 C0 E0              7192 	push	acc
   1CB2 74 80              7193 	mov	a,#0x80
   1CB4 C0 E0              7194 	push	acc
                           7195 ;	genCall
   1CB6 12s00r00           7196 	lcall	_printf
   1CB9 15 81              7197 	dec	sp
   1CBB 15 81              7198 	dec	sp
   1CBD 15 81              7199 	dec	sp
                           7200 ;	main4.c:809: }
                           7201 ;	Peephole 112.b	changed ljmp to sjmp
   1CBF 80 19              7202 	sjmp	00156$
   1CC1                    7203 00146$:
                           7204 ;	main4.c:816: printf("\n\n\rInvalid Input. ");
                           7205 ;	genIpush
   1CC1 74r27              7206 	mov	a,#__str_87
   1CC3 C0 E0              7207 	push	acc
   1CC5 74s0E              7208 	mov	a,#(__str_87 >> 8)
   1CC7 C0 E0              7209 	push	acc
   1CC9 74 80              7210 	mov	a,#0x80
   1CCB C0 E0              7211 	push	acc
                           7212 ;	genCall
   1CCD 12s00r00           7213 	lcall	_printf
   1CD0 15 81              7214 	dec	sp
   1CD2 15 81              7215 	dec	sp
   1CD4 15 81              7216 	dec	sp
                           7217 ;	main4.c:817: return(-1);
                           7218 ;	genRet
                           7219 ;	Peephole 182.b	used 16 bit load of dptr
   1CD6 90 FF FF           7220 	mov	dptr,#0xFFFF
                           7221 ;	Peephole 112.b	changed ljmp to sjmp
                           7222 ;	Peephole 251.b	replaced sjmp to ret with ret
   1CD9 22                 7223 	ret
   1CDA                    7224 00156$:
                           7225 ;	main4.c:753: for(i=0;i<2;i++)        //get two data characters
                           7226 ;	genAssign
   1CDA 90s00r87           7227 	mov	dptr,#_get_data_i_1_1
   1CDD E0                 7228 	movx	a,@dptr
   1CDE FA                 7229 	mov	r2,a
   1CDF A3                 7230 	inc	dptr
   1CE0 E0                 7231 	movx	a,@dptr
   1CE1 FB                 7232 	mov	r3,a
                           7233 ;	genPlus
   1CE2 90s00r87           7234 	mov	dptr,#_get_data_i_1_1
                           7235 ;     genPlusIncr
   1CE5 74 01              7236 	mov	a,#0x01
                           7237 ;	Peephole 236.a	used r2 instead of ar2
   1CE7 2A                 7238 	add	a,r2
   1CE8 F0                 7239 	movx	@dptr,a
                           7240 ;	Peephole 181	changed mov to clr
   1CE9 E4                 7241 	clr	a
                           7242 ;	Peephole 236.b	used r3 instead of ar3
   1CEA 3B                 7243 	addc	a,r3
   1CEB A3                 7244 	inc	dptr
   1CEC F0                 7245 	movx	@dptr,a
   1CED 02s18r57           7246 	ljmp	00154$
   1CF0                    7247 00157$:
                           7248 ;	main4.c:820: return(num);
                           7249 ;	genAssign
   1CF0 90s00r89           7250 	mov	dptr,#_get_data_num_1_1
   1CF3 E0                 7251 	movx	a,@dptr
   1CF4 FA                 7252 	mov	r2,a
   1CF5 A3                 7253 	inc	dptr
   1CF6 E0                 7254 	movx	a,@dptr
                           7255 ;	genRet
                           7256 ;	Peephole 234.b	loading dph directly from a(ccumulator), r3 not set
   1CF7 8A 82              7257 	mov	dpl,r2
   1CF9 F5 83              7258 	mov	dph,a
                           7259 ;	Peephole 300	removed redundant label 00158$
   1CFB 22                 7260 	ret
                           7261 ;------------------------------------------------------------
                           7262 ;Allocation info for local variables in function 'disp_4bytes'
                           7263 ;------------------------------------------------------------
                           7264 ;startadd                  Allocated with name '_disp_4bytes_startadd_1_1'
                           7265 ;i                         Allocated with name '_disp_4bytes_i_1_1'
                           7266 ;j                         Allocated with name '_disp_4bytes_j_1_1'
                           7267 ;ten                       Allocated with name '_disp_4bytes_ten_1_1'
                           7268 ;one                       Allocated with name '_disp_4bytes_one_1_1'
                           7269 ;a                         Allocated with name '_disp_4bytes_a_1_1'
                           7270 ;b                         Allocated with name '_disp_4bytes_b_1_1'
                           7271 ;c                         Allocated with name '_disp_4bytes_c_1_1'
                           7272 ;p                         Allocated with name '_disp_4bytes_p_1_1'
                           7273 ;q                         Allocated with name '_disp_4bytes_q_1_1'
                           7274 ;r                         Allocated with name '_disp_4bytes_r_1_1'
                           7275 ;s                         Allocated with name '_disp_4bytes_s_1_1'
                           7276 ;t                         Allocated with name '_disp_4bytes_t_1_1'
                           7277 ;rddata                    Allocated with name '_disp_4bytes_rddata_1_1'
                           7278 ;------------------------------------------------------------
                           7279 ;	main4.c:830: void disp_4bytes(int startadd)
                           7280 ;	-----------------------------------------
                           7281 ;	 function disp_4bytes
                           7282 ;	-----------------------------------------
   1CFC                    7283 _disp_4bytes:
                           7284 ;	genReceive
   1CFC AA 83              7285 	mov	r2,dph
   1CFE E5 82              7286 	mov	a,dpl
   1D00 90s00r8F           7287 	mov	dptr,#_disp_4bytes_startadd_1_1
   1D03 F0                 7288 	movx	@dptr,a
   1D04 A3                 7289 	inc	dptr
   1D05 EA                 7290 	mov	a,r2
   1D06 F0                 7291 	movx	@dptr,a
                           7292 ;	main4.c:836: for(i=0;i<4;i++)
                           7293 ;	genAssign
   1D07 90s00r8F           7294 	mov	dptr,#_disp_4bytes_startadd_1_1
   1D0A E0                 7295 	movx	a,@dptr
   1D0B FA                 7296 	mov	r2,a
   1D0C A3                 7297 	inc	dptr
   1D0D E0                 7298 	movx	a,@dptr
   1D0E FB                 7299 	mov	r3,a
                           7300 ;	genAssign
   1D0F 7C 00              7301 	mov	r4,#0x00
   1D11 7D 00              7302 	mov	r5,#0x00
   1D13                    7303 00164$:
                           7304 ;	genCmpLt
                           7305 ;	genCmp
   1D13 C3                 7306 	clr	c
   1D14 EC                 7307 	mov	a,r4
   1D15 94 04              7308 	subb	a,#0x04
   1D17 ED                 7309 	mov	a,r5
   1D18 64 80              7310 	xrl	a,#0x80
   1D1A 94 80              7311 	subb	a,#0x80
                           7312 ;	genIfxJump
   1D1C 40 03              7313 	jc	00212$
   1D1E 02s26rE2           7314 	ljmp	00211$
   1D21                    7315 00212$:
                           7316 ;	main4.c:840: a = startadd/256;
                           7317 ;	genAssign
   1D21 90s00r00           7318 	mov	dptr,#__divsint_PARM_2
                           7319 ;	Peephole 181	changed mov to clr
   1D24 E4                 7320 	clr	a
   1D25 F0                 7321 	movx	@dptr,a
   1D26 A3                 7322 	inc	dptr
   1D27 74 01              7323 	mov	a,#0x01
   1D29 F0                 7324 	movx	@dptr,a
                           7325 ;	main4.c:841: b = (startadd%256)/16;
                           7326 ;	genCall
   1D2A 8A 82              7327 	mov	dpl,r2
   1D2C 8B 83              7328 	mov	dph,r3
   1D2E C0 02              7329 	push	ar2
   1D30 C0 03              7330 	push	ar3
   1D32 C0 04              7331 	push	ar4
   1D34 C0 05              7332 	push	ar5
   1D36 12s00r00           7333 	lcall	__divsint
   1D39 AE 82              7334 	mov	r6,dpl
   1D3B AF 83              7335 	mov	r7,dph
   1D3D D0 05              7336 	pop	ar5
   1D3F D0 04              7337 	pop	ar4
   1D41 D0 03              7338 	pop	ar3
   1D43 D0 02              7339 	pop	ar2
                           7340 ;	genAssign
   1D45 90s00r00           7341 	mov	dptr,#__modsint_PARM_2
                           7342 ;	Peephole 181	changed mov to clr
   1D48 E4                 7343 	clr	a
   1D49 F0                 7344 	movx	@dptr,a
   1D4A A3                 7345 	inc	dptr
   1D4B 74 01              7346 	mov	a,#0x01
   1D4D F0                 7347 	movx	@dptr,a
                           7348 ;	genCall
   1D4E 8A 82              7349 	mov	dpl,r2
   1D50 8B 83              7350 	mov	dph,r3
   1D52 C0 02              7351 	push	ar2
   1D54 C0 03              7352 	push	ar3
   1D56 C0 04              7353 	push	ar4
   1D58 C0 05              7354 	push	ar5
   1D5A C0 06              7355 	push	ar6
   1D5C C0 07              7356 	push	ar7
   1D5E 12s00r00           7357 	lcall	__modsint
   1D61 A8 82              7358 	mov	r0,dpl
   1D63 A9 83              7359 	mov	r1,dph
   1D65 D0 07              7360 	pop	ar7
   1D67 D0 06              7361 	pop	ar6
   1D69 D0 05              7362 	pop	ar5
   1D6B D0 04              7363 	pop	ar4
   1D6D D0 03              7364 	pop	ar3
   1D6F D0 02              7365 	pop	ar2
                           7366 ;	genAssign
   1D71 90s00r00           7367 	mov	dptr,#__divsint_PARM_2
   1D74 74 10              7368 	mov	a,#0x10
   1D76 F0                 7369 	movx	@dptr,a
   1D77 E4                 7370 	clr	a
   1D78 A3                 7371 	inc	dptr
   1D79 F0                 7372 	movx	@dptr,a
                           7373 ;	genCall
   1D7A 88 82              7374 	mov	dpl,r0
   1D7C 89 83              7375 	mov	dph,r1
   1D7E C0 02              7376 	push	ar2
   1D80 C0 03              7377 	push	ar3
   1D82 C0 04              7378 	push	ar4
   1D84 C0 05              7379 	push	ar5
   1D86 C0 06              7380 	push	ar6
   1D88 C0 07              7381 	push	ar7
   1D8A C0 00              7382 	push	ar0
   1D8C C0 01              7383 	push	ar1
   1D8E 12s00r00           7384 	lcall	__divsint
   1D91 E5 82              7385 	mov	a,dpl
   1D93 85 83 F0           7386 	mov	b,dph
   1D96 D0 01              7387 	pop	ar1
   1D98 D0 00              7388 	pop	ar0
   1D9A D0 07              7389 	pop	ar7
   1D9C D0 06              7390 	pop	ar6
   1D9E D0 05              7391 	pop	ar5
   1DA0 D0 04              7392 	pop	ar4
   1DA2 D0 03              7393 	pop	ar3
   1DA4 D0 02              7394 	pop	ar2
                           7395 ;	genAssign
   1DA6 90s00r91           7396 	mov	dptr,#_disp_4bytes_b_1_1
   1DA9 F0                 7397 	movx	@dptr,a
   1DAA A3                 7398 	inc	dptr
   1DAB E5 F0              7399 	mov	a,b
   1DAD F0                 7400 	movx	@dptr,a
                           7401 ;	main4.c:842: c = (startadd%256)%16;
                           7402 ;	genAssign
   1DAE 90s00r00           7403 	mov	dptr,#__modsint_PARM_2
   1DB1 74 10              7404 	mov	a,#0x10
   1DB3 F0                 7405 	movx	@dptr,a
   1DB4 E4                 7406 	clr	a
   1DB5 A3                 7407 	inc	dptr
   1DB6 F0                 7408 	movx	@dptr,a
                           7409 ;	genCall
   1DB7 88 82              7410 	mov	dpl,r0
   1DB9 89 83              7411 	mov	dph,r1
   1DBB C0 02              7412 	push	ar2
   1DBD C0 03              7413 	push	ar3
   1DBF C0 04              7414 	push	ar4
   1DC1 C0 05              7415 	push	ar5
   1DC3 C0 06              7416 	push	ar6
   1DC5 C0 07              7417 	push	ar7
   1DC7 12s00r00           7418 	lcall	__modsint
   1DCA E5 82              7419 	mov	a,dpl
   1DCC 85 83 F0           7420 	mov	b,dph
   1DCF D0 07              7421 	pop	ar7
   1DD1 D0 06              7422 	pop	ar6
   1DD3 D0 05              7423 	pop	ar5
   1DD5 D0 04              7424 	pop	ar4
   1DD7 D0 03              7425 	pop	ar3
   1DD9 D0 02              7426 	pop	ar2
                           7427 ;	genAssign
   1DDB 90s00r93           7428 	mov	dptr,#_disp_4bytes_c_1_1
   1DDE F0                 7429 	movx	@dptr,a
   1DDF A3                 7430 	inc	dptr
   1DE0 E5 F0              7431 	mov	a,b
   1DE2 F0                 7432 	movx	@dptr,a
                           7433 ;	main4.c:844: if(a>9)        //printing charaters for HEX display
                           7434 ;	genCmpGt
                           7435 ;	genCmp
   1DE3 C3                 7436 	clr	c
   1DE4 74 09              7437 	mov	a,#0x09
   1DE6 9E                 7438 	subb	a,r6
                           7439 ;	Peephole 159	avoided xrl during execution
   1DE7 74 80              7440 	mov	a,#(0x00 ^ 0x80)
   1DE9 8F F0              7441 	mov	b,r7
   1DEB 63 F0 80           7442 	xrl	b,#0x80
   1DEE 95 F0              7443 	subb	a,b
                           7444 ;	genIfxJump
                           7445 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1DF0 50 68              7446 	jnc	00110$
                           7447 ;	Peephole 300	removed redundant label 00213$
                           7448 ;	main4.c:846: switch(a)
                           7449 ;	genCmpEq
                           7450 ;	gencjneshort
   1DF2 BE 0A 05           7451 	cjne	r6,#0x0A,00214$
   1DF5 BF 00 02           7452 	cjne	r7,#0x00,00214$
                           7453 ;	Peephole 112.b	changed ljmp to sjmp
   1DF8 80 28              7454 	sjmp	00101$
   1DFA                    7455 00214$:
                           7456 ;	genCmpEq
                           7457 ;	gencjneshort
   1DFA BE 0B 05           7458 	cjne	r6,#0x0B,00215$
   1DFD BF 00 02           7459 	cjne	r7,#0x00,00215$
                           7460 ;	Peephole 112.b	changed ljmp to sjmp
   1E00 80 28              7461 	sjmp	00102$
   1E02                    7462 00215$:
                           7463 ;	genCmpEq
                           7464 ;	gencjneshort
   1E02 BE 0C 05           7465 	cjne	r6,#0x0C,00216$
   1E05 BF 00 02           7466 	cjne	r7,#0x00,00216$
                           7467 ;	Peephole 112.b	changed ljmp to sjmp
   1E08 80 28              7468 	sjmp	00103$
   1E0A                    7469 00216$:
                           7470 ;	genCmpEq
                           7471 ;	gencjneshort
   1E0A BE 0D 05           7472 	cjne	r6,#0x0D,00217$
   1E0D BF 00 02           7473 	cjne	r7,#0x00,00217$
                           7474 ;	Peephole 112.b	changed ljmp to sjmp
   1E10 80 28              7475 	sjmp	00104$
   1E12                    7476 00217$:
                           7477 ;	genCmpEq
                           7478 ;	gencjneshort
   1E12 BE 0E 05           7479 	cjne	r6,#0x0E,00218$
   1E15 BF 00 02           7480 	cjne	r7,#0x00,00218$
                           7481 ;	Peephole 112.b	changed ljmp to sjmp
   1E18 80 28              7482 	sjmp	00105$
   1E1A                    7483 00218$:
                           7484 ;	genCmpEq
                           7485 ;	gencjneshort
                           7486 ;	Peephole 112.b	changed ljmp to sjmp
                           7487 ;	main4.c:848: case 10: p='A'; break;
                           7488 ;	Peephole 112.b	changed ljmp to sjmp
                           7489 ;	Peephole 198.a	optimized misc jump sequence
   1E1A BE 0F 35           7490 	cjne	r6,#0x0F,00107$
   1E1D BF 00 32           7491 	cjne	r7,#0x00,00107$
   1E20 80 28              7492 	sjmp	00106$
                           7493 ;	Peephole 300	removed redundant label 00219$
   1E22                    7494 00101$:
                           7495 ;	genAssign
   1E22 90s00r95           7496 	mov	dptr,#_disp_4bytes_p_1_1
   1E25 74 41              7497 	mov	a,#0x41
   1E27 F0                 7498 	movx	@dptr,a
                           7499 ;	main4.c:849: case 11: p='B'; break;
                           7500 ;	Peephole 112.b	changed ljmp to sjmp
   1E28 80 37              7501 	sjmp	00111$
   1E2A                    7502 00102$:
                           7503 ;	genAssign
   1E2A 90s00r95           7504 	mov	dptr,#_disp_4bytes_p_1_1
   1E2D 74 42              7505 	mov	a,#0x42
   1E2F F0                 7506 	movx	@dptr,a
                           7507 ;	main4.c:850: case 12: p='C'; break;
                           7508 ;	Peephole 112.b	changed ljmp to sjmp
   1E30 80 2F              7509 	sjmp	00111$
   1E32                    7510 00103$:
                           7511 ;	genAssign
   1E32 90s00r95           7512 	mov	dptr,#_disp_4bytes_p_1_1
   1E35 74 43              7513 	mov	a,#0x43
   1E37 F0                 7514 	movx	@dptr,a
                           7515 ;	main4.c:851: case 13: p='D'; break;
                           7516 ;	Peephole 112.b	changed ljmp to sjmp
   1E38 80 27              7517 	sjmp	00111$
   1E3A                    7518 00104$:
                           7519 ;	genAssign
   1E3A 90s00r95           7520 	mov	dptr,#_disp_4bytes_p_1_1
   1E3D 74 44              7521 	mov	a,#0x44
   1E3F F0                 7522 	movx	@dptr,a
                           7523 ;	main4.c:852: case 14: p='E'; break;
                           7524 ;	Peephole 112.b	changed ljmp to sjmp
   1E40 80 1F              7525 	sjmp	00111$
   1E42                    7526 00105$:
                           7527 ;	genAssign
   1E42 90s00r95           7528 	mov	dptr,#_disp_4bytes_p_1_1
   1E45 74 45              7529 	mov	a,#0x45
   1E47 F0                 7530 	movx	@dptr,a
                           7531 ;	main4.c:853: case 15: p='F'; break;
                           7532 ;	Peephole 112.b	changed ljmp to sjmp
   1E48 80 17              7533 	sjmp	00111$
   1E4A                    7534 00106$:
                           7535 ;	genAssign
   1E4A 90s00r95           7536 	mov	dptr,#_disp_4bytes_p_1_1
   1E4D 74 46              7537 	mov	a,#0x46
   1E4F F0                 7538 	movx	@dptr,a
                           7539 ;	main4.c:854: default: p='?'; break;
                           7540 ;	Peephole 112.b	changed ljmp to sjmp
   1E50 80 0F              7541 	sjmp	00111$
   1E52                    7542 00107$:
                           7543 ;	genAssign
   1E52 90s00r95           7544 	mov	dptr,#_disp_4bytes_p_1_1
   1E55 74 3F              7545 	mov	a,#0x3F
   1E57 F0                 7546 	movx	@dptr,a
                           7547 ;	main4.c:855: }
                           7548 ;	Peephole 112.b	changed ljmp to sjmp
   1E58 80 07              7549 	sjmp	00111$
   1E5A                    7550 00110$:
                           7551 ;	main4.c:857: else{ p=(a+48);}       //converting to DECIMAL charaacter
                           7552 ;	genCast
                           7553 ;	genPlus
   1E5A 90s00r95           7554 	mov	dptr,#_disp_4bytes_p_1_1
                           7555 ;     genPlusIncr
   1E5D 74 30              7556 	mov	a,#0x30
                           7557 ;	Peephole 236.a	used r6 instead of ar6
   1E5F 2E                 7558 	add	a,r6
   1E60 F0                 7559 	movx	@dptr,a
   1E61                    7560 00111$:
                           7561 ;	main4.c:858: if(b>9)                //conveting to character for HeX display
                           7562 ;	genAssign
   1E61 90s00r91           7563 	mov	dptr,#_disp_4bytes_b_1_1
   1E64 E0                 7564 	movx	a,@dptr
   1E65 FE                 7565 	mov	r6,a
   1E66 A3                 7566 	inc	dptr
   1E67 E0                 7567 	movx	a,@dptr
   1E68 FF                 7568 	mov	r7,a
                           7569 ;	genCmpGt
                           7570 ;	genCmp
   1E69 C3                 7571 	clr	c
   1E6A 74 09              7572 	mov	a,#0x09
   1E6C 9E                 7573 	subb	a,r6
                           7574 ;	Peephole 159	avoided xrl during execution
   1E6D 74 80              7575 	mov	a,#(0x00 ^ 0x80)
   1E6F 8F F0              7576 	mov	b,r7
   1E71 63 F0 80           7577 	xrl	b,#0x80
   1E74 95 F0              7578 	subb	a,b
                           7579 ;	genIfxJump
                           7580 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1E76 50 68              7581 	jnc	00121$
                           7582 ;	Peephole 300	removed redundant label 00220$
                           7583 ;	main4.c:860: switch(b)
                           7584 ;	genCmpEq
                           7585 ;	gencjneshort
   1E78 BE 0A 05           7586 	cjne	r6,#0x0A,00221$
   1E7B BF 00 02           7587 	cjne	r7,#0x00,00221$
                           7588 ;	Peephole 112.b	changed ljmp to sjmp
   1E7E 80 28              7589 	sjmp	00112$
   1E80                    7590 00221$:
                           7591 ;	genCmpEq
                           7592 ;	gencjneshort
   1E80 BE 0B 05           7593 	cjne	r6,#0x0B,00222$
   1E83 BF 00 02           7594 	cjne	r7,#0x00,00222$
                           7595 ;	Peephole 112.b	changed ljmp to sjmp
   1E86 80 28              7596 	sjmp	00113$
   1E88                    7597 00222$:
                           7598 ;	genCmpEq
                           7599 ;	gencjneshort
   1E88 BE 0C 05           7600 	cjne	r6,#0x0C,00223$
   1E8B BF 00 02           7601 	cjne	r7,#0x00,00223$
                           7602 ;	Peephole 112.b	changed ljmp to sjmp
   1E8E 80 28              7603 	sjmp	00114$
   1E90                    7604 00223$:
                           7605 ;	genCmpEq
                           7606 ;	gencjneshort
   1E90 BE 0D 05           7607 	cjne	r6,#0x0D,00224$
   1E93 BF 00 02           7608 	cjne	r7,#0x00,00224$
                           7609 ;	Peephole 112.b	changed ljmp to sjmp
   1E96 80 28              7610 	sjmp	00115$
   1E98                    7611 00224$:
                           7612 ;	genCmpEq
                           7613 ;	gencjneshort
   1E98 BE 0E 05           7614 	cjne	r6,#0x0E,00225$
   1E9B BF 00 02           7615 	cjne	r7,#0x00,00225$
                           7616 ;	Peephole 112.b	changed ljmp to sjmp
   1E9E 80 28              7617 	sjmp	00116$
   1EA0                    7618 00225$:
                           7619 ;	genCmpEq
                           7620 ;	gencjneshort
                           7621 ;	Peephole 112.b	changed ljmp to sjmp
                           7622 ;	main4.c:862: case 10: q='A'; break;
                           7623 ;	Peephole 112.b	changed ljmp to sjmp
                           7624 ;	Peephole 198.a	optimized misc jump sequence
   1EA0 BE 0F 35           7625 	cjne	r6,#0x0F,00118$
   1EA3 BF 00 32           7626 	cjne	r7,#0x00,00118$
   1EA6 80 28              7627 	sjmp	00117$
                           7628 ;	Peephole 300	removed redundant label 00226$
   1EA8                    7629 00112$:
                           7630 ;	genAssign
   1EA8 90s00r96           7631 	mov	dptr,#_disp_4bytes_q_1_1
   1EAB 74 41              7632 	mov	a,#0x41
   1EAD F0                 7633 	movx	@dptr,a
                           7634 ;	main4.c:863: case 11: q='B'; break;
                           7635 ;	Peephole 112.b	changed ljmp to sjmp
   1EAE 80 37              7636 	sjmp	00122$
   1EB0                    7637 00113$:
                           7638 ;	genAssign
   1EB0 90s00r96           7639 	mov	dptr,#_disp_4bytes_q_1_1
   1EB3 74 42              7640 	mov	a,#0x42
   1EB5 F0                 7641 	movx	@dptr,a
                           7642 ;	main4.c:864: case 12: q='C'; break;
                           7643 ;	Peephole 112.b	changed ljmp to sjmp
   1EB6 80 2F              7644 	sjmp	00122$
   1EB8                    7645 00114$:
                           7646 ;	genAssign
   1EB8 90s00r96           7647 	mov	dptr,#_disp_4bytes_q_1_1
   1EBB 74 43              7648 	mov	a,#0x43
   1EBD F0                 7649 	movx	@dptr,a
                           7650 ;	main4.c:865: case 13: q='D'; break;
                           7651 ;	Peephole 112.b	changed ljmp to sjmp
   1EBE 80 27              7652 	sjmp	00122$
   1EC0                    7653 00115$:
                           7654 ;	genAssign
   1EC0 90s00r96           7655 	mov	dptr,#_disp_4bytes_q_1_1
   1EC3 74 44              7656 	mov	a,#0x44
   1EC5 F0                 7657 	movx	@dptr,a
                           7658 ;	main4.c:866: case 14: q='E'; break;
                           7659 ;	Peephole 112.b	changed ljmp to sjmp
   1EC6 80 1F              7660 	sjmp	00122$
   1EC8                    7661 00116$:
                           7662 ;	genAssign
   1EC8 90s00r96           7663 	mov	dptr,#_disp_4bytes_q_1_1
   1ECB 74 45              7664 	mov	a,#0x45
   1ECD F0                 7665 	movx	@dptr,a
                           7666 ;	main4.c:867: case 15: q='F'; break;
                           7667 ;	Peephole 112.b	changed ljmp to sjmp
   1ECE 80 17              7668 	sjmp	00122$
   1ED0                    7669 00117$:
                           7670 ;	genAssign
   1ED0 90s00r96           7671 	mov	dptr,#_disp_4bytes_q_1_1
   1ED3 74 46              7672 	mov	a,#0x46
   1ED5 F0                 7673 	movx	@dptr,a
                           7674 ;	main4.c:868: default: q='?'; break;
                           7675 ;	Peephole 112.b	changed ljmp to sjmp
   1ED6 80 0F              7676 	sjmp	00122$
   1ED8                    7677 00118$:
                           7678 ;	genAssign
   1ED8 90s00r96           7679 	mov	dptr,#_disp_4bytes_q_1_1
   1EDB 74 3F              7680 	mov	a,#0x3F
   1EDD F0                 7681 	movx	@dptr,a
                           7682 ;	main4.c:869: }
                           7683 ;	Peephole 112.b	changed ljmp to sjmp
   1EDE 80 07              7684 	sjmp	00122$
   1EE0                    7685 00121$:
                           7686 ;	main4.c:871: else{ q=(b+48);}      //converting to decimal for printing chars
                           7687 ;	genCast
                           7688 ;	genPlus
   1EE0 90s00r96           7689 	mov	dptr,#_disp_4bytes_q_1_1
                           7690 ;     genPlusIncr
   1EE3 74 30              7691 	mov	a,#0x30
                           7692 ;	Peephole 236.a	used r6 instead of ar6
   1EE5 2E                 7693 	add	a,r6
   1EE6 F0                 7694 	movx	@dptr,a
   1EE7                    7695 00122$:
                           7696 ;	main4.c:872: if(c>9)                //conveting to character for HeX display
                           7697 ;	genAssign
   1EE7 90s00r93           7698 	mov	dptr,#_disp_4bytes_c_1_1
   1EEA E0                 7699 	movx	a,@dptr
   1EEB FE                 7700 	mov	r6,a
   1EEC A3                 7701 	inc	dptr
   1EED E0                 7702 	movx	a,@dptr
   1EEE FF                 7703 	mov	r7,a
                           7704 ;	genCmpGt
                           7705 ;	genCmp
   1EEF C3                 7706 	clr	c
   1EF0 74 09              7707 	mov	a,#0x09
   1EF2 9E                 7708 	subb	a,r6
                           7709 ;	Peephole 159	avoided xrl during execution
   1EF3 74 80              7710 	mov	a,#(0x00 ^ 0x80)
   1EF5 8F F0              7711 	mov	b,r7
   1EF7 63 F0 80           7712 	xrl	b,#0x80
   1EFA 95 F0              7713 	subb	a,b
                           7714 ;	genIfxJump
                           7715 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1EFC 50 68              7716 	jnc	00132$
                           7717 ;	Peephole 300	removed redundant label 00227$
                           7718 ;	main4.c:874: switch(c)
                           7719 ;	genCmpEq
                           7720 ;	gencjneshort
   1EFE BE 0A 05           7721 	cjne	r6,#0x0A,00228$
   1F01 BF 00 02           7722 	cjne	r7,#0x00,00228$
                           7723 ;	Peephole 112.b	changed ljmp to sjmp
   1F04 80 28              7724 	sjmp	00123$
   1F06                    7725 00228$:
                           7726 ;	genCmpEq
                           7727 ;	gencjneshort
   1F06 BE 0B 05           7728 	cjne	r6,#0x0B,00229$
   1F09 BF 00 02           7729 	cjne	r7,#0x00,00229$
                           7730 ;	Peephole 112.b	changed ljmp to sjmp
   1F0C 80 28              7731 	sjmp	00124$
   1F0E                    7732 00229$:
                           7733 ;	genCmpEq
                           7734 ;	gencjneshort
   1F0E BE 0C 05           7735 	cjne	r6,#0x0C,00230$
   1F11 BF 00 02           7736 	cjne	r7,#0x00,00230$
                           7737 ;	Peephole 112.b	changed ljmp to sjmp
   1F14 80 28              7738 	sjmp	00125$
   1F16                    7739 00230$:
                           7740 ;	genCmpEq
                           7741 ;	gencjneshort
   1F16 BE 0D 05           7742 	cjne	r6,#0x0D,00231$
   1F19 BF 00 02           7743 	cjne	r7,#0x00,00231$
                           7744 ;	Peephole 112.b	changed ljmp to sjmp
   1F1C 80 28              7745 	sjmp	00126$
   1F1E                    7746 00231$:
                           7747 ;	genCmpEq
                           7748 ;	gencjneshort
   1F1E BE 0E 05           7749 	cjne	r6,#0x0E,00232$
   1F21 BF 00 02           7750 	cjne	r7,#0x00,00232$
                           7751 ;	Peephole 112.b	changed ljmp to sjmp
   1F24 80 28              7752 	sjmp	00127$
   1F26                    7753 00232$:
                           7754 ;	genCmpEq
                           7755 ;	gencjneshort
                           7756 ;	Peephole 112.b	changed ljmp to sjmp
                           7757 ;	main4.c:876: case 10: r='A'; break;
                           7758 ;	Peephole 112.b	changed ljmp to sjmp
                           7759 ;	Peephole 198.a	optimized misc jump sequence
   1F26 BE 0F 35           7760 	cjne	r6,#0x0F,00129$
   1F29 BF 00 32           7761 	cjne	r7,#0x00,00129$
   1F2C 80 28              7762 	sjmp	00128$
                           7763 ;	Peephole 300	removed redundant label 00233$
   1F2E                    7764 00123$:
                           7765 ;	genAssign
   1F2E 90s00r97           7766 	mov	dptr,#_disp_4bytes_r_1_1
   1F31 74 41              7767 	mov	a,#0x41
   1F33 F0                 7768 	movx	@dptr,a
                           7769 ;	main4.c:877: case 11: r='B'; break;
                           7770 ;	Peephole 112.b	changed ljmp to sjmp
   1F34 80 37              7771 	sjmp	00133$
   1F36                    7772 00124$:
                           7773 ;	genAssign
   1F36 90s00r97           7774 	mov	dptr,#_disp_4bytes_r_1_1
   1F39 74 42              7775 	mov	a,#0x42
   1F3B F0                 7776 	movx	@dptr,a
                           7777 ;	main4.c:878: case 12: r='C'; break;
                           7778 ;	Peephole 112.b	changed ljmp to sjmp
   1F3C 80 2F              7779 	sjmp	00133$
   1F3E                    7780 00125$:
                           7781 ;	genAssign
   1F3E 90s00r97           7782 	mov	dptr,#_disp_4bytes_r_1_1
   1F41 74 43              7783 	mov	a,#0x43
   1F43 F0                 7784 	movx	@dptr,a
                           7785 ;	main4.c:879: case 13: r='D'; break;
                           7786 ;	Peephole 112.b	changed ljmp to sjmp
   1F44 80 27              7787 	sjmp	00133$
   1F46                    7788 00126$:
                           7789 ;	genAssign
   1F46 90s00r97           7790 	mov	dptr,#_disp_4bytes_r_1_1
   1F49 74 44              7791 	mov	a,#0x44
   1F4B F0                 7792 	movx	@dptr,a
                           7793 ;	main4.c:880: case 14: r='E'; break;
                           7794 ;	Peephole 112.b	changed ljmp to sjmp
   1F4C 80 1F              7795 	sjmp	00133$
   1F4E                    7796 00127$:
                           7797 ;	genAssign
   1F4E 90s00r97           7798 	mov	dptr,#_disp_4bytes_r_1_1
   1F51 74 45              7799 	mov	a,#0x45
   1F53 F0                 7800 	movx	@dptr,a
                           7801 ;	main4.c:881: case 15: r='F'; break;
                           7802 ;	Peephole 112.b	changed ljmp to sjmp
   1F54 80 17              7803 	sjmp	00133$
   1F56                    7804 00128$:
                           7805 ;	genAssign
   1F56 90s00r97           7806 	mov	dptr,#_disp_4bytes_r_1_1
   1F59 74 46              7807 	mov	a,#0x46
   1F5B F0                 7808 	movx	@dptr,a
                           7809 ;	main4.c:882: default: r='?'; break;
                           7810 ;	Peephole 112.b	changed ljmp to sjmp
   1F5C 80 0F              7811 	sjmp	00133$
   1F5E                    7812 00129$:
                           7813 ;	genAssign
   1F5E 90s00r97           7814 	mov	dptr,#_disp_4bytes_r_1_1
   1F61 74 3F              7815 	mov	a,#0x3F
   1F63 F0                 7816 	movx	@dptr,a
                           7817 ;	main4.c:883: }
                           7818 ;	Peephole 112.b	changed ljmp to sjmp
   1F64 80 07              7819 	sjmp	00133$
   1F66                    7820 00132$:
                           7821 ;	main4.c:885: else{ r=(c+48);}
                           7822 ;	genCast
                           7823 ;	genPlus
   1F66 90s00r97           7824 	mov	dptr,#_disp_4bytes_r_1_1
                           7825 ;     genPlusIncr
   1F69 74 30              7826 	mov	a,#0x30
                           7827 ;	Peephole 236.a	used r6 instead of ar6
   1F6B 2E                 7828 	add	a,r6
   1F6C F0                 7829 	movx	@dptr,a
   1F6D                    7830 00133$:
                           7831 ;	main4.c:889: rddata= eebyter(startadd);
                           7832 ;	genCall
   1F6D 8A 82              7833 	mov	dpl,r2
   1F6F 8B 83              7834 	mov	dph,r3
   1F71 C0 02              7835 	push	ar2
   1F73 C0 03              7836 	push	ar3
   1F75 C0 04              7837 	push	ar4
   1F77 C0 05              7838 	push	ar5
   1F79 12s00r00           7839 	lcall	_eebyter
   1F7C AE 82              7840 	mov	r6,dpl
   1F7E AF 83              7841 	mov	r7,dph
   1F80 D0 05              7842 	pop	ar5
   1F82 D0 04              7843 	pop	ar4
   1F84 D0 03              7844 	pop	ar3
   1F86 D0 02              7845 	pop	ar2
                           7846 ;	genCast
                           7847 ;	main4.c:890: ten = rddata/16;
                           7848 ;	genDiv
                           7849 ;     genDivOneByte
   1F88 C2 D5              7850 	clr	F0
   1F8A 75 F0 10           7851 	mov	b,#0x10
   1F8D EE                 7852 	mov	a,r6
   1F8E 30 E7 04           7853 	jnb	acc.7,00234$
   1F91 B2 D5              7854 	cpl	F0
   1F93 F4                 7855 	cpl	a
   1F94 04                 7856 	inc	a
   1F95                    7857 00234$:
   1F95 84                 7858 	div	ab
   1F96 30 D5 02           7859 	jnb	F0,00235$
   1F99 F4                 7860 	cpl	a
   1F9A 04                 7861 	inc	a
   1F9B                    7862 00235$:
   1F9B FF                 7863 	mov	r7,a
   1F9C A2 D5              7864 	mov	c,F0
   1F9E 95 E0              7865 	subb	a,acc
   1FA0 F8                 7866 	mov	r0,a
                           7867 ;	main4.c:891: one = rddata%16;
                           7868 ;	genMod
                           7869 ;	genModOneByte
   1FA1 EE                 7870 	mov	a,r6
   1FA2 A2 E7              7871 	mov	c,acc.7
   1FA4 54 0F              7872 	anl	a,#0x0f
   1FA6 60 04              7873 	jz	00236$
   1FA8 50 02              7874 	jnc	00236$
   1FAA 44 F0              7875 	orl	a,#0xf0
   1FAC                    7876 00236$:
                           7877 ;	genCast
   1FAC FE                 7878 	mov	r6,a
                           7879 ;	Peephole 105	removed redundant mov
   1FAD 33                 7880 	rlc	a
   1FAE 95 E0              7881 	subb	a,acc
   1FB0 F9                 7882 	mov	r1,a
                           7883 ;	main4.c:892: if(ten<10)
                           7884 ;	genCmpLt
                           7885 ;	genCmp
   1FB1 C3                 7886 	clr	c
   1FB2 EF                 7887 	mov	a,r7
   1FB3 94 0A              7888 	subb	a,#0x0A
   1FB5 E8                 7889 	mov	a,r0
   1FB6 64 80              7890 	xrl	a,#0x80
   1FB8 94 80              7891 	subb	a,#0x80
                           7892 ;	genIfxJump
                           7893 ;	Peephole 108.a	removed ljmp by inverse jump logic
   1FBA 50 13              7894 	jnc	00143$
                           7895 ;	Peephole 300	removed redundant label 00237$
                           7896 ;	main4.c:894: s=(ten+48);
                           7897 ;	genIpush
   1FBC C0 02              7898 	push	ar2
   1FBE C0 03              7899 	push	ar3
                           7900 ;	genCast
   1FC0 8F 02              7901 	mov	ar2,r7
                           7902 ;	genPlus
   1FC2 90s00r98           7903 	mov	dptr,#_disp_4bytes_s_1_1
                           7904 ;     genPlusIncr
   1FC5 74 30              7905 	mov	a,#0x30
                           7906 ;	Peephole 236.a	used r2 instead of ar2
   1FC7 2A                 7907 	add	a,r2
   1FC8 F0                 7908 	movx	@dptr,a
                           7909 ;	genIpop
   1FC9 D0 03              7910 	pop	ar3
   1FCB D0 02              7911 	pop	ar2
                           7912 ;	Peephole 112.b	changed ljmp to sjmp
   1FCD 80 66              7913 	sjmp	00144$
   1FCF                    7914 00143$:
                           7915 ;	main4.c:899: switch(ten)     //COnversion to character for ASCII printig to LCD
                           7916 ;	genCmpEq
                           7917 ;	gencjneshort
   1FCF BF 0A 05           7918 	cjne	r7,#0x0A,00238$
   1FD2 B8 00 02           7919 	cjne	r0,#0x00,00238$
                           7920 ;	Peephole 112.b	changed ljmp to sjmp
   1FD5 80 28              7921 	sjmp	00134$
   1FD7                    7922 00238$:
                           7923 ;	genCmpEq
                           7924 ;	gencjneshort
   1FD7 BF 0B 05           7925 	cjne	r7,#0x0B,00239$
   1FDA B8 00 02           7926 	cjne	r0,#0x00,00239$
                           7927 ;	Peephole 112.b	changed ljmp to sjmp
   1FDD 80 28              7928 	sjmp	00135$
   1FDF                    7929 00239$:
                           7930 ;	genCmpEq
                           7931 ;	gencjneshort
   1FDF BF 0C 05           7932 	cjne	r7,#0x0C,00240$
   1FE2 B8 00 02           7933 	cjne	r0,#0x00,00240$
                           7934 ;	Peephole 112.b	changed ljmp to sjmp
   1FE5 80 28              7935 	sjmp	00136$
   1FE7                    7936 00240$:
                           7937 ;	genCmpEq
                           7938 ;	gencjneshort
   1FE7 BF 0D 05           7939 	cjne	r7,#0x0D,00241$
   1FEA B8 00 02           7940 	cjne	r0,#0x00,00241$
                           7941 ;	Peephole 112.b	changed ljmp to sjmp
   1FED 80 28              7942 	sjmp	00137$
   1FEF                    7943 00241$:
                           7944 ;	genCmpEq
                           7945 ;	gencjneshort
   1FEF BF 0E 05           7946 	cjne	r7,#0x0E,00242$
   1FF2 B8 00 02           7947 	cjne	r0,#0x00,00242$
                           7948 ;	Peephole 112.b	changed ljmp to sjmp
   1FF5 80 28              7949 	sjmp	00138$
   1FF7                    7950 00242$:
                           7951 ;	genCmpEq
                           7952 ;	gencjneshort
                           7953 ;	Peephole 112.b	changed ljmp to sjmp
                           7954 ;	main4.c:901: case 10: s='A'; break;
                           7955 ;	Peephole 112.b	changed ljmp to sjmp
                           7956 ;	Peephole 198.a	optimized misc jump sequence
   1FF7 BF 0F 35           7957 	cjne	r7,#0x0F,00140$
   1FFA B8 00 32           7958 	cjne	r0,#0x00,00140$
   1FFD 80 28              7959 	sjmp	00139$
                           7960 ;	Peephole 300	removed redundant label 00243$
   1FFF                    7961 00134$:
                           7962 ;	genAssign
   1FFF 90s00r98           7963 	mov	dptr,#_disp_4bytes_s_1_1
   2002 74 41              7964 	mov	a,#0x41
   2004 F0                 7965 	movx	@dptr,a
                           7966 ;	main4.c:902: case 11: s='B'; break;
                           7967 ;	Peephole 112.b	changed ljmp to sjmp
   2005 80 2E              7968 	sjmp	00144$
   2007                    7969 00135$:
                           7970 ;	genAssign
   2007 90s00r98           7971 	mov	dptr,#_disp_4bytes_s_1_1
   200A 74 42              7972 	mov	a,#0x42
   200C F0                 7973 	movx	@dptr,a
                           7974 ;	main4.c:903: case 12: s='C'; break;
                           7975 ;	Peephole 112.b	changed ljmp to sjmp
   200D 80 26              7976 	sjmp	00144$
   200F                    7977 00136$:
                           7978 ;	genAssign
   200F 90s00r98           7979 	mov	dptr,#_disp_4bytes_s_1_1
   2012 74 43              7980 	mov	a,#0x43
   2014 F0                 7981 	movx	@dptr,a
                           7982 ;	main4.c:904: case 13: s='D'; break;
                           7983 ;	Peephole 112.b	changed ljmp to sjmp
   2015 80 1E              7984 	sjmp	00144$
   2017                    7985 00137$:
                           7986 ;	genAssign
   2017 90s00r98           7987 	mov	dptr,#_disp_4bytes_s_1_1
   201A 74 44              7988 	mov	a,#0x44
   201C F0                 7989 	movx	@dptr,a
                           7990 ;	main4.c:905: case 14: s='E'; break;
                           7991 ;	Peephole 112.b	changed ljmp to sjmp
   201D 80 16              7992 	sjmp	00144$
   201F                    7993 00138$:
                           7994 ;	genAssign
   201F 90s00r98           7995 	mov	dptr,#_disp_4bytes_s_1_1
   2022 74 45              7996 	mov	a,#0x45
   2024 F0                 7997 	movx	@dptr,a
                           7998 ;	main4.c:906: case 15: s='F'; break;
                           7999 ;	Peephole 112.b	changed ljmp to sjmp
   2025 80 0E              8000 	sjmp	00144$
   2027                    8001 00139$:
                           8002 ;	genAssign
   2027 90s00r98           8003 	mov	dptr,#_disp_4bytes_s_1_1
   202A 74 46              8004 	mov	a,#0x46
   202C F0                 8005 	movx	@dptr,a
                           8006 ;	main4.c:907: default: s='?'; break;
                           8007 ;	Peephole 112.b	changed ljmp to sjmp
   202D 80 06              8008 	sjmp	00144$
   202F                    8009 00140$:
                           8010 ;	genAssign
   202F 90s00r98           8011 	mov	dptr,#_disp_4bytes_s_1_1
   2032 74 3F              8012 	mov	a,#0x3F
   2034 F0                 8013 	movx	@dptr,a
                           8014 ;	main4.c:908: }
   2035                    8015 00144$:
                           8016 ;	main4.c:910: if(one<10)
                           8017 ;	genCmpLt
                           8018 ;	genCmp
   2035 C3                 8019 	clr	c
   2036 EE                 8020 	mov	a,r6
   2037 94 0A              8021 	subb	a,#0x0A
   2039 E9                 8022 	mov	a,r1
   203A 64 80              8023 	xrl	a,#0x80
   203C 94 80              8024 	subb	a,#0x80
                           8025 ;	genIfxJump
                           8026 ;	Peephole 108.a	removed ljmp by inverse jump logic
   203E 50 0B              8027 	jnc	00154$
                           8028 ;	Peephole 300	removed redundant label 00244$
                           8029 ;	main4.c:912: t=(one+48);
                           8030 ;	genCast
   2040 8E 07              8031 	mov	ar7,r6
                           8032 ;	genPlus
   2042 90s00r99           8033 	mov	dptr,#_disp_4bytes_t_1_1
                           8034 ;     genPlusIncr
   2045 74 30              8035 	mov	a,#0x30
                           8036 ;	Peephole 236.a	used r7 instead of ar7
   2047 2F                 8037 	add	a,r7
   2048 F0                 8038 	movx	@dptr,a
                           8039 ;	Peephole 112.b	changed ljmp to sjmp
   2049 80 66              8040 	sjmp	00155$
   204B                    8041 00154$:
                           8042 ;	main4.c:917: switch(one)             //COnversion to character for ASCII printig to LCD
                           8043 ;	genCmpEq
                           8044 ;	gencjneshort
   204B BE 0A 05           8045 	cjne	r6,#0x0A,00245$
   204E B9 00 02           8046 	cjne	r1,#0x00,00245$
                           8047 ;	Peephole 112.b	changed ljmp to sjmp
   2051 80 28              8048 	sjmp	00145$
   2053                    8049 00245$:
                           8050 ;	genCmpEq
                           8051 ;	gencjneshort
   2053 BE 0B 05           8052 	cjne	r6,#0x0B,00246$
   2056 B9 00 02           8053 	cjne	r1,#0x00,00246$
                           8054 ;	Peephole 112.b	changed ljmp to sjmp
   2059 80 28              8055 	sjmp	00146$
   205B                    8056 00246$:
                           8057 ;	genCmpEq
                           8058 ;	gencjneshort
   205B BE 0C 05           8059 	cjne	r6,#0x0C,00247$
   205E B9 00 02           8060 	cjne	r1,#0x00,00247$
                           8061 ;	Peephole 112.b	changed ljmp to sjmp
   2061 80 28              8062 	sjmp	00147$
   2063                    8063 00247$:
                           8064 ;	genCmpEq
                           8065 ;	gencjneshort
   2063 BE 0D 05           8066 	cjne	r6,#0x0D,00248$
   2066 B9 00 02           8067 	cjne	r1,#0x00,00248$
                           8068 ;	Peephole 112.b	changed ljmp to sjmp
   2069 80 28              8069 	sjmp	00148$
   206B                    8070 00248$:
                           8071 ;	genCmpEq
                           8072 ;	gencjneshort
   206B BE 0E 05           8073 	cjne	r6,#0x0E,00249$
   206E B9 00 02           8074 	cjne	r1,#0x00,00249$
                           8075 ;	Peephole 112.b	changed ljmp to sjmp
   2071 80 28              8076 	sjmp	00149$
   2073                    8077 00249$:
                           8078 ;	genCmpEq
                           8079 ;	gencjneshort
                           8080 ;	Peephole 112.b	changed ljmp to sjmp
                           8081 ;	main4.c:919: case 10: t='A'; break;
                           8082 ;	Peephole 112.b	changed ljmp to sjmp
                           8083 ;	Peephole 198.a	optimized misc jump sequence
   2073 BE 0F 35           8084 	cjne	r6,#0x0F,00151$
   2076 B9 00 32           8085 	cjne	r1,#0x00,00151$
   2079 80 28              8086 	sjmp	00150$
                           8087 ;	Peephole 300	removed redundant label 00250$
   207B                    8088 00145$:
                           8089 ;	genAssign
   207B 90s00r99           8090 	mov	dptr,#_disp_4bytes_t_1_1
   207E 74 41              8091 	mov	a,#0x41
   2080 F0                 8092 	movx	@dptr,a
                           8093 ;	main4.c:920: case 11: t='B'; break;
                           8094 ;	Peephole 112.b	changed ljmp to sjmp
   2081 80 2E              8095 	sjmp	00155$
   2083                    8096 00146$:
                           8097 ;	genAssign
   2083 90s00r99           8098 	mov	dptr,#_disp_4bytes_t_1_1
   2086 74 42              8099 	mov	a,#0x42
   2088 F0                 8100 	movx	@dptr,a
                           8101 ;	main4.c:921: case 12: t='C'; break;
                           8102 ;	Peephole 112.b	changed ljmp to sjmp
   2089 80 26              8103 	sjmp	00155$
   208B                    8104 00147$:
                           8105 ;	genAssign
   208B 90s00r99           8106 	mov	dptr,#_disp_4bytes_t_1_1
   208E 74 43              8107 	mov	a,#0x43
   2090 F0                 8108 	movx	@dptr,a
                           8109 ;	main4.c:922: case 13: t='D'; break;
                           8110 ;	Peephole 112.b	changed ljmp to sjmp
   2091 80 1E              8111 	sjmp	00155$
   2093                    8112 00148$:
                           8113 ;	genAssign
   2093 90s00r99           8114 	mov	dptr,#_disp_4bytes_t_1_1
   2096 74 44              8115 	mov	a,#0x44
   2098 F0                 8116 	movx	@dptr,a
                           8117 ;	main4.c:923: case 14: t='E'; break;
                           8118 ;	Peephole 112.b	changed ljmp to sjmp
   2099 80 16              8119 	sjmp	00155$
   209B                    8120 00149$:
                           8121 ;	genAssign
   209B 90s00r99           8122 	mov	dptr,#_disp_4bytes_t_1_1
   209E 74 45              8123 	mov	a,#0x45
   20A0 F0                 8124 	movx	@dptr,a
                           8125 ;	main4.c:924: case 15: t='F'; break;
                           8126 ;	Peephole 112.b	changed ljmp to sjmp
   20A1 80 0E              8127 	sjmp	00155$
   20A3                    8128 00150$:
                           8129 ;	genAssign
   20A3 90s00r99           8130 	mov	dptr,#_disp_4bytes_t_1_1
   20A6 74 46              8131 	mov	a,#0x46
   20A8 F0                 8132 	movx	@dptr,a
                           8133 ;	main4.c:925: default: t='?'; break;
                           8134 ;	Peephole 112.b	changed ljmp to sjmp
   20A9 80 06              8135 	sjmp	00155$
   20AB                    8136 00151$:
                           8137 ;	genAssign
   20AB 90s00r99           8138 	mov	dptr,#_disp_4bytes_t_1_1
   20AE 74 3F              8139 	mov	a,#0x3F
   20B0 F0                 8140 	movx	@dptr,a
                           8141 ;	main4.c:926: }
   20B1                    8142 00155$:
                           8143 ;	main4.c:930: startadd++;     //incrementing the address for the next loop
                           8144 ;	genPlus
                           8145 ;     genPlusIncr
   20B1 0A                 8146 	inc	r2
   20B2 BA 00 01           8147 	cjne	r2,#0x00,00251$
   20B5 0B                 8148 	inc	r3
   20B6                    8149 00251$:
                           8150 ;	genAssign
   20B6 90s00r8F           8151 	mov	dptr,#_disp_4bytes_startadd_1_1
   20B9 EA                 8152 	mov	a,r2
   20BA F0                 8153 	movx	@dptr,a
   20BB A3                 8154 	inc	dptr
   20BC EB                 8155 	mov	a,r3
   20BD F0                 8156 	movx	@dptr,a
                           8157 ;	main4.c:931: if (i==0)         //Printing to the LCD the 1st DATA/ADDR set
                           8158 ;	genIfx
   20BE EC                 8159 	mov	a,r4
   20BF 4D                 8160 	orl	a,r5
                           8161 ;	genIfxJump
   20C0 60 03              8162 	jz	00252$
   20C2 02s22r42           8163 	ljmp	00157$
   20C5                    8164 00252$:
                           8165 ;	main4.c:951: }
                           8166 ;	genCritical
   20C5 D2*00              8167 	setb	_disp_4bytes_sloc0_1_0
   20C7 10 AF 02           8168 	jbc	ea,00253$
   20CA C2*00              8169 	clr	_disp_4bytes_sloc0_1_0
   20CC                    8170 00253$:
                           8171 ;	main4.c:937: lcdgotoxy('0','0');
                           8172 ;	genAssign
   20CC 90s00r00           8173 	mov	dptr,#_lcdgotoxy_PARM_2
   20CF 74 30              8174 	mov	a,#0x30
   20D1 F0                 8175 	movx	@dptr,a
                           8176 ;	genCall
   20D2 75 82 30           8177 	mov	dpl,#0x30
   20D5 C0 02              8178 	push	ar2
   20D7 C0 03              8179 	push	ar3
   20D9 C0 04              8180 	push	ar4
   20DB C0 05              8181 	push	ar5
   20DD 12s00r00           8182 	lcall	_lcdgotoxy
   20E0 D0 05              8183 	pop	ar5
   20E2 D0 04              8184 	pop	ar4
   20E4 D0 03              8185 	pop	ar3
   20E6 D0 02              8186 	pop	ar2
                           8187 ;	main4.c:938: lcdputch('0');
                           8188 ;	genCall
   20E8 75 82 30           8189 	mov	dpl,#0x30
   20EB C0 02              8190 	push	ar2
   20ED C0 03              8191 	push	ar3
   20EF C0 04              8192 	push	ar4
   20F1 C0 05              8193 	push	ar5
   20F3 12s00r00           8194 	lcall	_lcdputch
   20F6 D0 05              8195 	pop	ar5
   20F8 D0 04              8196 	pop	ar4
   20FA D0 03              8197 	pop	ar3
   20FC D0 02              8198 	pop	ar2
                           8199 ;	main4.c:939: lcdgotoxy('0','1');
                           8200 ;	genAssign
   20FE 90s00r00           8201 	mov	dptr,#_lcdgotoxy_PARM_2
   2101 74 31              8202 	mov	a,#0x31
   2103 F0                 8203 	movx	@dptr,a
                           8204 ;	genCall
   2104 75 82 30           8205 	mov	dpl,#0x30
   2107 C0 02              8206 	push	ar2
   2109 C0 03              8207 	push	ar3
   210B C0 04              8208 	push	ar4
   210D C0 05              8209 	push	ar5
   210F 12s00r00           8210 	lcall	_lcdgotoxy
   2112 D0 05              8211 	pop	ar5
   2114 D0 04              8212 	pop	ar4
   2116 D0 03              8213 	pop	ar3
   2118 D0 02              8214 	pop	ar2
                           8215 ;	main4.c:940: lcdputch(p);
                           8216 ;	genAssign
   211A 90s00r95           8217 	mov	dptr,#_disp_4bytes_p_1_1
   211D E0                 8218 	movx	a,@dptr
                           8219 ;	genCall
   211E FE                 8220 	mov	r6,a
                           8221 ;	Peephole 244.c	loading dpl from a instead of r6
   211F F5 82              8222 	mov	dpl,a
   2121 C0 02              8223 	push	ar2
   2123 C0 03              8224 	push	ar3
   2125 C0 04              8225 	push	ar4
   2127 C0 05              8226 	push	ar5
   2129 12s00r00           8227 	lcall	_lcdputch
   212C D0 05              8228 	pop	ar5
   212E D0 04              8229 	pop	ar4
   2130 D0 03              8230 	pop	ar3
   2132 D0 02              8231 	pop	ar2
                           8232 ;	main4.c:941: lcdgotoxy('0','2');
                           8233 ;	genAssign
   2134 90s00r00           8234 	mov	dptr,#_lcdgotoxy_PARM_2
   2137 74 32              8235 	mov	a,#0x32
   2139 F0                 8236 	movx	@dptr,a
                           8237 ;	genCall
   213A 75 82 30           8238 	mov	dpl,#0x30
   213D C0 02              8239 	push	ar2
   213F C0 03              8240 	push	ar3
   2141 C0 04              8241 	push	ar4
   2143 C0 05              8242 	push	ar5
   2145 12s00r00           8243 	lcall	_lcdgotoxy
   2148 D0 05              8244 	pop	ar5
   214A D0 04              8245 	pop	ar4
   214C D0 03              8246 	pop	ar3
   214E D0 02              8247 	pop	ar2
                           8248 ;	main4.c:942: lcdputch(q);
                           8249 ;	genAssign
   2150 90s00r96           8250 	mov	dptr,#_disp_4bytes_q_1_1
   2153 E0                 8251 	movx	a,@dptr
                           8252 ;	genCall
   2154 FE                 8253 	mov	r6,a
                           8254 ;	Peephole 244.c	loading dpl from a instead of r6
   2155 F5 82              8255 	mov	dpl,a
   2157 C0 02              8256 	push	ar2
   2159 C0 03              8257 	push	ar3
   215B C0 04              8258 	push	ar4
   215D C0 05              8259 	push	ar5
   215F 12s00r00           8260 	lcall	_lcdputch
   2162 D0 05              8261 	pop	ar5
   2164 D0 04              8262 	pop	ar4
   2166 D0 03              8263 	pop	ar3
   2168 D0 02              8264 	pop	ar2
                           8265 ;	main4.c:943: lcdgotoxy('0','3');
                           8266 ;	genAssign
   216A 90s00r00           8267 	mov	dptr,#_lcdgotoxy_PARM_2
   216D 74 33              8268 	mov	a,#0x33
   216F F0                 8269 	movx	@dptr,a
                           8270 ;	genCall
   2170 75 82 30           8271 	mov	dpl,#0x30
   2173 C0 02              8272 	push	ar2
   2175 C0 03              8273 	push	ar3
   2177 C0 04              8274 	push	ar4
   2179 C0 05              8275 	push	ar5
   217B 12s00r00           8276 	lcall	_lcdgotoxy
   217E D0 05              8277 	pop	ar5
   2180 D0 04              8278 	pop	ar4
   2182 D0 03              8279 	pop	ar3
   2184 D0 02              8280 	pop	ar2
                           8281 ;	main4.c:944: lcdputch(r);
                           8282 ;	genAssign
   2186 90s00r97           8283 	mov	dptr,#_disp_4bytes_r_1_1
   2189 E0                 8284 	movx	a,@dptr
                           8285 ;	genCall
   218A FE                 8286 	mov	r6,a
                           8287 ;	Peephole 244.c	loading dpl from a instead of r6
   218B F5 82              8288 	mov	dpl,a
   218D C0 02              8289 	push	ar2
   218F C0 03              8290 	push	ar3
   2191 C0 04              8291 	push	ar4
   2193 C0 05              8292 	push	ar5
   2195 12s00r00           8293 	lcall	_lcdputch
   2198 D0 05              8294 	pop	ar5
   219A D0 04              8295 	pop	ar4
   219C D0 03              8296 	pop	ar3
   219E D0 02              8297 	pop	ar2
                           8298 ;	main4.c:945: lcdgotoxy('0','4');
                           8299 ;	genAssign
   21A0 90s00r00           8300 	mov	dptr,#_lcdgotoxy_PARM_2
   21A3 74 34              8301 	mov	a,#0x34
   21A5 F0                 8302 	movx	@dptr,a
                           8303 ;	genCall
   21A6 75 82 30           8304 	mov	dpl,#0x30
   21A9 C0 02              8305 	push	ar2
   21AB C0 03              8306 	push	ar3
   21AD C0 04              8307 	push	ar4
   21AF C0 05              8308 	push	ar5
   21B1 12s00r00           8309 	lcall	_lcdgotoxy
   21B4 D0 05              8310 	pop	ar5
   21B6 D0 04              8311 	pop	ar4
   21B8 D0 03              8312 	pop	ar3
   21BA D0 02              8313 	pop	ar2
                           8314 ;	main4.c:946: lcdputch(':');
                           8315 ;	genCall
   21BC 75 82 3A           8316 	mov	dpl,#0x3A
   21BF C0 02              8317 	push	ar2
   21C1 C0 03              8318 	push	ar3
   21C3 C0 04              8319 	push	ar4
   21C5 C0 05              8320 	push	ar5
   21C7 12s00r00           8321 	lcall	_lcdputch
   21CA D0 05              8322 	pop	ar5
   21CC D0 04              8323 	pop	ar4
   21CE D0 03              8324 	pop	ar3
   21D0 D0 02              8325 	pop	ar2
                           8326 ;	main4.c:947: lcdgotoxy('0','5');
                           8327 ;	genAssign
   21D2 90s00r00           8328 	mov	dptr,#_lcdgotoxy_PARM_2
   21D5 74 35              8329 	mov	a,#0x35
   21D7 F0                 8330 	movx	@dptr,a
                           8331 ;	genCall
   21D8 75 82 30           8332 	mov	dpl,#0x30
   21DB C0 02              8333 	push	ar2
   21DD C0 03              8334 	push	ar3
   21DF C0 04              8335 	push	ar4
   21E1 C0 05              8336 	push	ar5
   21E3 12s00r00           8337 	lcall	_lcdgotoxy
   21E6 D0 05              8338 	pop	ar5
   21E8 D0 04              8339 	pop	ar4
   21EA D0 03              8340 	pop	ar3
   21EC D0 02              8341 	pop	ar2
                           8342 ;	main4.c:948: lcdputch(s);
                           8343 ;	genAssign
   21EE 90s00r98           8344 	mov	dptr,#_disp_4bytes_s_1_1
   21F1 E0                 8345 	movx	a,@dptr
                           8346 ;	genCall
   21F2 FE                 8347 	mov	r6,a
                           8348 ;	Peephole 244.c	loading dpl from a instead of r6
   21F3 F5 82              8349 	mov	dpl,a
   21F5 C0 02              8350 	push	ar2
   21F7 C0 03              8351 	push	ar3
   21F9 C0 04              8352 	push	ar4
   21FB C0 05              8353 	push	ar5
   21FD 12s00r00           8354 	lcall	_lcdputch
   2200 D0 05              8355 	pop	ar5
   2202 D0 04              8356 	pop	ar4
   2204 D0 03              8357 	pop	ar3
   2206 D0 02              8358 	pop	ar2
                           8359 ;	main4.c:949: lcdgotoxy('0','6');
                           8360 ;	genAssign
   2208 90s00r00           8361 	mov	dptr,#_lcdgotoxy_PARM_2
   220B 74 36              8362 	mov	a,#0x36
   220D F0                 8363 	movx	@dptr,a
                           8364 ;	genCall
   220E 75 82 30           8365 	mov	dpl,#0x30
   2211 C0 02              8366 	push	ar2
   2213 C0 03              8367 	push	ar3
   2215 C0 04              8368 	push	ar4
   2217 C0 05              8369 	push	ar5
   2219 12s00r00           8370 	lcall	_lcdgotoxy
   221C D0 05              8371 	pop	ar5
   221E D0 04              8372 	pop	ar4
   2220 D0 03              8373 	pop	ar3
   2222 D0 02              8374 	pop	ar2
                           8375 ;	main4.c:950: lcdputch(t);
                           8376 ;	genAssign
   2224 90s00r99           8377 	mov	dptr,#_disp_4bytes_t_1_1
   2227 E0                 8378 	movx	a,@dptr
                           8379 ;	genCall
   2228 FE                 8380 	mov	r6,a
                           8381 ;	Peephole 244.c	loading dpl from a instead of r6
   2229 F5 82              8382 	mov	dpl,a
   222B C0 02              8383 	push	ar2
   222D C0 03              8384 	push	ar3
   222F C0 04              8385 	push	ar4
   2231 C0 05              8386 	push	ar5
   2233 12s00r00           8387 	lcall	_lcdputch
   2236 D0 05              8388 	pop	ar5
   2238 D0 04              8389 	pop	ar4
   223A D0 03              8390 	pop	ar3
   223C D0 02              8391 	pop	ar2
                           8392 ;     genEndCritical
   223E A2*00              8393 	mov	c,_disp_4bytes_sloc0_1_0
   2240 92 AF              8394 	mov	ea,c
   2242                    8395 00157$:
                           8396 ;	main4.c:953: if (i==1)     //Printing to the LCD the 2st DATA/ADDR set
                           8397 ;	genCmpEq
                           8398 ;	gencjneshort
   2242 BC 01 05           8399 	cjne	r4,#0x01,00254$
   2245 BD 00 02           8400 	cjne	r5,#0x00,00254$
   2248 80 03              8401 	sjmp	00255$
   224A                    8402 00254$:
   224A 02s23rCA           8403 	ljmp	00159$
   224D                    8404 00255$:
                           8405 ;	main4.c:973: }
                           8406 ;	genCritical
   224D D2*00              8407 	setb	_disp_4bytes_sloc0_1_0
   224F 10 AF 02           8408 	jbc	ea,00256$
   2252 C2*00              8409 	clr	_disp_4bytes_sloc0_1_0
   2254                    8410 00256$:
                           8411 ;	main4.c:959: lcdgotoxy('1','0');
                           8412 ;	genAssign
   2254 90s00r00           8413 	mov	dptr,#_lcdgotoxy_PARM_2
   2257 74 30              8414 	mov	a,#0x30
   2259 F0                 8415 	movx	@dptr,a
                           8416 ;	genCall
   225A 75 82 31           8417 	mov	dpl,#0x31
   225D C0 02              8418 	push	ar2
   225F C0 03              8419 	push	ar3
   2261 C0 04              8420 	push	ar4
   2263 C0 05              8421 	push	ar5
   2265 12s00r00           8422 	lcall	_lcdgotoxy
   2268 D0 05              8423 	pop	ar5
   226A D0 04              8424 	pop	ar4
   226C D0 03              8425 	pop	ar3
   226E D0 02              8426 	pop	ar2
                           8427 ;	main4.c:960: lcdputch('0');
                           8428 ;	genCall
   2270 75 82 30           8429 	mov	dpl,#0x30
   2273 C0 02              8430 	push	ar2
   2275 C0 03              8431 	push	ar3
   2277 C0 04              8432 	push	ar4
   2279 C0 05              8433 	push	ar5
   227B 12s00r00           8434 	lcall	_lcdputch
   227E D0 05              8435 	pop	ar5
   2280 D0 04              8436 	pop	ar4
   2282 D0 03              8437 	pop	ar3
   2284 D0 02              8438 	pop	ar2
                           8439 ;	main4.c:961: lcdgotoxy('1','1');
                           8440 ;	genAssign
   2286 90s00r00           8441 	mov	dptr,#_lcdgotoxy_PARM_2
   2289 74 31              8442 	mov	a,#0x31
   228B F0                 8443 	movx	@dptr,a
                           8444 ;	genCall
   228C 75 82 31           8445 	mov	dpl,#0x31
   228F C0 02              8446 	push	ar2
   2291 C0 03              8447 	push	ar3
   2293 C0 04              8448 	push	ar4
   2295 C0 05              8449 	push	ar5
   2297 12s00r00           8450 	lcall	_lcdgotoxy
   229A D0 05              8451 	pop	ar5
   229C D0 04              8452 	pop	ar4
   229E D0 03              8453 	pop	ar3
   22A0 D0 02              8454 	pop	ar2
                           8455 ;	main4.c:962: lcdputch(p);
                           8456 ;	genAssign
   22A2 90s00r95           8457 	mov	dptr,#_disp_4bytes_p_1_1
   22A5 E0                 8458 	movx	a,@dptr
                           8459 ;	genCall
   22A6 FE                 8460 	mov	r6,a
                           8461 ;	Peephole 244.c	loading dpl from a instead of r6
   22A7 F5 82              8462 	mov	dpl,a
   22A9 C0 02              8463 	push	ar2
   22AB C0 03              8464 	push	ar3
   22AD C0 04              8465 	push	ar4
   22AF C0 05              8466 	push	ar5
   22B1 12s00r00           8467 	lcall	_lcdputch
   22B4 D0 05              8468 	pop	ar5
   22B6 D0 04              8469 	pop	ar4
   22B8 D0 03              8470 	pop	ar3
   22BA D0 02              8471 	pop	ar2
                           8472 ;	main4.c:963: lcdgotoxy('1','2');
                           8473 ;	genAssign
   22BC 90s00r00           8474 	mov	dptr,#_lcdgotoxy_PARM_2
   22BF 74 32              8475 	mov	a,#0x32
   22C1 F0                 8476 	movx	@dptr,a
                           8477 ;	genCall
   22C2 75 82 31           8478 	mov	dpl,#0x31
   22C5 C0 02              8479 	push	ar2
   22C7 C0 03              8480 	push	ar3
   22C9 C0 04              8481 	push	ar4
   22CB C0 05              8482 	push	ar5
   22CD 12s00r00           8483 	lcall	_lcdgotoxy
   22D0 D0 05              8484 	pop	ar5
   22D2 D0 04              8485 	pop	ar4
   22D4 D0 03              8486 	pop	ar3
   22D6 D0 02              8487 	pop	ar2
                           8488 ;	main4.c:964: lcdputch(q);
                           8489 ;	genAssign
   22D8 90s00r96           8490 	mov	dptr,#_disp_4bytes_q_1_1
   22DB E0                 8491 	movx	a,@dptr
                           8492 ;	genCall
   22DC FE                 8493 	mov	r6,a
                           8494 ;	Peephole 244.c	loading dpl from a instead of r6
   22DD F5 82              8495 	mov	dpl,a
   22DF C0 02              8496 	push	ar2
   22E1 C0 03              8497 	push	ar3
   22E3 C0 04              8498 	push	ar4
   22E5 C0 05              8499 	push	ar5
   22E7 12s00r00           8500 	lcall	_lcdputch
   22EA D0 05              8501 	pop	ar5
   22EC D0 04              8502 	pop	ar4
   22EE D0 03              8503 	pop	ar3
   22F0 D0 02              8504 	pop	ar2
                           8505 ;	main4.c:965: lcdgotoxy('1','3');
                           8506 ;	genAssign
   22F2 90s00r00           8507 	mov	dptr,#_lcdgotoxy_PARM_2
   22F5 74 33              8508 	mov	a,#0x33
   22F7 F0                 8509 	movx	@dptr,a
                           8510 ;	genCall
   22F8 75 82 31           8511 	mov	dpl,#0x31
   22FB C0 02              8512 	push	ar2
   22FD C0 03              8513 	push	ar3
   22FF C0 04              8514 	push	ar4
   2301 C0 05              8515 	push	ar5
   2303 12s00r00           8516 	lcall	_lcdgotoxy
   2306 D0 05              8517 	pop	ar5
   2308 D0 04              8518 	pop	ar4
   230A D0 03              8519 	pop	ar3
   230C D0 02              8520 	pop	ar2
                           8521 ;	main4.c:966: lcdputch(r);
                           8522 ;	genAssign
   230E 90s00r97           8523 	mov	dptr,#_disp_4bytes_r_1_1
   2311 E0                 8524 	movx	a,@dptr
                           8525 ;	genCall
   2312 FE                 8526 	mov	r6,a
                           8527 ;	Peephole 244.c	loading dpl from a instead of r6
   2313 F5 82              8528 	mov	dpl,a
   2315 C0 02              8529 	push	ar2
   2317 C0 03              8530 	push	ar3
   2319 C0 04              8531 	push	ar4
   231B C0 05              8532 	push	ar5
   231D 12s00r00           8533 	lcall	_lcdputch
   2320 D0 05              8534 	pop	ar5
   2322 D0 04              8535 	pop	ar4
   2324 D0 03              8536 	pop	ar3
   2326 D0 02              8537 	pop	ar2
                           8538 ;	main4.c:967: lcdgotoxy('1','4');
                           8539 ;	genAssign
   2328 90s00r00           8540 	mov	dptr,#_lcdgotoxy_PARM_2
   232B 74 34              8541 	mov	a,#0x34
   232D F0                 8542 	movx	@dptr,a
                           8543 ;	genCall
   232E 75 82 31           8544 	mov	dpl,#0x31
   2331 C0 02              8545 	push	ar2
   2333 C0 03              8546 	push	ar3
   2335 C0 04              8547 	push	ar4
   2337 C0 05              8548 	push	ar5
   2339 12s00r00           8549 	lcall	_lcdgotoxy
   233C D0 05              8550 	pop	ar5
   233E D0 04              8551 	pop	ar4
   2340 D0 03              8552 	pop	ar3
   2342 D0 02              8553 	pop	ar2
                           8554 ;	main4.c:968: lcdputch(':');
                           8555 ;	genCall
   2344 75 82 3A           8556 	mov	dpl,#0x3A
   2347 C0 02              8557 	push	ar2
   2349 C0 03              8558 	push	ar3
   234B C0 04              8559 	push	ar4
   234D C0 05              8560 	push	ar5
   234F 12s00r00           8561 	lcall	_lcdputch
   2352 D0 05              8562 	pop	ar5
   2354 D0 04              8563 	pop	ar4
   2356 D0 03              8564 	pop	ar3
   2358 D0 02              8565 	pop	ar2
                           8566 ;	main4.c:969: lcdgotoxy('1','5');
                           8567 ;	genAssign
   235A 90s00r00           8568 	mov	dptr,#_lcdgotoxy_PARM_2
   235D 74 35              8569 	mov	a,#0x35
   235F F0                 8570 	movx	@dptr,a
                           8571 ;	genCall
   2360 75 82 31           8572 	mov	dpl,#0x31
   2363 C0 02              8573 	push	ar2
   2365 C0 03              8574 	push	ar3
   2367 C0 04              8575 	push	ar4
   2369 C0 05              8576 	push	ar5
   236B 12s00r00           8577 	lcall	_lcdgotoxy
   236E D0 05              8578 	pop	ar5
   2370 D0 04              8579 	pop	ar4
   2372 D0 03              8580 	pop	ar3
   2374 D0 02              8581 	pop	ar2
                           8582 ;	main4.c:970: lcdputch(s);
                           8583 ;	genAssign
   2376 90s00r98           8584 	mov	dptr,#_disp_4bytes_s_1_1
   2379 E0                 8585 	movx	a,@dptr
                           8586 ;	genCall
   237A FE                 8587 	mov	r6,a
                           8588 ;	Peephole 244.c	loading dpl from a instead of r6
   237B F5 82              8589 	mov	dpl,a
   237D C0 02              8590 	push	ar2
   237F C0 03              8591 	push	ar3
   2381 C0 04              8592 	push	ar4
   2383 C0 05              8593 	push	ar5
   2385 12s00r00           8594 	lcall	_lcdputch
   2388 D0 05              8595 	pop	ar5
   238A D0 04              8596 	pop	ar4
   238C D0 03              8597 	pop	ar3
   238E D0 02              8598 	pop	ar2
                           8599 ;	main4.c:971: lcdgotoxy('1','6');
                           8600 ;	genAssign
   2390 90s00r00           8601 	mov	dptr,#_lcdgotoxy_PARM_2
   2393 74 36              8602 	mov	a,#0x36
   2395 F0                 8603 	movx	@dptr,a
                           8604 ;	genCall
   2396 75 82 31           8605 	mov	dpl,#0x31
   2399 C0 02              8606 	push	ar2
   239B C0 03              8607 	push	ar3
   239D C0 04              8608 	push	ar4
   239F C0 05              8609 	push	ar5
   23A1 12s00r00           8610 	lcall	_lcdgotoxy
   23A4 D0 05              8611 	pop	ar5
   23A6 D0 04              8612 	pop	ar4
   23A8 D0 03              8613 	pop	ar3
   23AA D0 02              8614 	pop	ar2
                           8615 ;	main4.c:972: lcdputch(t);
                           8616 ;	genAssign
   23AC 90s00r99           8617 	mov	dptr,#_disp_4bytes_t_1_1
   23AF E0                 8618 	movx	a,@dptr
                           8619 ;	genCall
   23B0 FE                 8620 	mov	r6,a
                           8621 ;	Peephole 244.c	loading dpl from a instead of r6
   23B1 F5 82              8622 	mov	dpl,a
   23B3 C0 02              8623 	push	ar2
   23B5 C0 03              8624 	push	ar3
   23B7 C0 04              8625 	push	ar4
   23B9 C0 05              8626 	push	ar5
   23BB 12s00r00           8627 	lcall	_lcdputch
   23BE D0 05              8628 	pop	ar5
   23C0 D0 04              8629 	pop	ar4
   23C2 D0 03              8630 	pop	ar3
   23C4 D0 02              8631 	pop	ar2
                           8632 ;     genEndCritical
   23C6 A2*00              8633 	mov	c,_disp_4bytes_sloc0_1_0
   23C8 92 AF              8634 	mov	ea,c
   23CA                    8635 00159$:
                           8636 ;	main4.c:975: if (i==2)         //Printing to the LCD the 3st DATA/ADDR set
                           8637 ;	genCmpEq
                           8638 ;	gencjneshort
   23CA BC 02 05           8639 	cjne	r4,#0x02,00257$
   23CD BD 00 02           8640 	cjne	r5,#0x00,00257$
   23D0 80 03              8641 	sjmp	00258$
   23D2                    8642 00257$:
   23D2 02s25r52           8643 	ljmp	00161$
   23D5                    8644 00258$:
                           8645 ;	main4.c:995: }
                           8646 ;	genCritical
   23D5 D2*00              8647 	setb	_disp_4bytes_sloc0_1_0
   23D7 10 AF 02           8648 	jbc	ea,00259$
   23DA C2*00              8649 	clr	_disp_4bytes_sloc0_1_0
   23DC                    8650 00259$:
                           8651 ;	main4.c:981: lcdgotoxy('2','0');
                           8652 ;	genAssign
   23DC 90s00r00           8653 	mov	dptr,#_lcdgotoxy_PARM_2
   23DF 74 30              8654 	mov	a,#0x30
   23E1 F0                 8655 	movx	@dptr,a
                           8656 ;	genCall
   23E2 75 82 32           8657 	mov	dpl,#0x32
   23E5 C0 02              8658 	push	ar2
   23E7 C0 03              8659 	push	ar3
   23E9 C0 04              8660 	push	ar4
   23EB C0 05              8661 	push	ar5
   23ED 12s00r00           8662 	lcall	_lcdgotoxy
   23F0 D0 05              8663 	pop	ar5
   23F2 D0 04              8664 	pop	ar4
   23F4 D0 03              8665 	pop	ar3
   23F6 D0 02              8666 	pop	ar2
                           8667 ;	main4.c:982: lcdputch('0');
                           8668 ;	genCall
   23F8 75 82 30           8669 	mov	dpl,#0x30
   23FB C0 02              8670 	push	ar2
   23FD C0 03              8671 	push	ar3
   23FF C0 04              8672 	push	ar4
   2401 C0 05              8673 	push	ar5
   2403 12s00r00           8674 	lcall	_lcdputch
   2406 D0 05              8675 	pop	ar5
   2408 D0 04              8676 	pop	ar4
   240A D0 03              8677 	pop	ar3
   240C D0 02              8678 	pop	ar2
                           8679 ;	main4.c:983: lcdgotoxy('2','1');
                           8680 ;	genAssign
   240E 90s00r00           8681 	mov	dptr,#_lcdgotoxy_PARM_2
   2411 74 31              8682 	mov	a,#0x31
   2413 F0                 8683 	movx	@dptr,a
                           8684 ;	genCall
   2414 75 82 32           8685 	mov	dpl,#0x32
   2417 C0 02              8686 	push	ar2
   2419 C0 03              8687 	push	ar3
   241B C0 04              8688 	push	ar4
   241D C0 05              8689 	push	ar5
   241F 12s00r00           8690 	lcall	_lcdgotoxy
   2422 D0 05              8691 	pop	ar5
   2424 D0 04              8692 	pop	ar4
   2426 D0 03              8693 	pop	ar3
   2428 D0 02              8694 	pop	ar2
                           8695 ;	main4.c:984: lcdputch(p);
                           8696 ;	genAssign
   242A 90s00r95           8697 	mov	dptr,#_disp_4bytes_p_1_1
   242D E0                 8698 	movx	a,@dptr
                           8699 ;	genCall
   242E FE                 8700 	mov	r6,a
                           8701 ;	Peephole 244.c	loading dpl from a instead of r6
   242F F5 82              8702 	mov	dpl,a
   2431 C0 02              8703 	push	ar2
   2433 C0 03              8704 	push	ar3
   2435 C0 04              8705 	push	ar4
   2437 C0 05              8706 	push	ar5
   2439 12s00r00           8707 	lcall	_lcdputch
   243C D0 05              8708 	pop	ar5
   243E D0 04              8709 	pop	ar4
   2440 D0 03              8710 	pop	ar3
   2442 D0 02              8711 	pop	ar2
                           8712 ;	main4.c:985: lcdgotoxy('2','2');
                           8713 ;	genAssign
   2444 90s00r00           8714 	mov	dptr,#_lcdgotoxy_PARM_2
   2447 74 32              8715 	mov	a,#0x32
   2449 F0                 8716 	movx	@dptr,a
                           8717 ;	genCall
   244A 75 82 32           8718 	mov	dpl,#0x32
   244D C0 02              8719 	push	ar2
   244F C0 03              8720 	push	ar3
   2451 C0 04              8721 	push	ar4
   2453 C0 05              8722 	push	ar5
   2455 12s00r00           8723 	lcall	_lcdgotoxy
   2458 D0 05              8724 	pop	ar5
   245A D0 04              8725 	pop	ar4
   245C D0 03              8726 	pop	ar3
   245E D0 02              8727 	pop	ar2
                           8728 ;	main4.c:986: lcdputch(q);
                           8729 ;	genAssign
   2460 90s00r96           8730 	mov	dptr,#_disp_4bytes_q_1_1
   2463 E0                 8731 	movx	a,@dptr
                           8732 ;	genCall
   2464 FE                 8733 	mov	r6,a
                           8734 ;	Peephole 244.c	loading dpl from a instead of r6
   2465 F5 82              8735 	mov	dpl,a
   2467 C0 02              8736 	push	ar2
   2469 C0 03              8737 	push	ar3
   246B C0 04              8738 	push	ar4
   246D C0 05              8739 	push	ar5
   246F 12s00r00           8740 	lcall	_lcdputch
   2472 D0 05              8741 	pop	ar5
   2474 D0 04              8742 	pop	ar4
   2476 D0 03              8743 	pop	ar3
   2478 D0 02              8744 	pop	ar2
                           8745 ;	main4.c:987: lcdgotoxy('2','3');
                           8746 ;	genAssign
   247A 90s00r00           8747 	mov	dptr,#_lcdgotoxy_PARM_2
   247D 74 33              8748 	mov	a,#0x33
   247F F0                 8749 	movx	@dptr,a
                           8750 ;	genCall
   2480 75 82 32           8751 	mov	dpl,#0x32
   2483 C0 02              8752 	push	ar2
   2485 C0 03              8753 	push	ar3
   2487 C0 04              8754 	push	ar4
   2489 C0 05              8755 	push	ar5
   248B 12s00r00           8756 	lcall	_lcdgotoxy
   248E D0 05              8757 	pop	ar5
   2490 D0 04              8758 	pop	ar4
   2492 D0 03              8759 	pop	ar3
   2494 D0 02              8760 	pop	ar2
                           8761 ;	main4.c:988: lcdputch(r);
                           8762 ;	genAssign
   2496 90s00r97           8763 	mov	dptr,#_disp_4bytes_r_1_1
   2499 E0                 8764 	movx	a,@dptr
                           8765 ;	genCall
   249A FE                 8766 	mov	r6,a
                           8767 ;	Peephole 244.c	loading dpl from a instead of r6
   249B F5 82              8768 	mov	dpl,a
   249D C0 02              8769 	push	ar2
   249F C0 03              8770 	push	ar3
   24A1 C0 04              8771 	push	ar4
   24A3 C0 05              8772 	push	ar5
   24A5 12s00r00           8773 	lcall	_lcdputch
   24A8 D0 05              8774 	pop	ar5
   24AA D0 04              8775 	pop	ar4
   24AC D0 03              8776 	pop	ar3
   24AE D0 02              8777 	pop	ar2
                           8778 ;	main4.c:989: lcdgotoxy('2','4');
                           8779 ;	genAssign
   24B0 90s00r00           8780 	mov	dptr,#_lcdgotoxy_PARM_2
   24B3 74 34              8781 	mov	a,#0x34
   24B5 F0                 8782 	movx	@dptr,a
                           8783 ;	genCall
   24B6 75 82 32           8784 	mov	dpl,#0x32
   24B9 C0 02              8785 	push	ar2
   24BB C0 03              8786 	push	ar3
   24BD C0 04              8787 	push	ar4
   24BF C0 05              8788 	push	ar5
   24C1 12s00r00           8789 	lcall	_lcdgotoxy
   24C4 D0 05              8790 	pop	ar5
   24C6 D0 04              8791 	pop	ar4
   24C8 D0 03              8792 	pop	ar3
   24CA D0 02              8793 	pop	ar2
                           8794 ;	main4.c:990: lcdputch(':');
                           8795 ;	genCall
   24CC 75 82 3A           8796 	mov	dpl,#0x3A
   24CF C0 02              8797 	push	ar2
   24D1 C0 03              8798 	push	ar3
   24D3 C0 04              8799 	push	ar4
   24D5 C0 05              8800 	push	ar5
   24D7 12s00r00           8801 	lcall	_lcdputch
   24DA D0 05              8802 	pop	ar5
   24DC D0 04              8803 	pop	ar4
   24DE D0 03              8804 	pop	ar3
   24E0 D0 02              8805 	pop	ar2
                           8806 ;	main4.c:991: lcdgotoxy('2','5');
                           8807 ;	genAssign
   24E2 90s00r00           8808 	mov	dptr,#_lcdgotoxy_PARM_2
   24E5 74 35              8809 	mov	a,#0x35
   24E7 F0                 8810 	movx	@dptr,a
                           8811 ;	genCall
   24E8 75 82 32           8812 	mov	dpl,#0x32
   24EB C0 02              8813 	push	ar2
   24ED C0 03              8814 	push	ar3
   24EF C0 04              8815 	push	ar4
   24F1 C0 05              8816 	push	ar5
   24F3 12s00r00           8817 	lcall	_lcdgotoxy
   24F6 D0 05              8818 	pop	ar5
   24F8 D0 04              8819 	pop	ar4
   24FA D0 03              8820 	pop	ar3
   24FC D0 02              8821 	pop	ar2
                           8822 ;	main4.c:992: lcdputch(s);
                           8823 ;	genAssign
   24FE 90s00r98           8824 	mov	dptr,#_disp_4bytes_s_1_1
   2501 E0                 8825 	movx	a,@dptr
                           8826 ;	genCall
   2502 FE                 8827 	mov	r6,a
                           8828 ;	Peephole 244.c	loading dpl from a instead of r6
   2503 F5 82              8829 	mov	dpl,a
   2505 C0 02              8830 	push	ar2
   2507 C0 03              8831 	push	ar3
   2509 C0 04              8832 	push	ar4
   250B C0 05              8833 	push	ar5
   250D 12s00r00           8834 	lcall	_lcdputch
   2510 D0 05              8835 	pop	ar5
   2512 D0 04              8836 	pop	ar4
   2514 D0 03              8837 	pop	ar3
   2516 D0 02              8838 	pop	ar2
                           8839 ;	main4.c:993: lcdgotoxy('2','6');
                           8840 ;	genAssign
   2518 90s00r00           8841 	mov	dptr,#_lcdgotoxy_PARM_2
   251B 74 36              8842 	mov	a,#0x36
   251D F0                 8843 	movx	@dptr,a
                           8844 ;	genCall
   251E 75 82 32           8845 	mov	dpl,#0x32
   2521 C0 02              8846 	push	ar2
   2523 C0 03              8847 	push	ar3
   2525 C0 04              8848 	push	ar4
   2527 C0 05              8849 	push	ar5
   2529 12s00r00           8850 	lcall	_lcdgotoxy
   252C D0 05              8851 	pop	ar5
   252E D0 04              8852 	pop	ar4
   2530 D0 03              8853 	pop	ar3
   2532 D0 02              8854 	pop	ar2
                           8855 ;	main4.c:994: lcdputch(t);
                           8856 ;	genAssign
   2534 90s00r99           8857 	mov	dptr,#_disp_4bytes_t_1_1
   2537 E0                 8858 	movx	a,@dptr
                           8859 ;	genCall
   2538 FE                 8860 	mov	r6,a
                           8861 ;	Peephole 244.c	loading dpl from a instead of r6
   2539 F5 82              8862 	mov	dpl,a
   253B C0 02              8863 	push	ar2
   253D C0 03              8864 	push	ar3
   253F C0 04              8865 	push	ar4
   2541 C0 05              8866 	push	ar5
   2543 12s00r00           8867 	lcall	_lcdputch
   2546 D0 05              8868 	pop	ar5
   2548 D0 04              8869 	pop	ar4
   254A D0 03              8870 	pop	ar3
   254C D0 02              8871 	pop	ar2
                           8872 ;     genEndCritical
   254E A2*00              8873 	mov	c,_disp_4bytes_sloc0_1_0
   2550 92 AF              8874 	mov	ea,c
   2552                    8875 00161$:
                           8876 ;	main4.c:997: if (i==3)         //Printing to the LCD the 4th DATA/ADDR set
                           8877 ;	genCmpEq
                           8878 ;	gencjneshort
   2552 BC 03 05           8879 	cjne	r4,#0x03,00260$
   2555 BD 00 02           8880 	cjne	r5,#0x00,00260$
   2558 80 03              8881 	sjmp	00261$
   255A                    8882 00260$:
   255A 02s26rDA           8883 	ljmp	00166$
   255D                    8884 00261$:
                           8885 ;	main4.c:1017: }
                           8886 ;	genCritical
   255D D2*00              8887 	setb	_disp_4bytes_sloc0_1_0
   255F 10 AF 02           8888 	jbc	ea,00262$
   2562 C2*00              8889 	clr	_disp_4bytes_sloc0_1_0
   2564                    8890 00262$:
                           8891 ;	main4.c:1003: lcdgotoxy('3','0');
                           8892 ;	genAssign
   2564 90s00r00           8893 	mov	dptr,#_lcdgotoxy_PARM_2
   2567 74 30              8894 	mov	a,#0x30
   2569 F0                 8895 	movx	@dptr,a
                           8896 ;	genCall
   256A 75 82 33           8897 	mov	dpl,#0x33
   256D C0 02              8898 	push	ar2
   256F C0 03              8899 	push	ar3
   2571 C0 04              8900 	push	ar4
   2573 C0 05              8901 	push	ar5
   2575 12s00r00           8902 	lcall	_lcdgotoxy
   2578 D0 05              8903 	pop	ar5
   257A D0 04              8904 	pop	ar4
   257C D0 03              8905 	pop	ar3
   257E D0 02              8906 	pop	ar2
                           8907 ;	main4.c:1004: lcdputch('0');
                           8908 ;	genCall
   2580 75 82 30           8909 	mov	dpl,#0x30
   2583 C0 02              8910 	push	ar2
   2585 C0 03              8911 	push	ar3
   2587 C0 04              8912 	push	ar4
   2589 C0 05              8913 	push	ar5
   258B 12s00r00           8914 	lcall	_lcdputch
   258E D0 05              8915 	pop	ar5
   2590 D0 04              8916 	pop	ar4
   2592 D0 03              8917 	pop	ar3
   2594 D0 02              8918 	pop	ar2
                           8919 ;	main4.c:1005: lcdgotoxy('3','1');
                           8920 ;	genAssign
   2596 90s00r00           8921 	mov	dptr,#_lcdgotoxy_PARM_2
   2599 74 31              8922 	mov	a,#0x31
   259B F0                 8923 	movx	@dptr,a
                           8924 ;	genCall
   259C 75 82 33           8925 	mov	dpl,#0x33
   259F C0 02              8926 	push	ar2
   25A1 C0 03              8927 	push	ar3
   25A3 C0 04              8928 	push	ar4
   25A5 C0 05              8929 	push	ar5
   25A7 12s00r00           8930 	lcall	_lcdgotoxy
   25AA D0 05              8931 	pop	ar5
   25AC D0 04              8932 	pop	ar4
   25AE D0 03              8933 	pop	ar3
   25B0 D0 02              8934 	pop	ar2
                           8935 ;	main4.c:1006: lcdputch(p);
                           8936 ;	genAssign
   25B2 90s00r95           8937 	mov	dptr,#_disp_4bytes_p_1_1
   25B5 E0                 8938 	movx	a,@dptr
                           8939 ;	genCall
   25B6 FE                 8940 	mov	r6,a
                           8941 ;	Peephole 244.c	loading dpl from a instead of r6
   25B7 F5 82              8942 	mov	dpl,a
   25B9 C0 02              8943 	push	ar2
   25BB C0 03              8944 	push	ar3
   25BD C0 04              8945 	push	ar4
   25BF C0 05              8946 	push	ar5
   25C1 12s00r00           8947 	lcall	_lcdputch
   25C4 D0 05              8948 	pop	ar5
   25C6 D0 04              8949 	pop	ar4
   25C8 D0 03              8950 	pop	ar3
   25CA D0 02              8951 	pop	ar2
                           8952 ;	main4.c:1007: lcdgotoxy('3','2');
                           8953 ;	genAssign
   25CC 90s00r00           8954 	mov	dptr,#_lcdgotoxy_PARM_2
   25CF 74 32              8955 	mov	a,#0x32
   25D1 F0                 8956 	movx	@dptr,a
                           8957 ;	genCall
   25D2 75 82 33           8958 	mov	dpl,#0x33
   25D5 C0 02              8959 	push	ar2
   25D7 C0 03              8960 	push	ar3
   25D9 C0 04              8961 	push	ar4
   25DB C0 05              8962 	push	ar5
   25DD 12s00r00           8963 	lcall	_lcdgotoxy
   25E0 D0 05              8964 	pop	ar5
   25E2 D0 04              8965 	pop	ar4
   25E4 D0 03              8966 	pop	ar3
   25E6 D0 02              8967 	pop	ar2
                           8968 ;	main4.c:1008: lcdputch(q);
                           8969 ;	genAssign
   25E8 90s00r96           8970 	mov	dptr,#_disp_4bytes_q_1_1
   25EB E0                 8971 	movx	a,@dptr
                           8972 ;	genCall
   25EC FE                 8973 	mov	r6,a
                           8974 ;	Peephole 244.c	loading dpl from a instead of r6
   25ED F5 82              8975 	mov	dpl,a
   25EF C0 02              8976 	push	ar2
   25F1 C0 03              8977 	push	ar3
   25F3 C0 04              8978 	push	ar4
   25F5 C0 05              8979 	push	ar5
   25F7 12s00r00           8980 	lcall	_lcdputch
   25FA D0 05              8981 	pop	ar5
   25FC D0 04              8982 	pop	ar4
   25FE D0 03              8983 	pop	ar3
   2600 D0 02              8984 	pop	ar2
                           8985 ;	main4.c:1009: lcdgotoxy('3','3');
                           8986 ;	genAssign
   2602 90s00r00           8987 	mov	dptr,#_lcdgotoxy_PARM_2
   2605 74 33              8988 	mov	a,#0x33
   2607 F0                 8989 	movx	@dptr,a
                           8990 ;	genCall
   2608 75 82 33           8991 	mov	dpl,#0x33
   260B C0 02              8992 	push	ar2
   260D C0 03              8993 	push	ar3
   260F C0 04              8994 	push	ar4
   2611 C0 05              8995 	push	ar5
   2613 12s00r00           8996 	lcall	_lcdgotoxy
   2616 D0 05              8997 	pop	ar5
   2618 D0 04              8998 	pop	ar4
   261A D0 03              8999 	pop	ar3
   261C D0 02              9000 	pop	ar2
                           9001 ;	main4.c:1010: lcdputch(r);
                           9002 ;	genAssign
   261E 90s00r97           9003 	mov	dptr,#_disp_4bytes_r_1_1
   2621 E0                 9004 	movx	a,@dptr
                           9005 ;	genCall
   2622 FE                 9006 	mov	r6,a
                           9007 ;	Peephole 244.c	loading dpl from a instead of r6
   2623 F5 82              9008 	mov	dpl,a
   2625 C0 02              9009 	push	ar2
   2627 C0 03              9010 	push	ar3
   2629 C0 04              9011 	push	ar4
   262B C0 05              9012 	push	ar5
   262D 12s00r00           9013 	lcall	_lcdputch
   2630 D0 05              9014 	pop	ar5
   2632 D0 04              9015 	pop	ar4
   2634 D0 03              9016 	pop	ar3
   2636 D0 02              9017 	pop	ar2
                           9018 ;	main4.c:1011: lcdgotoxy('3','4');
                           9019 ;	genAssign
   2638 90s00r00           9020 	mov	dptr,#_lcdgotoxy_PARM_2
   263B 74 34              9021 	mov	a,#0x34
   263D F0                 9022 	movx	@dptr,a
                           9023 ;	genCall
   263E 75 82 33           9024 	mov	dpl,#0x33
   2641 C0 02              9025 	push	ar2
   2643 C0 03              9026 	push	ar3
   2645 C0 04              9027 	push	ar4
   2647 C0 05              9028 	push	ar5
   2649 12s00r00           9029 	lcall	_lcdgotoxy
   264C D0 05              9030 	pop	ar5
   264E D0 04              9031 	pop	ar4
   2650 D0 03              9032 	pop	ar3
   2652 D0 02              9033 	pop	ar2
                           9034 ;	main4.c:1012: lcdputch(':');
                           9035 ;	genCall
   2654 75 82 3A           9036 	mov	dpl,#0x3A
   2657 C0 02              9037 	push	ar2
   2659 C0 03              9038 	push	ar3
   265B C0 04              9039 	push	ar4
   265D C0 05              9040 	push	ar5
   265F 12s00r00           9041 	lcall	_lcdputch
   2662 D0 05              9042 	pop	ar5
   2664 D0 04              9043 	pop	ar4
   2666 D0 03              9044 	pop	ar3
   2668 D0 02              9045 	pop	ar2
                           9046 ;	main4.c:1013: lcdgotoxy('3','5');
                           9047 ;	genAssign
   266A 90s00r00           9048 	mov	dptr,#_lcdgotoxy_PARM_2
   266D 74 35              9049 	mov	a,#0x35
   266F F0                 9050 	movx	@dptr,a
                           9051 ;	genCall
   2670 75 82 33           9052 	mov	dpl,#0x33
   2673 C0 02              9053 	push	ar2
   2675 C0 03              9054 	push	ar3
   2677 C0 04              9055 	push	ar4
   2679 C0 05              9056 	push	ar5
   267B 12s00r00           9057 	lcall	_lcdgotoxy
   267E D0 05              9058 	pop	ar5
   2680 D0 04              9059 	pop	ar4
   2682 D0 03              9060 	pop	ar3
   2684 D0 02              9061 	pop	ar2
                           9062 ;	main4.c:1014: lcdputch(s);
                           9063 ;	genAssign
   2686 90s00r98           9064 	mov	dptr,#_disp_4bytes_s_1_1
   2689 E0                 9065 	movx	a,@dptr
                           9066 ;	genCall
   268A FE                 9067 	mov	r6,a
                           9068 ;	Peephole 244.c	loading dpl from a instead of r6
   268B F5 82              9069 	mov	dpl,a
   268D C0 02              9070 	push	ar2
   268F C0 03              9071 	push	ar3
   2691 C0 04              9072 	push	ar4
   2693 C0 05              9073 	push	ar5
   2695 12s00r00           9074 	lcall	_lcdputch
   2698 D0 05              9075 	pop	ar5
   269A D0 04              9076 	pop	ar4
   269C D0 03              9077 	pop	ar3
   269E D0 02              9078 	pop	ar2
                           9079 ;	main4.c:1015: lcdgotoxy('3','6');
                           9080 ;	genAssign
   26A0 90s00r00           9081 	mov	dptr,#_lcdgotoxy_PARM_2
   26A3 74 36              9082 	mov	a,#0x36
   26A5 F0                 9083 	movx	@dptr,a
                           9084 ;	genCall
   26A6 75 82 33           9085 	mov	dpl,#0x33
   26A9 C0 02              9086 	push	ar2
   26AB C0 03              9087 	push	ar3
   26AD C0 04              9088 	push	ar4
   26AF C0 05              9089 	push	ar5
   26B1 12s00r00           9090 	lcall	_lcdgotoxy
   26B4 D0 05              9091 	pop	ar5
   26B6 D0 04              9092 	pop	ar4
   26B8 D0 03              9093 	pop	ar3
   26BA D0 02              9094 	pop	ar2
                           9095 ;	main4.c:1016: lcdputch(t);
                           9096 ;	genAssign
   26BC 90s00r99           9097 	mov	dptr,#_disp_4bytes_t_1_1
   26BF E0                 9098 	movx	a,@dptr
                           9099 ;	genCall
   26C0 FE                 9100 	mov	r6,a
                           9101 ;	Peephole 244.c	loading dpl from a instead of r6
   26C1 F5 82              9102 	mov	dpl,a
   26C3 C0 02              9103 	push	ar2
   26C5 C0 03              9104 	push	ar3
   26C7 C0 04              9105 	push	ar4
   26C9 C0 05              9106 	push	ar5
   26CB 12s00r00           9107 	lcall	_lcdputch
   26CE D0 05              9108 	pop	ar5
   26D0 D0 04              9109 	pop	ar4
   26D2 D0 03              9110 	pop	ar3
   26D4 D0 02              9111 	pop	ar2
                           9112 ;     genEndCritical
   26D6 A2*00              9113 	mov	c,_disp_4bytes_sloc0_1_0
   26D8 92 AF              9114 	mov	ea,c
   26DA                    9115 00166$:
                           9116 ;	main4.c:836: for(i=0;i<4;i++)
                           9117 ;	genPlus
                           9118 ;     genPlusIncr
   26DA 0C                 9119 	inc	r4
   26DB BC 00 01           9120 	cjne	r4,#0x00,00263$
   26DE 0D                 9121 	inc	r5
   26DF                    9122 00263$:
   26DF 02s1Dr13           9123 	ljmp	00164$
   26E2                    9124 00211$:
                           9125 ;	genAssign
   26E2 90s00r8F           9126 	mov	dptr,#_disp_4bytes_startadd_1_1
   26E5 EA                 9127 	mov	a,r2
   26E6 F0                 9128 	movx	@dptr,a
   26E7 A3                 9129 	inc	dptr
   26E8 EB                 9130 	mov	a,r3
   26E9 F0                 9131 	movx	@dptr,a
                           9132 ;	Peephole 300	removed redundant label 00168$
   26EA 22                 9133 	ret
                           9134 ;------------------------------------------------------------
                           9135 ;Allocation info for local variables in function 'block_print'
                           9136 ;------------------------------------------------------------
                           9137 ;length                    Allocated with name '_block_print_PARM_2'
                           9138 ;startadd                  Allocated with name '_block_print_startadd_1_1'
                           9139 ;i                         Allocated with name '_block_print_i_1_1'
                           9140 ;j                         Allocated with name '_block_print_j_1_1'
                           9141 ;rem                       Allocated with name '_block_print_rem_1_1'
                           9142 ;dta                       Allocated with name '_block_print_dta_1_1'
                           9143 ;------------------------------------------------------------
                           9144 ;	main4.c:1027: int block_print(int startadd,int length)
                           9145 ;	-----------------------------------------
                           9146 ;	 function block_print
                           9147 ;	-----------------------------------------
   26EB                    9148 _block_print:
                           9149 ;	genReceive
   26EB AA 83              9150 	mov	r2,dph
   26ED E5 82              9151 	mov	a,dpl
   26EF 90s00r9C           9152 	mov	dptr,#_block_print_startadd_1_1
   26F2 F0                 9153 	movx	@dptr,a
   26F3 A3                 9154 	inc	dptr
   26F4 EA                 9155 	mov	a,r2
   26F5 F0                 9156 	movx	@dptr,a
                           9157 ;	main4.c:1031: printf("\n\n\r--------------------------------------------------------------------------------");
                           9158 ;	genIpush
   26F6 74r3A              9159 	mov	a,#__str_88
   26F8 C0 E0              9160 	push	acc
   26FA 74s0E              9161 	mov	a,#(__str_88 >> 8)
   26FC C0 E0              9162 	push	acc
   26FE 74 80              9163 	mov	a,#0x80
   2700 C0 E0              9164 	push	acc
                           9165 ;	genCall
   2702 12s00r00           9166 	lcall	_printf
   2705 15 81              9167 	dec	sp
   2707 15 81              9168 	dec	sp
   2709 15 81              9169 	dec	sp
                           9170 ;	main4.c:1032: printf("\n\r                              EEPROM Contents");
                           9171 ;	genIpush
   270B 74r8E              9172 	mov	a,#__str_89
   270D C0 E0              9173 	push	acc
   270F 74s0E              9174 	mov	a,#(__str_89 >> 8)
   2711 C0 E0              9175 	push	acc
   2713 74 80              9176 	mov	a,#0x80
   2715 C0 E0              9177 	push	acc
                           9178 ;	genCall
   2717 12s00r00           9179 	lcall	_printf
   271A 15 81              9180 	dec	sp
   271C 15 81              9181 	dec	sp
   271E 15 81              9182 	dec	sp
                           9183 ;	main4.c:1033: printf("\n\r--------------------------------------------------------------------------------");
                           9184 ;	genIpush
   2720 74r3A              9185 	mov	a,#__str_18
   2722 C0 E0              9186 	push	acc
   2724 74s03              9187 	mov	a,#(__str_18 >> 8)
   2726 C0 E0              9188 	push	acc
   2728 74 80              9189 	mov	a,#0x80
   272A C0 E0              9190 	push	acc
                           9191 ;	genCall
   272C 12s00r00           9192 	lcall	_printf
   272F 15 81              9193 	dec	sp
   2731 15 81              9194 	dec	sp
   2733 15 81              9195 	dec	sp
                           9196 ;	main4.c:1034: printf("\n\rAAAA: 00 |01 |02 |03 |04 |05 |06 |07 |08 |09 |0A |0B |0C |0D |0E |0F");
                           9197 ;	genIpush
   2735 74rBE              9198 	mov	a,#__str_90
   2737 C0 E0              9199 	push	acc
   2739 74s0E              9200 	mov	a,#(__str_90 >> 8)
   273B C0 E0              9201 	push	acc
   273D 74 80              9202 	mov	a,#0x80
   273F C0 E0              9203 	push	acc
                           9204 ;	genCall
   2741 12s00r00           9205 	lcall	_printf
   2744 15 81              9206 	dec	sp
   2746 15 81              9207 	dec	sp
   2748 15 81              9208 	dec	sp
                           9209 ;	main4.c:1035: printf("\n\r--------------------------------------------------------------------------------");
                           9210 ;	genIpush
   274A 74r3A              9211 	mov	a,#__str_18
   274C C0 E0              9212 	push	acc
   274E 74s03              9213 	mov	a,#(__str_18 >> 8)
   2750 C0 E0              9214 	push	acc
   2752 74 80              9215 	mov	a,#0x80
   2754 C0 E0              9216 	push	acc
                           9217 ;	genCall
   2756 12s00r00           9218 	lcall	_printf
   2759 15 81              9219 	dec	sp
   275B 15 81              9220 	dec	sp
   275D 15 81              9221 	dec	sp
                           9222 ;	main4.c:1037: rem=startadd%16;
                           9223 ;	genAssign
   275F 90s00r9C           9224 	mov	dptr,#_block_print_startadd_1_1
   2762 E0                 9225 	movx	a,@dptr
   2763 FA                 9226 	mov	r2,a
   2764 A3                 9227 	inc	dptr
   2765 E0                 9228 	movx	a,@dptr
   2766 FB                 9229 	mov	r3,a
                           9230 ;	genAssign
   2767 90s00r00           9231 	mov	dptr,#__modsint_PARM_2
   276A 74 10              9232 	mov	a,#0x10
   276C F0                 9233 	movx	@dptr,a
   276D E4                 9234 	clr	a
   276E A3                 9235 	inc	dptr
   276F F0                 9236 	movx	@dptr,a
                           9237 ;	main4.c:1038: printf("\n\r%04X: ",startadd-rem);
                           9238 ;	genCall
   2770 8A 82              9239 	mov	dpl,r2
   2772 8B 83              9240 	mov	dph,r3
   2774 C0 02              9241 	push	ar2
   2776 C0 03              9242 	push	ar3
   2778 12s00r00           9243 	lcall	__modsint
   277B AC 82              9244 	mov	r4,dpl
   277D AD 83              9245 	mov	r5,dph
   277F D0 03              9246 	pop	ar3
   2781 D0 02              9247 	pop	ar2
                           9248 ;	genMinus
   2783 EA                 9249 	mov	a,r2
   2784 C3                 9250 	clr	c
                           9251 ;	Peephole 236.l	used r4 instead of ar4
   2785 9C                 9252 	subb	a,r4
   2786 FA                 9253 	mov	r2,a
   2787 EB                 9254 	mov	a,r3
                           9255 ;	Peephole 236.l	used r5 instead of ar5
   2788 9D                 9256 	subb	a,r5
   2789 FB                 9257 	mov	r3,a
                           9258 ;	genIpush
   278A C0 04              9259 	push	ar4
   278C C0 05              9260 	push	ar5
   278E C0 02              9261 	push	ar2
   2790 C0 03              9262 	push	ar3
                           9263 ;	genIpush
   2792 74r05              9264 	mov	a,#__str_91
   2794 C0 E0              9265 	push	acc
   2796 74s0F              9266 	mov	a,#(__str_91 >> 8)
   2798 C0 E0              9267 	push	acc
   279A 74 80              9268 	mov	a,#0x80
   279C C0 E0              9269 	push	acc
                           9270 ;	genCall
   279E 12s00r00           9271 	lcall	_printf
   27A1 E5 81              9272 	mov	a,sp
   27A3 24 FB              9273 	add	a,#0xfb
   27A5 F5 81              9274 	mov	sp,a
   27A7 D0 05              9275 	pop	ar5
   27A9 D0 04              9276 	pop	ar4
                           9277 ;	main4.c:1040: if ((rem)!=0)
                           9278 ;	genCmpEq
                           9279 ;	gencjneshort
   27AB BC 00 05           9280 	cjne	r4,#0x00,00123$
   27AE BD 00 02           9281 	cjne	r5,#0x00,00123$
                           9282 ;	Peephole 112.b	changed ljmp to sjmp
   27B1 80 3F              9283 	sjmp	00102$
   27B3                    9284 00123$:
                           9285 ;	main4.c:1042: for(i=0;i<rem;i++)
                           9286 ;	genAssign
   27B3 7A 00              9287 	mov	r2,#0x00
   27B5 7B 00              9288 	mov	r3,#0x00
   27B7                    9289 00105$:
                           9290 ;	genCmpLt
                           9291 ;	genCmp
   27B7 C3                 9292 	clr	c
   27B8 EA                 9293 	mov	a,r2
   27B9 9C                 9294 	subb	a,r4
   27BA EB                 9295 	mov	a,r3
   27BB 64 80              9296 	xrl	a,#0x80
   27BD 8D F0              9297 	mov	b,r5
   27BF 63 F0 80           9298 	xrl	b,#0x80
   27C2 95 F0              9299 	subb	a,b
                           9300 ;	genIfxJump
                           9301 ;	Peephole 108.a	removed ljmp by inverse jump logic
   27C4 50 2C              9302 	jnc	00102$
                           9303 ;	Peephole 300	removed redundant label 00124$
                           9304 ;	main4.c:1044: printf("    ");
                           9305 ;	genIpush
   27C6 C0 02              9306 	push	ar2
   27C8 C0 03              9307 	push	ar3
   27CA C0 04              9308 	push	ar4
   27CC C0 05              9309 	push	ar5
   27CE 74r0E              9310 	mov	a,#__str_92
   27D0 C0 E0              9311 	push	acc
   27D2 74s0F              9312 	mov	a,#(__str_92 >> 8)
   27D4 C0 E0              9313 	push	acc
   27D6 74 80              9314 	mov	a,#0x80
   27D8 C0 E0              9315 	push	acc
                           9316 ;	genCall
   27DA 12s00r00           9317 	lcall	_printf
   27DD 15 81              9318 	dec	sp
   27DF 15 81              9319 	dec	sp
   27E1 15 81              9320 	dec	sp
   27E3 D0 05              9321 	pop	ar5
   27E5 D0 04              9322 	pop	ar4
   27E7 D0 03              9323 	pop	ar3
   27E9 D0 02              9324 	pop	ar2
                           9325 ;	main4.c:1042: for(i=0;i<rem;i++)
                           9326 ;	genPlus
                           9327 ;     genPlusIncr
   27EB 0A                 9328 	inc	r2
                           9329 ;	Peephole 112.b	changed ljmp to sjmp
                           9330 ;	Peephole 243	avoided branch to sjmp
   27EC BA 00 C8           9331 	cjne	r2,#0x00,00105$
   27EF 0B                 9332 	inc	r3
                           9333 ;	Peephole 300	removed redundant label 00125$
   27F0 80 C5              9334 	sjmp	00105$
   27F2                    9335 00102$:
                           9336 ;	main4.c:1049: j=rem;      //assigns j  the remainder value
                           9337 ;	genAssign
   27F2 90s00r9E           9338 	mov	dptr,#_block_print_j_1_1
   27F5 EC                 9339 	mov	a,r4
   27F6 F0                 9340 	movx	@dptr,a
   27F7 A3                 9341 	inc	dptr
   27F8 ED                 9342 	mov	a,r5
   27F9 F0                 9343 	movx	@dptr,a
                           9344 ;	main4.c:1050: for(i=0;i<length+1;i++)
                           9345 ;	genAssign
   27FA 90s00r9A           9346 	mov	dptr,#_block_print_PARM_2
   27FD E0                 9347 	movx	a,@dptr
   27FE FA                 9348 	mov	r2,a
   27FF A3                 9349 	inc	dptr
   2800 E0                 9350 	movx	a,@dptr
   2801 FB                 9351 	mov	r3,a
                           9352 ;	genPlus
                           9353 ;     genPlusIncr
   2802 0A                 9354 	inc	r2
   2803 BA 00 01           9355 	cjne	r2,#0x00,00126$
   2806 0B                 9356 	inc	r3
   2807                    9357 00126$:
                           9358 ;	genAssign
   2807 90s00r9C           9359 	mov	dptr,#_block_print_startadd_1_1
   280A E0                 9360 	movx	a,@dptr
   280B FC                 9361 	mov	r4,a
   280C A3                 9362 	inc	dptr
   280D E0                 9363 	movx	a,@dptr
   280E FD                 9364 	mov	r5,a
                           9365 ;	genAssign
   280F 7E 00              9366 	mov	r6,#0x00
   2811 7F 00              9367 	mov	r7,#0x00
   2813                    9368 00109$:
                           9369 ;	genCmpLt
                           9370 ;	genCmp
   2813 C3                 9371 	clr	c
   2814 EE                 9372 	mov	a,r6
   2815 9A                 9373 	subb	a,r2
   2816 EF                 9374 	mov	a,r7
   2817 64 80              9375 	xrl	a,#0x80
   2819 8B F0              9376 	mov	b,r3
   281B 63 F0 80           9377 	xrl	b,#0x80
   281E 95 F0              9378 	subb	a,b
                           9379 ;	genIfxJump
   2820 40 03              9380 	jc	00127$
   2822 02s28rEE           9381 	ljmp	00122$
   2825                    9382 00127$:
                           9383 ;	main4.c:1052: dta=eebyter(startadd);      //reads the data from EEPROM
                           9384 ;	genCall
   2825 8C 82              9385 	mov	dpl,r4
   2827 8D 83              9386 	mov	dph,r5
   2829 C0 02              9387 	push	ar2
   282B C0 03              9388 	push	ar3
   282D C0 04              9389 	push	ar4
   282F C0 05              9390 	push	ar5
   2831 C0 06              9391 	push	ar6
   2833 C0 07              9392 	push	ar7
   2835 12s00r00           9393 	lcall	_eebyter
   2838 A8 82              9394 	mov	r0,dpl
   283A A9 83              9395 	mov	r1,dph
   283C D0 07              9396 	pop	ar7
   283E D0 06              9397 	pop	ar6
   2840 D0 05              9398 	pop	ar5
   2842 D0 04              9399 	pop	ar4
   2844 D0 03              9400 	pop	ar3
   2846 D0 02              9401 	pop	ar2
                           9402 ;	main4.c:1055: printf("%X  ",dta);         //prints the DATA to terminal
                           9403 ;	genIpush
   2848 C0 02              9404 	push	ar2
   284A C0 03              9405 	push	ar3
   284C C0 04              9406 	push	ar4
   284E C0 05              9407 	push	ar5
   2850 C0 06              9408 	push	ar6
   2852 C0 07              9409 	push	ar7
   2854 C0 00              9410 	push	ar0
   2856 C0 01              9411 	push	ar1
                           9412 ;	genIpush
   2858 74r13              9413 	mov	a,#__str_93
   285A C0 E0              9414 	push	acc
   285C 74s0F              9415 	mov	a,#(__str_93 >> 8)
   285E C0 E0              9416 	push	acc
   2860 74 80              9417 	mov	a,#0x80
   2862 C0 E0              9418 	push	acc
                           9419 ;	genCall
   2864 12s00r00           9420 	lcall	_printf
   2867 E5 81              9421 	mov	a,sp
   2869 24 FB              9422 	add	a,#0xfb
   286B F5 81              9423 	mov	sp,a
   286D D0 07              9424 	pop	ar7
   286F D0 06              9425 	pop	ar6
   2871 D0 05              9426 	pop	ar5
   2873 D0 04              9427 	pop	ar4
   2875 D0 03              9428 	pop	ar3
   2877 D0 02              9429 	pop	ar2
                           9430 ;	main4.c:1056: j++;            // increments j
                           9431 ;	genAssign
   2879 90s00r9E           9432 	mov	dptr,#_block_print_j_1_1
   287C E0                 9433 	movx	a,@dptr
   287D F8                 9434 	mov	r0,a
   287E A3                 9435 	inc	dptr
   287F E0                 9436 	movx	a,@dptr
   2880 F9                 9437 	mov	r1,a
                           9438 ;	genPlus
   2881 90s00r9E           9439 	mov	dptr,#_block_print_j_1_1
                           9440 ;     genPlusIncr
   2884 74 01              9441 	mov	a,#0x01
                           9442 ;	Peephole 236.a	used r0 instead of ar0
   2886 28                 9443 	add	a,r0
   2887 F0                 9444 	movx	@dptr,a
                           9445 ;	Peephole 181	changed mov to clr
   2888 E4                 9446 	clr	a
                           9447 ;	Peephole 236.b	used r1 instead of ar1
   2889 39                 9448 	addc	a,r1
   288A A3                 9449 	inc	dptr
   288B F0                 9450 	movx	@dptr,a
                           9451 ;	main4.c:1057: if(j==16){
                           9452 ;	genAssign
   288C 90s00r9E           9453 	mov	dptr,#_block_print_j_1_1
   288F E0                 9454 	movx	a,@dptr
   2890 F8                 9455 	mov	r0,a
   2891 A3                 9456 	inc	dptr
   2892 E0                 9457 	movx	a,@dptr
   2893 F9                 9458 	mov	r1,a
                           9459 ;	genCmpEq
                           9460 ;	gencjneshort
                           9461 ;	Peephole 112.b	changed ljmp to sjmp
                           9462 ;	Peephole 198.a	optimized misc jump sequence
   2894 B8 10 42           9463 	cjne	r0,#0x10,00104$
   2897 B9 00 3F           9464 	cjne	r1,#0x00,00104$
                           9465 ;	Peephole 200.b	removed redundant sjmp
                           9466 ;	Peephole 300	removed redundant label 00128$
                           9467 ;	Peephole 300	removed redundant label 00129$
                           9468 ;	main4.c:1058: printf("\n\r%04X: ",startadd+1);        //Preints the aDDRES when 16 bytes have finisged printing
                           9469 ;	genPlus
                           9470 ;     genPlusIncr
   289A 74 01              9471 	mov	a,#0x01
                           9472 ;	Peephole 236.a	used r4 instead of ar4
   289C 2C                 9473 	add	a,r4
   289D F8                 9474 	mov	r0,a
                           9475 ;	Peephole 181	changed mov to clr
   289E E4                 9476 	clr	a
                           9477 ;	Peephole 236.b	used r5 instead of ar5
   289F 3D                 9478 	addc	a,r5
   28A0 F9                 9479 	mov	r1,a
                           9480 ;	genIpush
   28A1 C0 02              9481 	push	ar2
   28A3 C0 03              9482 	push	ar3
   28A5 C0 04              9483 	push	ar4
   28A7 C0 05              9484 	push	ar5
   28A9 C0 06              9485 	push	ar6
   28AB C0 07              9486 	push	ar7
   28AD C0 00              9487 	push	ar0
   28AF C0 01              9488 	push	ar1
                           9489 ;	genIpush
   28B1 74r05              9490 	mov	a,#__str_91
   28B3 C0 E0              9491 	push	acc
   28B5 74s0F              9492 	mov	a,#(__str_91 >> 8)
   28B7 C0 E0              9493 	push	acc
   28B9 74 80              9494 	mov	a,#0x80
   28BB C0 E0              9495 	push	acc
                           9496 ;	genCall
   28BD 12s00r00           9497 	lcall	_printf
   28C0 E5 81              9498 	mov	a,sp
   28C2 24 FB              9499 	add	a,#0xfb
   28C4 F5 81              9500 	mov	sp,a
   28C6 D0 07              9501 	pop	ar7
   28C8 D0 06              9502 	pop	ar6
   28CA D0 05              9503 	pop	ar5
   28CC D0 04              9504 	pop	ar4
   28CE D0 03              9505 	pop	ar3
   28D0 D0 02              9506 	pop	ar2
                           9507 ;	main4.c:1059: j=0;
                           9508 ;	genAssign
   28D2 90s00r9E           9509 	mov	dptr,#_block_print_j_1_1
   28D5 E4                 9510 	clr	a
   28D6 F0                 9511 	movx	@dptr,a
   28D7 A3                 9512 	inc	dptr
   28D8 F0                 9513 	movx	@dptr,a
   28D9                    9514 00104$:
                           9515 ;	main4.c:1061: startadd++;
                           9516 ;	genPlus
                           9517 ;     genPlusIncr
   28D9 0C                 9518 	inc	r4
   28DA BC 00 01           9519 	cjne	r4,#0x00,00130$
   28DD 0D                 9520 	inc	r5
   28DE                    9521 00130$:
                           9522 ;	genAssign
   28DE 90s00r9C           9523 	mov	dptr,#_block_print_startadd_1_1
   28E1 EC                 9524 	mov	a,r4
   28E2 F0                 9525 	movx	@dptr,a
   28E3 A3                 9526 	inc	dptr
   28E4 ED                 9527 	mov	a,r5
   28E5 F0                 9528 	movx	@dptr,a
                           9529 ;	main4.c:1050: for(i=0;i<length+1;i++)
                           9530 ;	genPlus
                           9531 ;     genPlusIncr
   28E6 0E                 9532 	inc	r6
   28E7 BE 00 01           9533 	cjne	r6,#0x00,00131$
   28EA 0F                 9534 	inc	r7
   28EB                    9535 00131$:
   28EB 02s28r13           9536 	ljmp	00109$
   28EE                    9537 00122$:
                           9538 ;	genAssign
   28EE 90s00r9C           9539 	mov	dptr,#_block_print_startadd_1_1
   28F1 EC                 9540 	mov	a,r4
   28F2 F0                 9541 	movx	@dptr,a
   28F3 A3                 9542 	inc	dptr
   28F4 ED                 9543 	mov	a,r5
   28F5 F0                 9544 	movx	@dptr,a
                           9545 ;	main4.c:1063: return(0);          //returns to the calling function
                           9546 ;	genRet
                           9547 ;	Peephole 182.b	used 16 bit load of dptr
   28F6 90 00 00           9548 	mov	dptr,#0x0000
                           9549 ;	Peephole 300	removed redundant label 00113$
   28F9 22                 9550 	ret
                           9551 ;------------------------------------------------------------
                           9552 ;Allocation info for local variables in function 'isr_one'
                           9553 ;------------------------------------------------------------
                           9554 ;sloc0                     Allocated with name '_isr_one_sloc0_1_0'
                           9555 ;------------------------------------------------------------
                           9556 ;	main4.c:1067: void isr_one(void) __interrupt (1) //ISR for Timer 0 overflow
                           9557 ;	-----------------------------------------
                           9558 ;	 function isr_one
                           9559 ;	-----------------------------------------
   28FA                    9560 _isr_one:
   28FA C0 E0              9561 	push	acc
   28FC C0 F0              9562 	push	b
   28FE C0 82              9563 	push	dpl
   2900 C0 83              9564 	push	dph
   2902 C0 02              9565 	push	(0+2)
   2904 C0 03              9566 	push	(0+3)
   2906 C0 04              9567 	push	(0+4)
   2908 C0 05              9568 	push	(0+5)
   290A C0 06              9569 	push	(0+6)
   290C C0 07              9570 	push	(0+7)
   290E C0 00              9571 	push	(0+0)
   2910 C0 01              9572 	push	(0+1)
   2912 C0 D0              9573 	push	psw
   2914 75 D0 00           9574 	mov	psw,#0x00
                           9575 ;	main4.c:1069: lcdprevpos = lcdreadaddr();
                           9576 ;	genCall
   2917 12s00r00           9577 	lcall	_lcdreadaddr
   291A E5 82              9578 	mov	a,dpl
   291C 85 83 F0           9579 	mov	b,dph
                           9580 ;	genAssign
   291F 90s00r62           9581 	mov	dptr,#_lcdprevpos
   2922 F0                 9582 	movx	@dptr,a
   2923 A3                 9583 	inc	dptr
   2924 E5 F0              9584 	mov	a,b
   2926 F0                 9585 	movx	@dptr,a
                           9586 ;	main4.c:1072: if(millis==9)
                           9587 ;	genAssign
   2927 90s00r5E           9588 	mov	dptr,#_millis
   292A E0                 9589 	movx	a,@dptr
   292B FA                 9590 	mov	r2,a
   292C A3                 9591 	inc	dptr
   292D E0                 9592 	movx	a,@dptr
   292E FB                 9593 	mov	r3,a
                           9594 ;	genCmpEq
                           9595 ;	gencjneshort
   292F BA 09 05           9596 	cjne	r2,#0x09,00135$
   2932 BB 00 02           9597 	cjne	r3,#0x00,00135$
   2935 80 03              9598 	sjmp	00136$
   2937                    9599 00135$:
   2937 02s2Cr89           9600 	ljmp	00123$
   293A                    9601 00136$:
                           9602 ;	main4.c:1074: millis=0;
                           9603 ;	genAssign
   293A 90s00r5E           9604 	mov	dptr,#_millis
   293D E4                 9605 	clr	a
   293E F0                 9606 	movx	@dptr,a
   293F A3                 9607 	inc	dptr
   2940 F0                 9608 	movx	@dptr,a
                           9609 ;	main4.c:1075: if(deci==99)        // reset condition for deci reaching 100 deciseconds
                           9610 ;	genAssign
   2941 90s00r5C           9611 	mov	dptr,#_deci
   2944 E0                 9612 	movx	a,@dptr
   2945 FC                 9613 	mov	r4,a
   2946 A3                 9614 	inc	dptr
   2947 E0                 9615 	movx	a,@dptr
   2948 FD                 9616 	mov	r5,a
                           9617 ;	genCmpEq
                           9618 ;	gencjneshort
   2949 BC 63 05           9619 	cjne	r4,#0x63,00137$
   294C BD 00 02           9620 	cjne	r5,#0x00,00137$
   294F 80 03              9621 	sjmp	00138$
   2951                    9622 00137$:
   2951 02s2BrD3           9623 	ljmp	00120$
   2954                    9624 00138$:
                           9625 ;	main4.c:1077: deci=0;
                           9626 ;	genAssign
   2954 90s00r5C           9627 	mov	dptr,#_deci
   2957 E4                 9628 	clr	a
   2958 F0                 9629 	movx	@dptr,a
   2959 A3                 9630 	inc	dptr
   295A F0                 9631 	movx	@dptr,a
                           9632 ;	main4.c:1078: if(sec==59)     // reset condition for sec reaching 60 seconds
                           9633 ;	genAssign
   295B 90s00r5A           9634 	mov	dptr,#_sec
   295E E0                 9635 	movx	a,@dptr
   295F FE                 9636 	mov	r6,a
   2960 A3                 9637 	inc	dptr
   2961 E0                 9638 	movx	a,@dptr
   2962 FF                 9639 	mov	r7,a
                           9640 ;	genCmpEq
                           9641 ;	gencjneshort
   2963 BE 3B 05           9642 	cjne	r6,#0x3B,00139$
   2966 BF 00 02           9643 	cjne	r7,#0x00,00139$
   2969 80 03              9644 	sjmp	00140$
   296B                    9645 00139$:
   296B 02s2ArF0           9646 	ljmp	00114$
   296E                    9647 00140$:
                           9648 ;	main4.c:1080: sec=0;
                           9649 ;	genAssign
   296E 90s00r5A           9650 	mov	dptr,#_sec
   2971 E4                 9651 	clr	a
   2972 F0                 9652 	movx	@dptr,a
   2973 A3                 9653 	inc	dptr
   2974 F0                 9654 	movx	@dptr,a
                           9655 ;	main4.c:1081: deci=0;
                           9656 ;	genAssign
   2975 90s00r5C           9657 	mov	dptr,#_deci
   2978 E4                 9658 	clr	a
   2979 F0                 9659 	movx	@dptr,a
   297A A3                 9660 	inc	dptr
   297B F0                 9661 	movx	@dptr,a
                           9662 ;	main4.c:1082: if(minute==59)   // reset condition for minute reaching 60 deciseconds
                           9663 ;	genAssign
   297C 90s00r58           9664 	mov	dptr,#_minute
   297F E0                 9665 	movx	a,@dptr
   2980 F8                 9666 	mov	r0,a
   2981 A3                 9667 	inc	dptr
   2982 E0                 9668 	movx	a,@dptr
   2983 F9                 9669 	mov	r1,a
                           9670 ;	genCmpEq
                           9671 ;	gencjneshort
   2984 B8 3B 05           9672 	cjne	r0,#0x3B,00141$
   2987 B9 00 02           9673 	cjne	r1,#0x00,00141$
   298A 80 03              9674 	sjmp	00142$
   298C                    9675 00141$:
   298C 02s2Ar25           9676 	ljmp	00108$
   298F                    9677 00142$:
                           9678 ;	main4.c:1084: sec=0;
                           9679 ;	genAssign
   298F 90s00r5A           9680 	mov	dptr,#_sec
   2992 E4                 9681 	clr	a
   2993 F0                 9682 	movx	@dptr,a
   2994 A3                 9683 	inc	dptr
   2995 F0                 9684 	movx	@dptr,a
                           9685 ;	main4.c:1085: deci=0;
                           9686 ;	genAssign
   2996 90s00r5C           9687 	mov	dptr,#_deci
   2999 E4                 9688 	clr	a
   299A F0                 9689 	movx	@dptr,a
   299B A3                 9690 	inc	dptr
   299C F0                 9691 	movx	@dptr,a
                           9692 ;	main4.c:1086: minute=0;
                           9693 ;	genAssign
   299D 90s00r58           9694 	mov	dptr,#_minute
   29A0 E4                 9695 	clr	a
   29A1 F0                 9696 	movx	@dptr,a
   29A2 A3                 9697 	inc	dptr
   29A3 F0                 9698 	movx	@dptr,a
                           9699 ;	main4.c:1087: if(advance==1)  // reset condition for advance ==1
                           9700 ;	genAssign
   29A4 90s00r60           9701 	mov	dptr,#_advance
   29A7 E0                 9702 	movx	a,@dptr
   29A8 F5*00              9703 	mov	_isr_one_sloc0_1_0,a
   29AA A3                 9704 	inc	dptr
   29AB E0                 9705 	movx	a,@dptr
   29AC F5*01              9706 	mov	(_isr_one_sloc0_1_0 + 1),a
                           9707 ;	genCmpEq
                           9708 ;	gencjneshort
   29AE E5*00              9709 	mov	a,_isr_one_sloc0_1_0
   29B0 B4 01 04           9710 	cjne	a,#0x01,00143$
   29B3 E5*01              9711 	mov	a,(_isr_one_sloc0_1_0 + 1)
                           9712 ;	Peephole 160.c	removed sjmp by inverse jump logic
   29B5 60 02              9713 	jz	00144$
   29B7                    9714 00143$:
                           9715 ;	Peephole 112.b	changed ljmp to sjmp
   29B7 80 39              9716 	sjmp	00102$
   29B9                    9717 00144$:
                           9718 ;	main4.c:1090: lcdgotoaddr(88);
                           9719 ;	genCall
                           9720 ;	Peephole 182.b	used 16 bit load of dptr
   29B9 90 00 58           9721 	mov	dptr,#0x0058
   29BC 12s00r00           9722 	lcall	_lcdgotoaddr
                           9723 ;	main4.c:1091: lcdputch('0');
                           9724 ;	genCall
   29BF 75 82 30           9725 	mov	dpl,#0x30
   29C2 12s00r00           9726 	lcall	_lcdputch
                           9727 ;	main4.c:1092: lcdputch('0');
                           9728 ;	genCall
   29C5 75 82 30           9729 	mov	dpl,#0x30
   29C8 12s00r00           9730 	lcall	_lcdputch
                           9731 ;	main4.c:1093: lcdputch(':');
                           9732 ;	genCall
   29CB 75 82 3A           9733 	mov	dpl,#0x3A
   29CE 12s00r00           9734 	lcall	_lcdputch
                           9735 ;	main4.c:1094: lcdputch('0');
                           9736 ;	genCall
   29D1 75 82 30           9737 	mov	dpl,#0x30
   29D4 12s00r00           9738 	lcall	_lcdputch
                           9739 ;	main4.c:1095: lcdputch('0');
                           9740 ;	genCall
   29D7 75 82 30           9741 	mov	dpl,#0x30
   29DA 12s00r00           9742 	lcall	_lcdputch
                           9743 ;	main4.c:1096: lcdputch('.');
                           9744 ;	genCall
   29DD 75 82 2E           9745 	mov	dpl,#0x2E
   29E0 12s00r00           9746 	lcall	_lcdputch
                           9747 ;	main4.c:1097: lcdputch('0');
                           9748 ;	genCall
   29E3 75 82 30           9749 	mov	dpl,#0x30
   29E6 12s00r00           9750 	lcall	_lcdputch
                           9751 ;	main4.c:1098: lcdputch('0');
                           9752 ;	genCall
   29E9 75 82 30           9753 	mov	dpl,#0x30
   29EC 12s00r00           9754 	lcall	_lcdputch
   29EF 02s2Cr94           9755 	ljmp	00124$
   29F2                    9756 00102$:
                           9757 ;	main4.c:1102: lcdgotoaddr(89);
                           9758 ;	genCall
                           9759 ;	Peephole 182.b	used 16 bit load of dptr
   29F2 90 00 59           9760 	mov	dptr,#0x0059
   29F5 12s00r00           9761 	lcall	_lcdgotoaddr
                           9762 ;	main4.c:1103: lcdputch('0');
                           9763 ;	genCall
   29F8 75 82 30           9764 	mov	dpl,#0x30
   29FB 12s00r00           9765 	lcall	_lcdputch
                           9766 ;	main4.c:1104: lcdputch('0');
                           9767 ;	genCall
   29FE 75 82 30           9768 	mov	dpl,#0x30
   2A01 12s00r00           9769 	lcall	_lcdputch
                           9770 ;	main4.c:1105: lcdputch(':');
                           9771 ;	genCall
   2A04 75 82 3A           9772 	mov	dpl,#0x3A
   2A07 12s00r00           9773 	lcall	_lcdputch
                           9774 ;	main4.c:1106: lcdputch('0');
                           9775 ;	genCall
   2A0A 75 82 30           9776 	mov	dpl,#0x30
   2A0D 12s00r00           9777 	lcall	_lcdputch
                           9778 ;	main4.c:1107: lcdputch('0');
                           9779 ;	genCall
   2A10 75 82 30           9780 	mov	dpl,#0x30
   2A13 12s00r00           9781 	lcall	_lcdputch
                           9782 ;	main4.c:1108: lcdputch('.');
                           9783 ;	genCall
   2A16 75 82 2E           9784 	mov	dpl,#0x2E
   2A19 12s00r00           9785 	lcall	_lcdputch
                           9786 ;	main4.c:1109: lcdputch('0');
                           9787 ;	genCall
   2A1C 75 82 30           9788 	mov	dpl,#0x30
   2A1F 12s00r00           9789 	lcall	_lcdputch
   2A22 02s2Cr94           9790 	ljmp	00124$
   2A25                    9791 00108$:
                           9792 ;	main4.c:1115: minute++;               //increment minute
                           9793 ;	genPlus
   2A25 90s00r58           9794 	mov	dptr,#_minute
                           9795 ;     genPlusIncr
   2A28 74 01              9796 	mov	a,#0x01
                           9797 ;	Peephole 236.a	used r0 instead of ar0
   2A2A 28                 9798 	add	a,r0
   2A2B F0                 9799 	movx	@dptr,a
                           9800 ;	Peephole 181	changed mov to clr
   2A2C E4                 9801 	clr	a
                           9802 ;	Peephole 236.b	used r1 instead of ar1
   2A2D 39                 9803 	addc	a,r1
   2A2E A3                 9804 	inc	dptr
   2A2F F0                 9805 	movx	@dptr,a
                           9806 ;	main4.c:1116: if(advance==1)
                           9807 ;	genAssign
   2A30 90s00r60           9808 	mov	dptr,#_advance
   2A33 E0                 9809 	movx	a,@dptr
   2A34 F8                 9810 	mov	r0,a
   2A35 A3                 9811 	inc	dptr
   2A36 E0                 9812 	movx	a,@dptr
   2A37 F9                 9813 	mov	r1,a
                           9814 ;	genCmpEq
                           9815 ;	gencjneshort
                           9816 ;	Peephole 112.b	changed ljmp to sjmp
                           9817 ;	Peephole 198.a	optimized misc jump sequence
   2A38 B8 01 5C           9818 	cjne	r0,#0x01,00105$
   2A3B B9 00 59           9819 	cjne	r1,#0x00,00105$
                           9820 ;	Peephole 200.b	removed redundant sjmp
                           9821 ;	Peephole 300	removed redundant label 00145$
                           9822 ;	Peephole 300	removed redundant label 00146$
                           9823 ;	main4.c:1118: lcdgotoaddr(88);
                           9824 ;	genCall
                           9825 ;	Peephole 182.b	used 16 bit load of dptr
   2A3E 90 00 58           9826 	mov	dptr,#0x0058
   2A41 12s00r00           9827 	lcall	_lcdgotoaddr
                           9828 ;	main4.c:1119: lcdputch((minute/10)+48);
                           9829 ;	genAssign
   2A44 90s00r58           9830 	mov	dptr,#_minute
   2A47 E0                 9831 	movx	a,@dptr
   2A48 F8                 9832 	mov	r0,a
   2A49 A3                 9833 	inc	dptr
   2A4A E0                 9834 	movx	a,@dptr
   2A4B F9                 9835 	mov	r1,a
                           9836 ;	genAssign
   2A4C 90s00r00           9837 	mov	dptr,#__divsint_PARM_2
   2A4F 74 0A              9838 	mov	a,#0x0A
   2A51 F0                 9839 	movx	@dptr,a
   2A52 E4                 9840 	clr	a
   2A53 A3                 9841 	inc	dptr
   2A54 F0                 9842 	movx	@dptr,a
                           9843 ;	genCall
   2A55 88 82              9844 	mov	dpl,r0
   2A57 89 83              9845 	mov	dph,r1
   2A59 12s00r00           9846 	lcall	__divsint
   2A5C A8 82              9847 	mov	r0,dpl
   2A5E A9 83              9848 	mov	r1,dph
                           9849 ;	genCast
                           9850 ;	genPlus
                           9851 ;     genPlusIncr
   2A60 74 30              9852 	mov	a,#0x30
                           9853 ;	Peephole 236.a	used r0 instead of ar0
   2A62 28                 9854 	add	a,r0
                           9855 ;	genCall
   2A63 F8                 9856 	mov	r0,a
                           9857 ;	Peephole 244.c	loading dpl from a instead of r0
   2A64 F5 82              9858 	mov	dpl,a
   2A66 12s00r00           9859 	lcall	_lcdputch
                           9860 ;	main4.c:1120: lcdgotoaddr(89);
                           9861 ;	genCall
                           9862 ;	Peephole 182.b	used 16 bit load of dptr
   2A69 90 00 59           9863 	mov	dptr,#0x0059
   2A6C 12s00r00           9864 	lcall	_lcdgotoaddr
                           9865 ;	main4.c:1121: lcdputch((minute%10)+48);
                           9866 ;	genAssign
   2A6F 90s00r58           9867 	mov	dptr,#_minute
   2A72 E0                 9868 	movx	a,@dptr
   2A73 F8                 9869 	mov	r0,a
   2A74 A3                 9870 	inc	dptr
   2A75 E0                 9871 	movx	a,@dptr
   2A76 F9                 9872 	mov	r1,a
                           9873 ;	genAssign
   2A77 90s00r00           9874 	mov	dptr,#__modsint_PARM_2
   2A7A 74 0A              9875 	mov	a,#0x0A
   2A7C F0                 9876 	movx	@dptr,a
   2A7D E4                 9877 	clr	a
   2A7E A3                 9878 	inc	dptr
   2A7F F0                 9879 	movx	@dptr,a
                           9880 ;	genCall
   2A80 88 82              9881 	mov	dpl,r0
   2A82 89 83              9882 	mov	dph,r1
   2A84 12s00r00           9883 	lcall	__modsint
   2A87 A8 82              9884 	mov	r0,dpl
   2A89 A9 83              9885 	mov	r1,dph
                           9886 ;	genCast
                           9887 ;	genPlus
                           9888 ;     genPlusIncr
   2A8B 74 30              9889 	mov	a,#0x30
                           9890 ;	Peephole 236.a	used r0 instead of ar0
   2A8D 28                 9891 	add	a,r0
                           9892 ;	genCall
   2A8E F8                 9893 	mov	r0,a
                           9894 ;	Peephole 244.c	loading dpl from a instead of r0
   2A8F F5 82              9895 	mov	dpl,a
   2A91 12s00r00           9896 	lcall	_lcdputch
   2A94 02s2Cr94           9897 	ljmp	00124$
   2A97                    9898 00105$:
                           9899 ;	main4.c:1126: lcdgotoaddr(89);
                           9900 ;	genCall
                           9901 ;	Peephole 182.b	used 16 bit load of dptr
   2A97 90 00 59           9902 	mov	dptr,#0x0059
   2A9A 12s00r00           9903 	lcall	_lcdgotoaddr
                           9904 ;	main4.c:1127: lcdputch((minute/10)+48);
                           9905 ;	genAssign
   2A9D 90s00r58           9906 	mov	dptr,#_minute
   2AA0 E0                 9907 	movx	a,@dptr
   2AA1 F8                 9908 	mov	r0,a
   2AA2 A3                 9909 	inc	dptr
   2AA3 E0                 9910 	movx	a,@dptr
   2AA4 F9                 9911 	mov	r1,a
                           9912 ;	genAssign
   2AA5 90s00r00           9913 	mov	dptr,#__divsint_PARM_2
   2AA8 74 0A              9914 	mov	a,#0x0A
   2AAA F0                 9915 	movx	@dptr,a
   2AAB E4                 9916 	clr	a
   2AAC A3                 9917 	inc	dptr
   2AAD F0                 9918 	movx	@dptr,a
                           9919 ;	genCall
   2AAE 88 82              9920 	mov	dpl,r0
   2AB0 89 83              9921 	mov	dph,r1
   2AB2 12s00r00           9922 	lcall	__divsint
   2AB5 A8 82              9923 	mov	r0,dpl
   2AB7 A9 83              9924 	mov	r1,dph
                           9925 ;	genCast
                           9926 ;	genPlus
                           9927 ;     genPlusIncr
   2AB9 74 30              9928 	mov	a,#0x30
                           9929 ;	Peephole 236.a	used r0 instead of ar0
   2ABB 28                 9930 	add	a,r0
                           9931 ;	genCall
   2ABC F8                 9932 	mov	r0,a
                           9933 ;	Peephole 244.c	loading dpl from a instead of r0
   2ABD F5 82              9934 	mov	dpl,a
   2ABF 12s00r00           9935 	lcall	_lcdputch
                           9936 ;	main4.c:1128: lcdgotoaddr(90);
                           9937 ;	genCall
                           9938 ;	Peephole 182.b	used 16 bit load of dptr
   2AC2 90 00 5A           9939 	mov	dptr,#0x005A
   2AC5 12s00r00           9940 	lcall	_lcdgotoaddr
                           9941 ;	main4.c:1129: lcdputch((minute%10)+48);
                           9942 ;	genAssign
   2AC8 90s00r58           9943 	mov	dptr,#_minute
   2ACB E0                 9944 	movx	a,@dptr
   2ACC F8                 9945 	mov	r0,a
   2ACD A3                 9946 	inc	dptr
   2ACE E0                 9947 	movx	a,@dptr
   2ACF F9                 9948 	mov	r1,a
                           9949 ;	genAssign
   2AD0 90s00r00           9950 	mov	dptr,#__modsint_PARM_2
   2AD3 74 0A              9951 	mov	a,#0x0A
   2AD5 F0                 9952 	movx	@dptr,a
   2AD6 E4                 9953 	clr	a
   2AD7 A3                 9954 	inc	dptr
   2AD8 F0                 9955 	movx	@dptr,a
                           9956 ;	genCall
   2AD9 88 82              9957 	mov	dpl,r0
   2ADB 89 83              9958 	mov	dph,r1
   2ADD 12s00r00           9959 	lcall	__modsint
   2AE0 A8 82              9960 	mov	r0,dpl
   2AE2 A9 83              9961 	mov	r1,dph
                           9962 ;	genCast
                           9963 ;	genPlus
                           9964 ;     genPlusIncr
   2AE4 74 30              9965 	mov	a,#0x30
                           9966 ;	Peephole 236.a	used r0 instead of ar0
   2AE6 28                 9967 	add	a,r0
                           9968 ;	genCall
   2AE7 F8                 9969 	mov	r0,a
                           9970 ;	Peephole 244.c	loading dpl from a instead of r0
   2AE8 F5 82              9971 	mov	dpl,a
   2AEA 12s00r00           9972 	lcall	_lcdputch
   2AED 02s2Cr94           9973 	ljmp	00124$
   2AF0                    9974 00114$:
                           9975 ;	main4.c:1135: sec++;            //increment sec
                           9976 ;	genPlus
   2AF0 90s00r5A           9977 	mov	dptr,#_sec
                           9978 ;     genPlusIncr
   2AF3 74 01              9979 	mov	a,#0x01
                           9980 ;	Peephole 236.a	used r6 instead of ar6
   2AF5 2E                 9981 	add	a,r6
   2AF6 F0                 9982 	movx	@dptr,a
                           9983 ;	Peephole 181	changed mov to clr
   2AF7 E4                 9984 	clr	a
                           9985 ;	Peephole 236.b	used r7 instead of ar7
   2AF8 3F                 9986 	addc	a,r7
   2AF9 A3                 9987 	inc	dptr
   2AFA F0                 9988 	movx	@dptr,a
                           9989 ;	main4.c:1137: if(advance==1)
                           9990 ;	genAssign
   2AFB 90s00r60           9991 	mov	dptr,#_advance
   2AFE E0                 9992 	movx	a,@dptr
   2AFF FE                 9993 	mov	r6,a
   2B00 A3                 9994 	inc	dptr
   2B01 E0                 9995 	movx	a,@dptr
   2B02 FF                 9996 	mov	r7,a
                           9997 ;	genCmpEq
                           9998 ;	gencjneshort
                           9999 ;	Peephole 112.b	changed ljmp to sjmp
                          10000 ;	Peephole 198.a	optimized misc jump sequence
   2B03 BE 01 68          10001 	cjne	r6,#0x01,00111$
   2B06 BF 00 65          10002 	cjne	r7,#0x00,00111$
                          10003 ;	Peephole 200.b	removed redundant sjmp
                          10004 ;	Peephole 300	removed redundant label 00147$
                          10005 ;	Peephole 300	removed redundant label 00148$
                          10006 ;	main4.c:1139: lcdgotoaddr(90);
                          10007 ;	genCall
                          10008 ;	Peephole 182.b	used 16 bit load of dptr
   2B09 90 00 5A          10009 	mov	dptr,#0x005A
   2B0C 12s00r00          10010 	lcall	_lcdgotoaddr
                          10011 ;	main4.c:1140: lcdputch(':');
                          10012 ;	genCall
   2B0F 75 82 3A          10013 	mov	dpl,#0x3A
   2B12 12s00r00          10014 	lcall	_lcdputch
                          10015 ;	main4.c:1141: lcdgotoaddr(91);
                          10016 ;	genCall
                          10017 ;	Peephole 182.b	used 16 bit load of dptr
   2B15 90 00 5B          10018 	mov	dptr,#0x005B
   2B18 12s00r00          10019 	lcall	_lcdgotoaddr
                          10020 ;	main4.c:1142: lcdputch((sec/10)+48);
                          10021 ;	genAssign
   2B1B 90s00r5A          10022 	mov	dptr,#_sec
   2B1E E0                10023 	movx	a,@dptr
   2B1F FE                10024 	mov	r6,a
   2B20 A3                10025 	inc	dptr
   2B21 E0                10026 	movx	a,@dptr
   2B22 FF                10027 	mov	r7,a
                          10028 ;	genAssign
   2B23 90s00r00          10029 	mov	dptr,#__divsint_PARM_2
   2B26 74 0A             10030 	mov	a,#0x0A
   2B28 F0                10031 	movx	@dptr,a
   2B29 E4                10032 	clr	a
   2B2A A3                10033 	inc	dptr
   2B2B F0                10034 	movx	@dptr,a
                          10035 ;	genCall
   2B2C 8E 82             10036 	mov	dpl,r6
   2B2E 8F 83             10037 	mov	dph,r7
   2B30 12s00r00          10038 	lcall	__divsint
   2B33 AE 82             10039 	mov	r6,dpl
   2B35 AF 83             10040 	mov	r7,dph
                          10041 ;	genCast
                          10042 ;	genPlus
                          10043 ;     genPlusIncr
   2B37 74 30             10044 	mov	a,#0x30
                          10045 ;	Peephole 236.a	used r6 instead of ar6
   2B39 2E                10046 	add	a,r6
                          10047 ;	genCall
   2B3A FE                10048 	mov	r6,a
                          10049 ;	Peephole 244.c	loading dpl from a instead of r6
   2B3B F5 82             10050 	mov	dpl,a
   2B3D 12s00r00          10051 	lcall	_lcdputch
                          10052 ;	main4.c:1143: lcdgotoaddr(92);
                          10053 ;	genCall
                          10054 ;	Peephole 182.b	used 16 bit load of dptr
   2B40 90 00 5C          10055 	mov	dptr,#0x005C
   2B43 12s00r00          10056 	lcall	_lcdgotoaddr
                          10057 ;	main4.c:1144: lcdputch((sec%10)+48);
                          10058 ;	genAssign
   2B46 90s00r5A          10059 	mov	dptr,#_sec
   2B49 E0                10060 	movx	a,@dptr
   2B4A FE                10061 	mov	r6,a
   2B4B A3                10062 	inc	dptr
   2B4C E0                10063 	movx	a,@dptr
   2B4D FF                10064 	mov	r7,a
                          10065 ;	genAssign
   2B4E 90s00r00          10066 	mov	dptr,#__modsint_PARM_2
   2B51 74 0A             10067 	mov	a,#0x0A
   2B53 F0                10068 	movx	@dptr,a
   2B54 E4                10069 	clr	a
   2B55 A3                10070 	inc	dptr
   2B56 F0                10071 	movx	@dptr,a
                          10072 ;	genCall
   2B57 8E 82             10073 	mov	dpl,r6
   2B59 8F 83             10074 	mov	dph,r7
   2B5B 12s00r00          10075 	lcall	__modsint
   2B5E AE 82             10076 	mov	r6,dpl
   2B60 AF 83             10077 	mov	r7,dph
                          10078 ;	genCast
                          10079 ;	genPlus
                          10080 ;     genPlusIncr
   2B62 74 30             10081 	mov	a,#0x30
                          10082 ;	Peephole 236.a	used r6 instead of ar6
   2B64 2E                10083 	add	a,r6
                          10084 ;	genCall
   2B65 FE                10085 	mov	r6,a
                          10086 ;	Peephole 244.c	loading dpl from a instead of r6
   2B66 F5 82             10087 	mov	dpl,a
   2B68 12s00r00          10088 	lcall	_lcdputch
   2B6B 02s2Cr94          10089 	ljmp	00124$
   2B6E                   10090 00111$:
                          10091 ;	main4.c:1149: lcdgotoaddr(91);
                          10092 ;	genCall
                          10093 ;	Peephole 182.b	used 16 bit load of dptr
   2B6E 90 00 5B          10094 	mov	dptr,#0x005B
   2B71 12s00r00          10095 	lcall	_lcdgotoaddr
                          10096 ;	main4.c:1150: lcdputch(':');
                          10097 ;	genCall
   2B74 75 82 3A          10098 	mov	dpl,#0x3A
   2B77 12s00r00          10099 	lcall	_lcdputch
                          10100 ;	main4.c:1151: lcdgotoaddr(92);
                          10101 ;	genCall
                          10102 ;	Peephole 182.b	used 16 bit load of dptr
   2B7A 90 00 5C          10103 	mov	dptr,#0x005C
   2B7D 12s00r00          10104 	lcall	_lcdgotoaddr
                          10105 ;	main4.c:1152: lcdputch((sec/10)+48);
                          10106 ;	genAssign
   2B80 90s00r5A          10107 	mov	dptr,#_sec
   2B83 E0                10108 	movx	a,@dptr
   2B84 FE                10109 	mov	r6,a
   2B85 A3                10110 	inc	dptr
   2B86 E0                10111 	movx	a,@dptr
   2B87 FF                10112 	mov	r7,a
                          10113 ;	genAssign
   2B88 90s00r00          10114 	mov	dptr,#__divsint_PARM_2
   2B8B 74 0A             10115 	mov	a,#0x0A
   2B8D F0                10116 	movx	@dptr,a
   2B8E E4                10117 	clr	a
   2B8F A3                10118 	inc	dptr
   2B90 F0                10119 	movx	@dptr,a
                          10120 ;	genCall
   2B91 8E 82             10121 	mov	dpl,r6
   2B93 8F 83             10122 	mov	dph,r7
   2B95 12s00r00          10123 	lcall	__divsint
   2B98 AE 82             10124 	mov	r6,dpl
   2B9A AF 83             10125 	mov	r7,dph
                          10126 ;	genCast
                          10127 ;	genPlus
                          10128 ;     genPlusIncr
   2B9C 74 30             10129 	mov	a,#0x30
                          10130 ;	Peephole 236.a	used r6 instead of ar6
   2B9E 2E                10131 	add	a,r6
                          10132 ;	genCall
   2B9F FE                10133 	mov	r6,a
                          10134 ;	Peephole 244.c	loading dpl from a instead of r6
   2BA0 F5 82             10135 	mov	dpl,a
   2BA2 12s00r00          10136 	lcall	_lcdputch
                          10137 ;	main4.c:1153: lcdgotoaddr(93);
                          10138 ;	genCall
                          10139 ;	Peephole 182.b	used 16 bit load of dptr
   2BA5 90 00 5D          10140 	mov	dptr,#0x005D
   2BA8 12s00r00          10141 	lcall	_lcdgotoaddr
                          10142 ;	main4.c:1154: lcdputch((sec%10)+48);
                          10143 ;	genAssign
   2BAB 90s00r5A          10144 	mov	dptr,#_sec
   2BAE E0                10145 	movx	a,@dptr
   2BAF FE                10146 	mov	r6,a
   2BB0 A3                10147 	inc	dptr
   2BB1 E0                10148 	movx	a,@dptr
   2BB2 FF                10149 	mov	r7,a
                          10150 ;	genAssign
   2BB3 90s00r00          10151 	mov	dptr,#__modsint_PARM_2
   2BB6 74 0A             10152 	mov	a,#0x0A
   2BB8 F0                10153 	movx	@dptr,a
   2BB9 E4                10154 	clr	a
   2BBA A3                10155 	inc	dptr
   2BBB F0                10156 	movx	@dptr,a
                          10157 ;	genCall
   2BBC 8E 82             10158 	mov	dpl,r6
   2BBE 8F 83             10159 	mov	dph,r7
   2BC0 12s00r00          10160 	lcall	__modsint
   2BC3 AE 82             10161 	mov	r6,dpl
   2BC5 AF 83             10162 	mov	r7,dph
                          10163 ;	genCast
                          10164 ;	genPlus
                          10165 ;     genPlusIncr
   2BC7 74 30             10166 	mov	a,#0x30
                          10167 ;	Peephole 236.a	used r6 instead of ar6
   2BC9 2E                10168 	add	a,r6
                          10169 ;	genCall
   2BCA FE                10170 	mov	r6,a
                          10171 ;	Peephole 244.c	loading dpl from a instead of r6
   2BCB F5 82             10172 	mov	dpl,a
   2BCD 12s00r00          10173 	lcall	_lcdputch
   2BD0 02s2Cr94          10174 	ljmp	00124$
   2BD3                   10175 00120$:
                          10176 ;	main4.c:1160: deci++;         //increment deci
                          10177 ;	genPlus
   2BD3 90s00r5C          10178 	mov	dptr,#_deci
                          10179 ;     genPlusIncr
   2BD6 74 01             10180 	mov	a,#0x01
                          10181 ;	Peephole 236.a	used r4 instead of ar4
   2BD8 2C                10182 	add	a,r4
   2BD9 F0                10183 	movx	@dptr,a
                          10184 ;	Peephole 181	changed mov to clr
   2BDA E4                10185 	clr	a
                          10186 ;	Peephole 236.b	used r5 instead of ar5
   2BDB 3D                10187 	addc	a,r5
   2BDC A3                10188 	inc	dptr
   2BDD F0                10189 	movx	@dptr,a
                          10190 ;	main4.c:1161: if(advance==1)
                          10191 ;	genAssign
   2BDE 90s00r60          10192 	mov	dptr,#_advance
   2BE1 E0                10193 	movx	a,@dptr
   2BE2 FC                10194 	mov	r4,a
   2BE3 A3                10195 	inc	dptr
   2BE4 E0                10196 	movx	a,@dptr
   2BE5 FD                10197 	mov	r5,a
                          10198 ;	genCmpEq
                          10199 ;	gencjneshort
                          10200 ;	Peephole 112.b	changed ljmp to sjmp
                          10201 ;	Peephole 198.a	optimized misc jump sequence
   2BE6 BC 01 67          10202 	cjne	r4,#0x01,00117$
   2BE9 BD 00 64          10203 	cjne	r5,#0x00,00117$
                          10204 ;	Peephole 200.b	removed redundant sjmp
                          10205 ;	Peephole 300	removed redundant label 00149$
                          10206 ;	Peephole 300	removed redundant label 00150$
                          10207 ;	main4.c:1163: lcdgotoaddr(93);
                          10208 ;	genCall
                          10209 ;	Peephole 182.b	used 16 bit load of dptr
   2BEC 90 00 5D          10210 	mov	dptr,#0x005D
   2BEF 12s00r00          10211 	lcall	_lcdgotoaddr
                          10212 ;	main4.c:1164: lcdputch('.');
                          10213 ;	genCall
   2BF2 75 82 2E          10214 	mov	dpl,#0x2E
   2BF5 12s00r00          10215 	lcall	_lcdputch
                          10216 ;	main4.c:1165: lcdgotoaddr(94);
                          10217 ;	genCall
                          10218 ;	Peephole 182.b	used 16 bit load of dptr
   2BF8 90 00 5E          10219 	mov	dptr,#0x005E
   2BFB 12s00r00          10220 	lcall	_lcdgotoaddr
                          10221 ;	main4.c:1166: lcdputch((deci/10)+48);
                          10222 ;	genAssign
   2BFE 90s00r5C          10223 	mov	dptr,#_deci
   2C01 E0                10224 	movx	a,@dptr
   2C02 FC                10225 	mov	r4,a
   2C03 A3                10226 	inc	dptr
   2C04 E0                10227 	movx	a,@dptr
   2C05 FD                10228 	mov	r5,a
                          10229 ;	genAssign
   2C06 90s00r00          10230 	mov	dptr,#__divsint_PARM_2
   2C09 74 0A             10231 	mov	a,#0x0A
   2C0B F0                10232 	movx	@dptr,a
   2C0C E4                10233 	clr	a
   2C0D A3                10234 	inc	dptr
   2C0E F0                10235 	movx	@dptr,a
                          10236 ;	genCall
   2C0F 8C 82             10237 	mov	dpl,r4
   2C11 8D 83             10238 	mov	dph,r5
   2C13 12s00r00          10239 	lcall	__divsint
   2C16 AC 82             10240 	mov	r4,dpl
   2C18 AD 83             10241 	mov	r5,dph
                          10242 ;	genCast
                          10243 ;	genPlus
                          10244 ;     genPlusIncr
   2C1A 74 30             10245 	mov	a,#0x30
                          10246 ;	Peephole 236.a	used r4 instead of ar4
   2C1C 2C                10247 	add	a,r4
                          10248 ;	genCall
   2C1D FC                10249 	mov	r4,a
                          10250 ;	Peephole 244.c	loading dpl from a instead of r4
   2C1E F5 82             10251 	mov	dpl,a
   2C20 12s00r00          10252 	lcall	_lcdputch
                          10253 ;	main4.c:1167: lcdgotoaddr(95);
                          10254 ;	genCall
                          10255 ;	Peephole 182.b	used 16 bit load of dptr
   2C23 90 00 5F          10256 	mov	dptr,#0x005F
   2C26 12s00r00          10257 	lcall	_lcdgotoaddr
                          10258 ;	main4.c:1168: lcdputch((deci%10)+48);
                          10259 ;	genAssign
   2C29 90s00r5C          10260 	mov	dptr,#_deci
   2C2C E0                10261 	movx	a,@dptr
   2C2D FC                10262 	mov	r4,a
   2C2E A3                10263 	inc	dptr
   2C2F E0                10264 	movx	a,@dptr
   2C30 FD                10265 	mov	r5,a
                          10266 ;	genAssign
   2C31 90s00r00          10267 	mov	dptr,#__modsint_PARM_2
   2C34 74 0A             10268 	mov	a,#0x0A
   2C36 F0                10269 	movx	@dptr,a
   2C37 E4                10270 	clr	a
   2C38 A3                10271 	inc	dptr
   2C39 F0                10272 	movx	@dptr,a
                          10273 ;	genCall
   2C3A 8C 82             10274 	mov	dpl,r4
   2C3C 8D 83             10275 	mov	dph,r5
   2C3E 12s00r00          10276 	lcall	__modsint
   2C41 AC 82             10277 	mov	r4,dpl
   2C43 AD 83             10278 	mov	r5,dph
                          10279 ;	genCast
                          10280 ;	genPlus
                          10281 ;     genPlusIncr
   2C45 74 30             10282 	mov	a,#0x30
                          10283 ;	Peephole 236.a	used r4 instead of ar4
   2C47 2C                10284 	add	a,r4
                          10285 ;	genCall
   2C48 FC                10286 	mov	r4,a
                          10287 ;	Peephole 244.c	loading dpl from a instead of r4
   2C49 F5 82             10288 	mov	dpl,a
   2C4B 12s00r00          10289 	lcall	_lcdputch
                          10290 ;	Peephole 112.b	changed ljmp to sjmp
   2C4E 80 44             10291 	sjmp	00124$
   2C50                   10292 00117$:
                          10293 ;	main4.c:1172: lcdgotoaddr(94);
                          10294 ;	genCall
                          10295 ;	Peephole 182.b	used 16 bit load of dptr
   2C50 90 00 5E          10296 	mov	dptr,#0x005E
   2C53 12s00r00          10297 	lcall	_lcdgotoaddr
                          10298 ;	main4.c:1173: lcdputch('.');
                          10299 ;	genCall
   2C56 75 82 2E          10300 	mov	dpl,#0x2E
   2C59 12s00r00          10301 	lcall	_lcdputch
                          10302 ;	main4.c:1174: lcdgotoaddr(95);
                          10303 ;	genCall
                          10304 ;	Peephole 182.b	used 16 bit load of dptr
   2C5C 90 00 5F          10305 	mov	dptr,#0x005F
   2C5F 12s00r00          10306 	lcall	_lcdgotoaddr
                          10307 ;	main4.c:1175: lcdputch((deci/10)+48);
                          10308 ;	genAssign
   2C62 90s00r5C          10309 	mov	dptr,#_deci
   2C65 E0                10310 	movx	a,@dptr
   2C66 FC                10311 	mov	r4,a
   2C67 A3                10312 	inc	dptr
   2C68 E0                10313 	movx	a,@dptr
   2C69 FD                10314 	mov	r5,a
                          10315 ;	genAssign
   2C6A 90s00r00          10316 	mov	dptr,#__divsint_PARM_2
   2C6D 74 0A             10317 	mov	a,#0x0A
   2C6F F0                10318 	movx	@dptr,a
   2C70 E4                10319 	clr	a
   2C71 A3                10320 	inc	dptr
   2C72 F0                10321 	movx	@dptr,a
                          10322 ;	genCall
   2C73 8C 82             10323 	mov	dpl,r4
   2C75 8D 83             10324 	mov	dph,r5
   2C77 12s00r00          10325 	lcall	__divsint
   2C7A AC 82             10326 	mov	r4,dpl
   2C7C AD 83             10327 	mov	r5,dph
                          10328 ;	genCast
                          10329 ;	genPlus
                          10330 ;     genPlusIncr
   2C7E 74 30             10331 	mov	a,#0x30
                          10332 ;	Peephole 236.a	used r4 instead of ar4
   2C80 2C                10333 	add	a,r4
                          10334 ;	genCall
   2C81 FC                10335 	mov	r4,a
                          10336 ;	Peephole 244.c	loading dpl from a instead of r4
   2C82 F5 82             10337 	mov	dpl,a
   2C84 12s00r00          10338 	lcall	_lcdputch
                          10339 ;	Peephole 112.b	changed ljmp to sjmp
   2C87 80 0B             10340 	sjmp	00124$
   2C89                   10341 00123$:
                          10342 ;	main4.c:1181: millis++;           //increment millis
                          10343 ;	genPlus
   2C89 90s00r5E          10344 	mov	dptr,#_millis
                          10345 ;     genPlusIncr
   2C8C 74 01             10346 	mov	a,#0x01
                          10347 ;	Peephole 236.a	used r2 instead of ar2
   2C8E 2A                10348 	add	a,r2
   2C8F F0                10349 	movx	@dptr,a
                          10350 ;	Peephole 181	changed mov to clr
   2C90 E4                10351 	clr	a
                          10352 ;	Peephole 236.b	used r3 instead of ar3
   2C91 3B                10353 	addc	a,r3
   2C92 A3                10354 	inc	dptr
   2C93 F0                10355 	movx	@dptr,a
   2C94                   10356 00124$:
                          10357 ;	main4.c:1185: TH0 = 0xFC;	//Timer is reloaded with the 10ms count
                          10358 ;	genAssign
   2C94 75 8C FC          10359 	mov	_TH0,#0xFC
                          10360 ;	main4.c:1186: TL0 = 0x70;
                          10361 ;	genAssign
   2C97 75 8A 70          10362 	mov	_TL0,#0x70
                          10363 ;	main4.c:1188: lcdgotoaddr(lcdprevpos);
                          10364 ;	genAssign
   2C9A 90s00r62          10365 	mov	dptr,#_lcdprevpos
   2C9D E0                10366 	movx	a,@dptr
   2C9E FA                10367 	mov	r2,a
   2C9F A3                10368 	inc	dptr
   2CA0 E0                10369 	movx	a,@dptr
   2CA1 FB                10370 	mov	r3,a
                          10371 ;	genCall
   2CA2 8A 82             10372 	mov	dpl,r2
   2CA4 8B 83             10373 	mov	dph,r3
   2CA6 12s00r00          10374 	lcall	_lcdgotoaddr
                          10375 ;	Peephole 300	removed redundant label 00125$
   2CA9 D0 D0             10376 	pop	psw
   2CAB D0 01             10377 	pop	(0+1)
   2CAD D0 00             10378 	pop	(0+0)
   2CAF D0 07             10379 	pop	(0+7)
   2CB1 D0 06             10380 	pop	(0+6)
   2CB3 D0 05             10381 	pop	(0+5)
   2CB5 D0 04             10382 	pop	(0+4)
   2CB7 D0 03             10383 	pop	(0+3)
   2CB9 D0 02             10384 	pop	(0+2)
   2CBB D0 83             10385 	pop	dph
   2CBD D0 82             10386 	pop	dpl
   2CBF D0 F0             10387 	pop	b
   2CC1 D0 E0             10388 	pop	acc
   2CC3 32                10389 	reti
                          10390 ;------------------------------------------------------------
                          10391 ;Allocation info for local variables in function 'clock_functions'
                          10392 ;------------------------------------------------------------
                          10393 ;sloc0                     Allocated with name '_clock_functions_sloc0_1_0'
                          10394 ;sloc1                     Allocated with name '_clock_functions_sloc1_1_0'
                          10395 ;choice3                   Allocated with name '_clock_functions_choice3_1_1'
                          10396 ;------------------------------------------------------------
                          10397 ;	main4.c:1195: void clock_functions(void)
                          10398 ;	-----------------------------------------
                          10399 ;	 function clock_functions
                          10400 ;	-----------------------------------------
   2CC4                   10401 _clock_functions:
                          10402 ;	main4.c:1198: printf("\n\n\r------------------------------------------------------------------------------");
                          10403 ;	genIpush
   2CC4 74rB6             10404 	mov	a,#__str_16
   2CC6 C0 E0             10405 	push	acc
   2CC8 74s02             10406 	mov	a,#(__str_16 >> 8)
   2CCA C0 E0             10407 	push	acc
   2CCC 74 80             10408 	mov	a,#0x80
   2CCE C0 E0             10409 	push	acc
                          10410 ;	genCall
   2CD0 12s00r00          10411 	lcall	_printf
   2CD3 15 81             10412 	dec	sp
   2CD5 15 81             10413 	dec	sp
   2CD7 15 81             10414 	dec	sp
                          10415 ;	main4.c:1199: printf("\n\r                           CLOCK FUNCTION MENU");
                          10416 ;	genIpush
   2CD9 74r18             10417 	mov	a,#__str_94
   2CDB C0 E0             10418 	push	acc
   2CDD 74s0F             10419 	mov	a,#(__str_94 >> 8)
   2CDF C0 E0             10420 	push	acc
   2CE1 74 80             10421 	mov	a,#0x80
   2CE3 C0 E0             10422 	push	acc
                          10423 ;	genCall
   2CE5 12s00r00          10424 	lcall	_printf
   2CE8 15 81             10425 	dec	sp
   2CEA 15 81             10426 	dec	sp
   2CEC 15 81             10427 	dec	sp
                          10428 ;	main4.c:1200: printf("\n\r--------------------------------------------------------------------------------");
                          10429 ;	genIpush
   2CEE 74r3A             10430 	mov	a,#__str_18
   2CF0 C0 E0             10431 	push	acc
   2CF2 74s03             10432 	mov	a,#(__str_18 >> 8)
   2CF4 C0 E0             10433 	push	acc
   2CF6 74 80             10434 	mov	a,#0x80
   2CF8 C0 E0             10435 	push	acc
                          10436 ;	genCall
   2CFA 12s00r00          10437 	lcall	_printf
   2CFD 15 81             10438 	dec	sp
   2CFF 15 81             10439 	dec	sp
   2D01 15 81             10440 	dec	sp
                          10441 ;	main4.c:1201: printf("\n\rFunction 1:Pause/Stop Timer");
                          10442 ;	genIpush
   2D03 74r49             10443 	mov	a,#__str_95
   2D05 C0 E0             10444 	push	acc
   2D07 74s0F             10445 	mov	a,#(__str_95 >> 8)
   2D09 C0 E0             10446 	push	acc
   2D0B 74 80             10447 	mov	a,#0x80
   2D0D C0 E0             10448 	push	acc
                          10449 ;	genCall
   2D0F 12s00r00          10450 	lcall	_printf
   2D12 15 81             10451 	dec	sp
   2D14 15 81             10452 	dec	sp
   2D16 15 81             10453 	dec	sp
                          10454 ;	main4.c:1202: printf("\n\rFunction 2:Start Timer");
                          10455 ;	genIpush
   2D18 74r67             10456 	mov	a,#__str_96
   2D1A C0 E0             10457 	push	acc
   2D1C 74s0F             10458 	mov	a,#(__str_96 >> 8)
   2D1E C0 E0             10459 	push	acc
   2D20 74 80             10460 	mov	a,#0x80
   2D22 C0 E0             10461 	push	acc
                          10462 ;	genCall
   2D24 12s00r00          10463 	lcall	_printf
   2D27 15 81             10464 	dec	sp
   2D29 15 81             10465 	dec	sp
   2D2B 15 81             10466 	dec	sp
                          10467 ;	main4.c:1203: printf("\n\rFunction 3:Reset Timer");
                          10468 ;	genIpush
   2D2D 74r80             10469 	mov	a,#__str_97
   2D2F C0 E0             10470 	push	acc
   2D31 74s0F             10471 	mov	a,#(__str_97 >> 8)
   2D33 C0 E0             10472 	push	acc
   2D35 74 80             10473 	mov	a,#0x80
   2D37 C0 E0             10474 	push	acc
                          10475 ;	genCall
   2D39 12s00r00          10476 	lcall	_printf
   2D3C 15 81             10477 	dec	sp
   2D3E 15 81             10478 	dec	sp
   2D40 15 81             10479 	dec	sp
                          10480 ;	main4.c:1204: printf("\n\rFunction 4:Print Time to Paulmon");
                          10481 ;	genIpush
   2D42 74r99             10482 	mov	a,#__str_98
   2D44 C0 E0             10483 	push	acc
   2D46 74s0F             10484 	mov	a,#(__str_98 >> 8)
   2D48 C0 E0             10485 	push	acc
   2D4A 74 80             10486 	mov	a,#0x80
   2D4C C0 E0             10487 	push	acc
                          10488 ;	genCall
   2D4E 12s00r00          10489 	lcall	_printf
   2D51 15 81             10490 	dec	sp
   2D53 15 81             10491 	dec	sp
   2D55 15 81             10492 	dec	sp
                          10493 ;	main4.c:1205: printf("\n\rFunction 5:Enter Advanced Mode");
                          10494 ;	genIpush
   2D57 74rBC             10495 	mov	a,#__str_99
   2D59 C0 E0             10496 	push	acc
   2D5B 74s0F             10497 	mov	a,#(__str_99 >> 8)
   2D5D C0 E0             10498 	push	acc
   2D5F 74 80             10499 	mov	a,#0x80
   2D61 C0 E0             10500 	push	acc
                          10501 ;	genCall
   2D63 12s00r00          10502 	lcall	_printf
   2D66 15 81             10503 	dec	sp
   2D68 15 81             10504 	dec	sp
   2D6A 15 81             10505 	dec	sp
                          10506 ;	main4.c:1206: printf("\n\rFunction 0:Go Back to Main Menu");
                          10507 ;	genIpush
   2D6C 74rDD             10508 	mov	a,#__str_100
   2D6E C0 E0             10509 	push	acc
   2D70 74s0F             10510 	mov	a,#(__str_100 >> 8)
   2D72 C0 E0             10511 	push	acc
   2D74 74 80             10512 	mov	a,#0x80
   2D76 C0 E0             10513 	push	acc
                          10514 ;	genCall
   2D78 12s00r00          10515 	lcall	_printf
   2D7B 15 81             10516 	dec	sp
   2D7D 15 81             10517 	dec	sp
   2D7F 15 81             10518 	dec	sp
                          10519 ;	main4.c:1207: printf("\n\rEnter your choice:");
                          10520 ;	genIpush
   2D81 74r5B             10521 	mov	a,#__str_29
   2D83 C0 E0             10522 	push	acc
   2D85 74s05             10523 	mov	a,#(__str_29 >> 8)
   2D87 C0 E0             10524 	push	acc
   2D89 74 80             10525 	mov	a,#0x80
   2D8B C0 E0             10526 	push	acc
                          10527 ;	genCall
   2D8D 12s00r00          10528 	lcall	_printf
   2D90 15 81             10529 	dec	sp
   2D92 15 81             10530 	dec	sp
   2D94 15 81             10531 	dec	sp
                          10532 ;	main4.c:1208: choice3= getchar()-48;
                          10533 ;	genCall
   2D96 12s01r72          10534 	lcall	_getchar
                          10535 ;	genCast
                          10536 ;	peephole 177.g	optimized mov sequence
   2D99 E5 82             10537 	mov	a,dpl
   2D9B FA                10538 	mov	r2,a
   2D9C 33                10539 	rlc	a
   2D9D 95 E0             10540 	subb	a,acc
   2D9F FB                10541 	mov	r3,a
                          10542 ;	genMinus
   2DA0 EA                10543 	mov	a,r2
   2DA1 24 D0             10544 	add	a,#0xd0
   2DA3 FA                10545 	mov	r2,a
   2DA4 EB                10546 	mov	a,r3
   2DA5 34 FF             10547 	addc	a,#0xff
   2DA7 FB                10548 	mov	r3,a
                          10549 ;	main4.c:1209: switch(choice3)
                          10550 ;	genAssign
   2DA8 8A 04             10551 	mov	ar4,r2
                          10552 ;	genCmpLt
                          10553 ;	genCmp
                          10554 ;	peephole 177.h	optimized mov sequence
   2DAA EB                10555 	mov	a,r3
                          10556 ;	Peephole 236.i	used r5 instead of ar5
   2DAB FD                10557 	mov	r5,a
                          10558 ;	genIfxJump
   2DAC 30 E7 03          10559 	jnb	acc.7,00121$
   2DAF 02s2FrEC          10560 	ljmp	00113$
   2DB2                   10561 00121$:
                          10562 ;	genCmpGt
                          10563 ;	genCmp
   2DB2 C3                10564 	clr	c
   2DB3 74 06             10565 	mov	a,#0x06
   2DB5 9A                10566 	subb	a,r2
                          10567 ;	Peephole 159	avoided xrl during execution
   2DB6 74 80             10568 	mov	a,#(0x00 ^ 0x80)
   2DB8 8B F0             10569 	mov	b,r3
   2DBA 63 F0 80          10570 	xrl	b,#0x80
   2DBD 95 F0             10571 	subb	a,b
                          10572 ;	genIfxJump
   2DBF 50 03             10573 	jnc	00122$
   2DC1 02s2FrEC          10574 	ljmp	00113$
   2DC4                   10575 00122$:
                          10576 ;	genJumpTab
   2DC4 EC                10577 	mov	a,r4
                          10578 ;	Peephole 254	optimized left shift
   2DC5 2C                10579 	add	a,r4
   2DC6 2C                10580 	add	a,r4
   2DC7 90s2DrCB          10581 	mov	dptr,#00123$
   2DCA 73                10582 	jmp	@a+dptr
   2DCB                   10583 00123$:
   2DCB 02s2DrE0          10584 	ljmp	00101$
   2DCE 02s2DrE3          10585 	ljmp	00102$
   2DD1 02s2DrFB          10586 	ljmp	00103$
   2DD4 02s2Er13          10587 	ljmp	00104$
   2DD7 02s2Er42          10588 	ljmp	00105$
   2DDA 02s2Fr6C          10589 	ljmp	00106$
   2DDD 02s2FrAE          10590 	ljmp	00109$
                          10591 ;	main4.c:1211: case 0:
   2DE0                   10592 00101$:
                          10593 ;	main4.c:1213: main_menu();
                          10594 ;	genCall
                          10595 ;	main4.c:1214: }   break;
                          10596 ;	Peephole 251.a	replaced ljmp to ret with ret
                          10597 ;	Peephole 253.a	replaced lcall/ret with ljmp
   2DE0 02s0Fr01          10598 	ljmp	_main_menu
                          10599 ;	main4.c:1215: case 1:
   2DE3                   10600 00102$:
                          10601 ;	main4.c:1217: TR0=0;
                          10602 ;	genAssign
   2DE3 C2 8C             10603 	clr	_TR0
                          10604 ;	main4.c:1218: printf("\n\n\rTimer0 has been paused");
                          10605 ;	genIpush
   2DE5 74rFF             10606 	mov	a,#__str_101
   2DE7 C0 E0             10607 	push	acc
   2DE9 74s0F             10608 	mov	a,#(__str_101 >> 8)
   2DEB C0 E0             10609 	push	acc
   2DED 74 80             10610 	mov	a,#0x80
   2DEF C0 E0             10611 	push	acc
                          10612 ;	genCall
   2DF1 12s00r00          10613 	lcall	_printf
   2DF4 15 81             10614 	dec	sp
   2DF6 15 81             10615 	dec	sp
   2DF8 15 81             10616 	dec	sp
                          10617 ;	main4.c:1220: }   break;
                          10618 ;	Peephole 251.a	replaced ljmp to ret with ret
   2DFA 22                10619 	ret
                          10620 ;	main4.c:1221: case 2:
   2DFB                   10621 00103$:
                          10622 ;	main4.c:1223: TR0=1;
                          10623 ;	genAssign
   2DFB D2 8C             10624 	setb	_TR0
                          10625 ;	main4.c:1224: printf("\n\n\rTimer has been started");
                          10626 ;	genIpush
   2DFD 74r19             10627 	mov	a,#__str_102
   2DFF C0 E0             10628 	push	acc
   2E01 74s10             10629 	mov	a,#(__str_102 >> 8)
   2E03 C0 E0             10630 	push	acc
   2E05 74 80             10631 	mov	a,#0x80
   2E07 C0 E0             10632 	push	acc
                          10633 ;	genCall
   2E09 12s00r00          10634 	lcall	_printf
   2E0C 15 81             10635 	dec	sp
   2E0E 15 81             10636 	dec	sp
   2E10 15 81             10637 	dec	sp
                          10638 ;	main4.c:1226: }break;
                          10639 ;	Peephole 251.a	replaced ljmp to ret with ret
   2E12 22                10640 	ret
                          10641 ;	main4.c:1227: case 3:
   2E13                   10642 00104$:
                          10643 ;	main4.c:1229: TR0=0;
                          10644 ;	genAssign
   2E13 C2 8C             10645 	clr	_TR0
                          10646 ;	main4.c:1231: minute=0;
                          10647 ;	genAssign
   2E15 90s00r58          10648 	mov	dptr,#_minute
   2E18 E4                10649 	clr	a
   2E19 F0                10650 	movx	@dptr,a
   2E1A A3                10651 	inc	dptr
   2E1B F0                10652 	movx	@dptr,a
                          10653 ;	main4.c:1233: sec=0;
                          10654 ;	genAssign
   2E1C 90s00r5A          10655 	mov	dptr,#_sec
   2E1F E4                10656 	clr	a
   2E20 F0                10657 	movx	@dptr,a
   2E21 A3                10658 	inc	dptr
   2E22 F0                10659 	movx	@dptr,a
                          10660 ;	main4.c:1234: deci=0;
                          10661 ;	genAssign
   2E23 90s00r5C          10662 	mov	dptr,#_deci
   2E26 E4                10663 	clr	a
   2E27 F0                10664 	movx	@dptr,a
   2E28 A3                10665 	inc	dptr
   2E29 F0                10666 	movx	@dptr,a
                          10667 ;	main4.c:1237: printf("\n\n\r The Timer has been reset");
                          10668 ;	genIpush
   2E2A 74r33             10669 	mov	a,#__str_103
   2E2C C0 E0             10670 	push	acc
   2E2E 74s10             10671 	mov	a,#(__str_103 >> 8)
   2E30 C0 E0             10672 	push	acc
   2E32 74 80             10673 	mov	a,#0x80
   2E34 C0 E0             10674 	push	acc
                          10675 ;	genCall
   2E36 12s00r00          10676 	lcall	_printf
   2E39 15 81             10677 	dec	sp
   2E3B 15 81             10678 	dec	sp
   2E3D 15 81             10679 	dec	sp
                          10680 ;	main4.c:1239: print_time_stamp();
                          10681 ;	genCall
                          10682 ;	main4.c:1242: }break;
                          10683 ;	Peephole 251.a	replaced ljmp to ret with ret
                          10684 ;	Peephole 253.a	replaced lcall/ret with ljmp
   2E3F 02s38r0A          10685 	ljmp	_print_time_stamp
                          10686 ;	main4.c:1243: case 4:
   2E42                   10687 00105$:
                          10688 ;	main4.c:1245: printf("\n\n\rThe time read is MM:SS:SS %d%d:%d%d.%d%d",minute/10,minute%10,sec/10,sec%10,deci/10,deci%10);
                          10689 ;	genAssign
   2E42 90s00r5C          10690 	mov	dptr,#_deci
   2E45 E0                10691 	movx	a,@dptr
   2E46 FA                10692 	mov	r2,a
   2E47 A3                10693 	inc	dptr
   2E48 E0                10694 	movx	a,@dptr
   2E49 FB                10695 	mov	r3,a
                          10696 ;	genAssign
   2E4A 90s00r00          10697 	mov	dptr,#__modsint_PARM_2
   2E4D 74 0A             10698 	mov	a,#0x0A
   2E4F F0                10699 	movx	@dptr,a
   2E50 E4                10700 	clr	a
   2E51 A3                10701 	inc	dptr
   2E52 F0                10702 	movx	@dptr,a
                          10703 ;	genCall
   2E53 8A 82             10704 	mov	dpl,r2
   2E55 8B 83             10705 	mov	dph,r3
   2E57 C0 02             10706 	push	ar2
   2E59 C0 03             10707 	push	ar3
   2E5B 12s00r00          10708 	lcall	__modsint
   2E5E AC 82             10709 	mov	r4,dpl
   2E60 AD 83             10710 	mov	r5,dph
   2E62 D0 03             10711 	pop	ar3
   2E64 D0 02             10712 	pop	ar2
                          10713 ;	genAssign
   2E66 90s00r00          10714 	mov	dptr,#__divsint_PARM_2
   2E69 74 0A             10715 	mov	a,#0x0A
   2E6B F0                10716 	movx	@dptr,a
   2E6C E4                10717 	clr	a
   2E6D A3                10718 	inc	dptr
   2E6E F0                10719 	movx	@dptr,a
                          10720 ;	genCall
   2E6F 8A 82             10721 	mov	dpl,r2
   2E71 8B 83             10722 	mov	dph,r3
   2E73 C0 04             10723 	push	ar4
   2E75 C0 05             10724 	push	ar5
   2E77 12s00r00          10725 	lcall	__divsint
   2E7A AA 82             10726 	mov	r2,dpl
   2E7C AB 83             10727 	mov	r3,dph
   2E7E D0 05             10728 	pop	ar5
   2E80 D0 04             10729 	pop	ar4
                          10730 ;	genAssign
   2E82 90s00r5A          10731 	mov	dptr,#_sec
   2E85 E0                10732 	movx	a,@dptr
   2E86 FE                10733 	mov	r6,a
   2E87 A3                10734 	inc	dptr
   2E88 E0                10735 	movx	a,@dptr
   2E89 FF                10736 	mov	r7,a
                          10737 ;	genAssign
   2E8A 90s00r00          10738 	mov	dptr,#__modsint_PARM_2
   2E8D 74 0A             10739 	mov	a,#0x0A
   2E8F F0                10740 	movx	@dptr,a
   2E90 E4                10741 	clr	a
   2E91 A3                10742 	inc	dptr
   2E92 F0                10743 	movx	@dptr,a
                          10744 ;	genCall
   2E93 8E 82             10745 	mov	dpl,r6
   2E95 8F 83             10746 	mov	dph,r7
   2E97 C0 02             10747 	push	ar2
   2E99 C0 03             10748 	push	ar3
   2E9B C0 04             10749 	push	ar4
   2E9D C0 05             10750 	push	ar5
   2E9F C0 06             10751 	push	ar6
   2EA1 C0 07             10752 	push	ar7
   2EA3 12s00r00          10753 	lcall	__modsint
   2EA6 85 82*04          10754 	mov	_clock_functions_sloc1_1_0,dpl
   2EA9 85 83*05          10755 	mov	(_clock_functions_sloc1_1_0 + 1),dph
   2EAC D0 07             10756 	pop	ar7
   2EAE D0 06             10757 	pop	ar6
   2EB0 D0 05             10758 	pop	ar5
   2EB2 D0 04             10759 	pop	ar4
   2EB4 D0 03             10760 	pop	ar3
   2EB6 D0 02             10761 	pop	ar2
                          10762 ;	genAssign
   2EB8 90s00r00          10763 	mov	dptr,#__divsint_PARM_2
   2EBB 74 0A             10764 	mov	a,#0x0A
   2EBD F0                10765 	movx	@dptr,a
   2EBE E4                10766 	clr	a
   2EBF A3                10767 	inc	dptr
   2EC0 F0                10768 	movx	@dptr,a
                          10769 ;	genCall
   2EC1 8E 82             10770 	mov	dpl,r6
   2EC3 8F 83             10771 	mov	dph,r7
   2EC5 C0 02             10772 	push	ar2
   2EC7 C0 03             10773 	push	ar3
   2EC9 C0 04             10774 	push	ar4
   2ECB C0 05             10775 	push	ar5
   2ECD 12s00r00          10776 	lcall	__divsint
   2ED0 85 82*02          10777 	mov	_clock_functions_sloc0_1_0,dpl
   2ED3 85 83*03          10778 	mov	(_clock_functions_sloc0_1_0 + 1),dph
   2ED6 D0 05             10779 	pop	ar5
   2ED8 D0 04             10780 	pop	ar4
   2EDA D0 03             10781 	pop	ar3
   2EDC D0 02             10782 	pop	ar2
                          10783 ;	genAssign
   2EDE 90s00r58          10784 	mov	dptr,#_minute
   2EE1 E0                10785 	movx	a,@dptr
   2EE2 FE                10786 	mov	r6,a
   2EE3 A3                10787 	inc	dptr
   2EE4 E0                10788 	movx	a,@dptr
   2EE5 FF                10789 	mov	r7,a
                          10790 ;	genAssign
   2EE6 90s00r00          10791 	mov	dptr,#__modsint_PARM_2
   2EE9 74 0A             10792 	mov	a,#0x0A
   2EEB F0                10793 	movx	@dptr,a
   2EEC E4                10794 	clr	a
   2EED A3                10795 	inc	dptr
   2EEE F0                10796 	movx	@dptr,a
                          10797 ;	genCall
   2EEF 8E 82             10798 	mov	dpl,r6
   2EF1 8F 83             10799 	mov	dph,r7
   2EF3 C0 02             10800 	push	ar2
   2EF5 C0 03             10801 	push	ar3
   2EF7 C0 04             10802 	push	ar4
   2EF9 C0 05             10803 	push	ar5
   2EFB C0 06             10804 	push	ar6
   2EFD C0 07             10805 	push	ar7
   2EFF 12s00r00          10806 	lcall	__modsint
   2F02 A8 82             10807 	mov	r0,dpl
   2F04 A9 83             10808 	mov	r1,dph
   2F06 D0 07             10809 	pop	ar7
   2F08 D0 06             10810 	pop	ar6
   2F0A D0 05             10811 	pop	ar5
   2F0C D0 04             10812 	pop	ar4
   2F0E D0 03             10813 	pop	ar3
   2F10 D0 02             10814 	pop	ar2
                          10815 ;	genAssign
   2F12 90s00r00          10816 	mov	dptr,#__divsint_PARM_2
   2F15 74 0A             10817 	mov	a,#0x0A
   2F17 F0                10818 	movx	@dptr,a
   2F18 E4                10819 	clr	a
   2F19 A3                10820 	inc	dptr
   2F1A F0                10821 	movx	@dptr,a
                          10822 ;	genCall
   2F1B 8E 82             10823 	mov	dpl,r6
   2F1D 8F 83             10824 	mov	dph,r7
   2F1F C0 02             10825 	push	ar2
   2F21 C0 03             10826 	push	ar3
   2F23 C0 04             10827 	push	ar4
   2F25 C0 05             10828 	push	ar5
   2F27 C0 00             10829 	push	ar0
   2F29 C0 01             10830 	push	ar1
   2F2B 12s00r00          10831 	lcall	__divsint
   2F2E AE 82             10832 	mov	r6,dpl
   2F30 AF 83             10833 	mov	r7,dph
   2F32 D0 01             10834 	pop	ar1
   2F34 D0 00             10835 	pop	ar0
   2F36 D0 05             10836 	pop	ar5
   2F38 D0 04             10837 	pop	ar4
   2F3A D0 03             10838 	pop	ar3
   2F3C D0 02             10839 	pop	ar2
                          10840 ;	genIpush
   2F3E C0 04             10841 	push	ar4
   2F40 C0 05             10842 	push	ar5
                          10843 ;	genIpush
   2F42 C0 02             10844 	push	ar2
   2F44 C0 03             10845 	push	ar3
                          10846 ;	genIpush
   2F46 C0*04             10847 	push	_clock_functions_sloc1_1_0
   2F48 C0*05             10848 	push	(_clock_functions_sloc1_1_0 + 1)
                          10849 ;	genIpush
   2F4A C0*02             10850 	push	_clock_functions_sloc0_1_0
   2F4C C0*03             10851 	push	(_clock_functions_sloc0_1_0 + 1)
                          10852 ;	genIpush
   2F4E C0 00             10853 	push	ar0
   2F50 C0 01             10854 	push	ar1
                          10855 ;	genIpush
   2F52 C0 06             10856 	push	ar6
   2F54 C0 07             10857 	push	ar7
                          10858 ;	genIpush
   2F56 74r50             10859 	mov	a,#__str_104
   2F58 C0 E0             10860 	push	acc
   2F5A 74s10             10861 	mov	a,#(__str_104 >> 8)
   2F5C C0 E0             10862 	push	acc
   2F5E 74 80             10863 	mov	a,#0x80
   2F60 C0 E0             10864 	push	acc
                          10865 ;	genCall
   2F62 12s00r00          10866 	lcall	_printf
   2F65 E5 81             10867 	mov	a,sp
   2F67 24 F1             10868 	add	a,#0xf1
   2F69 F5 81             10869 	mov	sp,a
                          10870 ;	main4.c:1246: }break;
                          10871 ;	Peephole 251.a	replaced ljmp to ret with ret
   2F6B 22                10872 	ret
                          10873 ;	main4.c:1247: case 5:
   2F6C                   10874 00106$:
                          10875 ;	main4.c:1249: if(advance==1)
                          10876 ;	genAssign
   2F6C 90s00r60          10877 	mov	dptr,#_advance
   2F6F E0                10878 	movx	a,@dptr
   2F70 FA                10879 	mov	r2,a
   2F71 A3                10880 	inc	dptr
   2F72 E0                10881 	movx	a,@dptr
   2F73 FB                10882 	mov	r3,a
                          10883 ;	genCmpEq
                          10884 ;	gencjneshort
                          10885 ;	Peephole 112.b	changed ljmp to sjmp
                          10886 ;	Peephole 198.a	optimized misc jump sequence
   2F74 BA 01 18          10887 	cjne	r2,#0x01,00108$
   2F77 BB 00 15          10888 	cjne	r3,#0x00,00108$
                          10889 ;	Peephole 200.b	removed redundant sjmp
                          10890 ;	Peephole 300	removed redundant label 00124$
                          10891 ;	Peephole 300	removed redundant label 00125$
                          10892 ;	main4.c:1250: printf("\n\n\rYou are already in advance mode");
                          10893 ;	genIpush
   2F7A 74r7C             10894 	mov	a,#__str_105
   2F7C C0 E0             10895 	push	acc
   2F7E 74s10             10896 	mov	a,#(__str_105 >> 8)
   2F80 C0 E0             10897 	push	acc
   2F82 74 80             10898 	mov	a,#0x80
   2F84 C0 E0             10899 	push	acc
                          10900 ;	genCall
   2F86 12s00r00          10901 	lcall	_printf
   2F89 15 81             10902 	dec	sp
   2F8B 15 81             10903 	dec	sp
   2F8D 15 81             10904 	dec	sp
   2F8F                   10905 00108$:
                          10906 ;	main4.c:1251: printf("\n\rAdvanced mode activated");
                          10907 ;	genIpush
   2F8F 74r9F             10908 	mov	a,#__str_106
   2F91 C0 E0             10909 	push	acc
   2F93 74s10             10910 	mov	a,#(__str_106 >> 8)
   2F95 C0 E0             10911 	push	acc
   2F97 74 80             10912 	mov	a,#0x80
   2F99 C0 E0             10913 	push	acc
                          10914 ;	genCall
   2F9B 12s00r00          10915 	lcall	_printf
   2F9E 15 81             10916 	dec	sp
   2FA0 15 81             10917 	dec	sp
   2FA2 15 81             10918 	dec	sp
                          10919 ;	main4.c:1254: advance =1;
                          10920 ;	genAssign
   2FA4 90s00r60          10921 	mov	dptr,#_advance
   2FA7 74 01             10922 	mov	a,#0x01
   2FA9 F0                10923 	movx	@dptr,a
   2FAA E4                10924 	clr	a
   2FAB A3                10925 	inc	dptr
   2FAC F0                10926 	movx	@dptr,a
                          10927 ;	main4.c:1255: }break;
                          10928 ;	main4.c:1256: case 6:
                          10929 ;	Peephole 112.b	changed ljmp to sjmp
                          10930 ;	Peephole 251.b	replaced sjmp to ret with ret
   2FAD 22                10931 	ret
   2FAE                   10932 00109$:
                          10933 ;	main4.c:1258: if(advance==0)
                          10934 ;	genAssign
   2FAE 90s00r60          10935 	mov	dptr,#_advance
   2FB1 E0                10936 	movx	a,@dptr
   2FB2 FA                10937 	mov	r2,a
   2FB3 A3                10938 	inc	dptr
   2FB4 E0                10939 	movx	a,@dptr
                          10940 ;	genIfx
   2FB5 FB                10941 	mov	r3,a
                          10942 ;	Peephole 135	removed redundant mov
   2FB6 4A                10943 	orl	a,r2
                          10944 ;	genIfxJump
                          10945 ;	Peephole 108.b	removed ljmp by inverse jump logic
   2FB7 70 16             10946 	jnz	00111$
                          10947 ;	Peephole 300	removed redundant label 00126$
                          10948 ;	main4.c:1259: printf("\n\n\rYou are already in advanced mode");
                          10949 ;	genIpush
   2FB9 74rB9             10950 	mov	a,#__str_107
   2FBB C0 E0             10951 	push	acc
   2FBD 74s10             10952 	mov	a,#(__str_107 >> 8)
   2FBF C0 E0             10953 	push	acc
   2FC1 74 80             10954 	mov	a,#0x80
   2FC3 C0 E0             10955 	push	acc
                          10956 ;	genCall
   2FC5 12s00r00          10957 	lcall	_printf
   2FC8 15 81             10958 	dec	sp
   2FCA 15 81             10959 	dec	sp
   2FCC 15 81             10960 	dec	sp
                          10961 ;	Peephole 112.b	changed ljmp to sjmp
                          10962 ;	Peephole 251.b	replaced sjmp to ret with ret
   2FCE 22                10963 	ret
   2FCF                   10964 00111$:
                          10965 ;	main4.c:1262: printf("\n\rAdvanced mode activated");
                          10966 ;	genIpush
   2FCF 74r9F             10967 	mov	a,#__str_106
   2FD1 C0 E0             10968 	push	acc
   2FD3 74s10             10969 	mov	a,#(__str_106 >> 8)
   2FD5 C0 E0             10970 	push	acc
   2FD7 74 80             10971 	mov	a,#0x80
   2FD9 C0 E0             10972 	push	acc
                          10973 ;	genCall
   2FDB 12s00r00          10974 	lcall	_printf
   2FDE 15 81             10975 	dec	sp
   2FE0 15 81             10976 	dec	sp
   2FE2 15 81             10977 	dec	sp
                          10978 ;	main4.c:1263: advance =0;
                          10979 ;	genAssign
   2FE4 90s00r60          10980 	mov	dptr,#_advance
   2FE7 E4                10981 	clr	a
   2FE8 F0                10982 	movx	@dptr,a
   2FE9 A3                10983 	inc	dptr
   2FEA F0                10984 	movx	@dptr,a
                          10985 ;	main4.c:1266: }break;
                          10986 ;	main4.c:1267: default:
                          10987 ;	Peephole 112.b	changed ljmp to sjmp
                          10988 ;	Peephole 251.b	replaced sjmp to ret with ret
   2FEB 22                10989 	ret
   2FEC                   10990 00113$:
                          10991 ;	main4.c:1269: printf("\n\n\rThis is the rise of the Pheonix Error.Invalid Input");
                          10992 ;	genIpush
   2FEC 74rDD             10993 	mov	a,#__str_108
   2FEE C0 E0             10994 	push	acc
   2FF0 74s10             10995 	mov	a,#(__str_108 >> 8)
   2FF2 C0 E0             10996 	push	acc
   2FF4 74 80             10997 	mov	a,#0x80
   2FF6 C0 E0             10998 	push	acc
                          10999 ;	genCall
   2FF8 12s00r00          11000 	lcall	_printf
   2FFB 15 81             11001 	dec	sp
   2FFD 15 81             11002 	dec	sp
   2FFF 15 81             11003 	dec	sp
                          11004 ;	main4.c:1271: }
                          11005 ;	Peephole 300	removed redundant label 00115$
   3001 22                11006 	ret
                          11007 ;------------------------------------------------------------
                          11008 ;Allocation info for local variables in function 'create_char'
                          11009 ;------------------------------------------------------------
                          11010 ;i                         Allocated with name '_create_char_i_1_1'
                          11011 ;------------------------------------------------------------
                          11012 ;	main4.c:1274: void create_char(void)
                          11013 ;	-----------------------------------------
                          11014 ;	 function create_char
                          11015 ;	-----------------------------------------
   3002                   11016 _create_char:
                          11017 ;	main4.c:1277: printf("\n\rWelcome to the create custom character mode");
                          11018 ;	genIpush
   3002 74r14             11019 	mov	a,#__str_109
   3004 C0 E0             11020 	push	acc
   3006 74s11             11021 	mov	a,#(__str_109 >> 8)
   3008 C0 E0             11022 	push	acc
   300A 74 80             11023 	mov	a,#0x80
   300C C0 E0             11024 	push	acc
                          11025 ;	genCall
   300E 12s00r00          11026 	lcall	_printf
   3011 15 81             11027 	dec	sp
   3013 15 81             11028 	dec	sp
   3015 15 81             11029 	dec	sp
                          11030 ;	main4.c:1279: printf("\n\rPlease enter the ccode(0-7) :");
                          11031 ;	genIpush
   3017 74r42             11032 	mov	a,#__str_110
   3019 C0 E0             11033 	push	acc
   301B 74s11             11034 	mov	a,#(__str_110 >> 8)
   301D C0 E0             11035 	push	acc
   301F 74 80             11036 	mov	a,#0x80
   3021 C0 E0             11037 	push	acc
                          11038 ;	genCall
   3023 12s00r00          11039 	lcall	_printf
   3026 15 81             11040 	dec	sp
   3028 15 81             11041 	dec	sp
   302A 15 81             11042 	dec	sp
                          11043 ;	main4.c:1280: ccode= getchar();
                          11044 ;	genCall
   302C 12s01r72          11045 	lcall	_getchar
   302F AA 82             11046 	mov	r2,dpl
                          11047 ;	genAssign
   3031 90s00r76          11048 	mov	dptr,#_ccode
   3034 EA                11049 	mov	a,r2
   3035 F0                11050 	movx	@dptr,a
                          11051 ;	main4.c:1281: if(isdigit(ccode) && (ccode-48)<=7 && (ccode-48)>=0)
                          11052 ;	genCall
   3036 8A 82             11053 	mov	dpl,r2
   3038 12s00r00          11054 	lcall	_isdigit
   303B E5 82             11055 	mov	a,dpl
                          11056 ;	genIfx
                          11057 ;	genIfxJump
                          11058 ;	Peephole 108.c	removed ljmp by inverse jump logic
   303D 60 32             11059 	jz	00102$
                          11060 ;	Peephole 300	removed redundant label 00118$
                          11061 ;	genAssign
   303F 90s00r76          11062 	mov	dptr,#_ccode
   3042 E0                11063 	movx	a,@dptr
   3043 FA                11064 	mov	r2,a
                          11065 ;	genCast
   3044 8A 03             11066 	mov	ar3,r2
   3046 7C 00             11067 	mov	r4,#0x00
                          11068 ;	genMinus
   3048 EB                11069 	mov	a,r3
   3049 24 D0             11070 	add	a,#0xd0
   304B FD                11071 	mov	r5,a
   304C EC                11072 	mov	a,r4
   304D 34 FF             11073 	addc	a,#0xff
   304F FE                11074 	mov	r6,a
                          11075 ;	genCmpGt
                          11076 ;	genCmp
   3050 C3                11077 	clr	c
   3051 74 07             11078 	mov	a,#0x07
   3053 9D                11079 	subb	a,r5
                          11080 ;	Peephole 159	avoided xrl during execution
   3054 74 80             11081 	mov	a,#(0x00 ^ 0x80)
   3056 8E F0             11082 	mov	b,r6
   3058 63 F0 80          11083 	xrl	b,#0x80
   305B 95 F0             11084 	subb	a,b
                          11085 ;	genIfxJump
                          11086 ;	Peephole 112.b	changed ljmp to sjmp
                          11087 ;	Peephole 160.a	removed sjmp by inverse jump logic
   305D 40 12             11088 	jc	00102$
                          11089 ;	Peephole 300	removed redundant label 00119$
                          11090 ;	genMinus
   305F EB                11091 	mov	a,r3
   3060 24 D0             11092 	add	a,#0xd0
   3062 FB                11093 	mov	r3,a
   3063 EC                11094 	mov	a,r4
   3064 34 FF             11095 	addc	a,#0xff
                          11096 ;	genCmpLt
                          11097 ;	genCmp
   3066 FC                11098 	mov	r4,a
                          11099 ;	Peephole 105	removed redundant mov
                          11100 ;	genIfxJump
                          11101 ;	Peephole 108.e	removed ljmp by inverse jump logic
   3067 20 E7 07          11102 	jb	acc.7,00102$
                          11103 ;	Peephole 300	removed redundant label 00120$
                          11104 ;	main4.c:1283: putchar(ccode);
                          11105 ;	genCall
   306A 8A 82             11106 	mov	dpl,r2
   306C 12s01r60          11107 	lcall	_putchar
                          11108 ;	Peephole 112.b	changed ljmp to sjmp
   306F 80 18             11109 	sjmp	00116$
   3071                   11110 00102$:
                          11111 ;	main4.c:1287: printf("Invalid Input, Try Again");
                          11112 ;	genIpush
   3071 74r62             11113 	mov	a,#__str_111
   3073 C0 E0             11114 	push	acc
   3075 74s11             11115 	mov	a,#(__str_111 >> 8)
   3077 C0 E0             11116 	push	acc
   3079 74 80             11117 	mov	a,#0x80
   307B C0 E0             11118 	push	acc
                          11119 ;	genCall
   307D 12s00r00          11120 	lcall	_printf
   3080 15 81             11121 	dec	sp
   3082 15 81             11122 	dec	sp
   3084 15 81             11123 	dec	sp
                          11124 ;	main4.c:1288: create_char();
                          11125 ;	genCall
   3086 12s30r02          11126 	lcall	_create_char
                          11127 ;	main4.c:1291: for(i=0;i<8;i++)
   3089                   11128 00116$:
                          11129 ;	genAssign
   3089 7A 00             11130 	mov	r2,#0x00
   308B                   11131 00106$:
                          11132 ;	genCmpLt
                          11133 ;	genCmp
   308B BA 08 00          11134 	cjne	r2,#0x08,00121$
   308E                   11135 00121$:
                          11136 ;	genIfxJump
                          11137 ;	Peephole 108.a	removed ljmp by inverse jump logic
   308E 50 5A             11138 	jnc	00109$
                          11139 ;	Peephole 300	removed redundant label 00122$
                          11140 ;	main4.c:1293: printf("\n\rPlease enter the pattern in hex for Row %d ",i);
                          11141 ;	genCast
   3090 8A 03             11142 	mov	ar3,r2
   3092 7C 00             11143 	mov	r4,#0x00
                          11144 ;	genIpush
   3094 C0 02             11145 	push	ar2
   3096 C0 03             11146 	push	ar3
   3098 C0 04             11147 	push	ar4
                          11148 ;	genIpush
   309A 74r7B             11149 	mov	a,#__str_112
   309C C0 E0             11150 	push	acc
   309E 74s11             11151 	mov	a,#(__str_112 >> 8)
   30A0 C0 E0             11152 	push	acc
   30A2 74 80             11153 	mov	a,#0x80
   30A4 C0 E0             11154 	push	acc
                          11155 ;	genCall
   30A6 12s00r00          11156 	lcall	_printf
   30A9 E5 81             11157 	mov	a,sp
   30AB 24 FB             11158 	add	a,#0xfb
   30AD F5 81             11159 	mov	sp,a
   30AF D0 02             11160 	pop	ar2
                          11161 ;	main4.c:1294: row_vals[i]= (char)get_data();
                          11162 ;	genPlus
                          11163 ;	Peephole 236.g	used r2 instead of ar2
   30B1 EA                11164 	mov	a,r2
   30B2 24r6E             11165 	add	a,#_row_vals
   30B4 FB                11166 	mov	r3,a
                          11167 ;	Peephole 181	changed mov to clr
   30B5 E4                11168 	clr	a
   30B6 34s00             11169 	addc	a,#(_row_vals >> 8)
   30B8 FC                11170 	mov	r4,a
                          11171 ;	genCall
   30B9 C0 02             11172 	push	ar2
   30BB C0 03             11173 	push	ar3
   30BD C0 04             11174 	push	ar4
   30BF 12s17rFC          11175 	lcall	_get_data
   30C2 AD 82             11176 	mov	r5,dpl
   30C4 AE 83             11177 	mov	r6,dph
   30C6 D0 04             11178 	pop	ar4
   30C8 D0 03             11179 	pop	ar3
   30CA D0 02             11180 	pop	ar2
                          11181 ;	genCast
                          11182 ;	genPointerSet
                          11183 ;     genFarPointerSet
   30CC 8B 82             11184 	mov	dpl,r3
   30CE 8C 83             11185 	mov	dph,r4
   30D0 ED                11186 	mov	a,r5
   30D1 F0                11187 	movx	@dptr,a
                          11188 ;	main4.c:1295: putchar(row_vals[i]);
                          11189 ;	genPlus
                          11190 ;	Peephole 236.g	used r2 instead of ar2
   30D2 EA                11191 	mov	a,r2
   30D3 24r6E             11192 	add	a,#_row_vals
   30D5 F5 82             11193 	mov	dpl,a
                          11194 ;	Peephole 181	changed mov to clr
   30D7 E4                11195 	clr	a
   30D8 34s00             11196 	addc	a,#(_row_vals >> 8)
   30DA F5 83             11197 	mov	dph,a
                          11198 ;	genPointerGet
                          11199 ;	genFarPointerGet
   30DC E0                11200 	movx	a,@dptr
                          11201 ;	genCall
   30DD FB                11202 	mov	r3,a
                          11203 ;	Peephole 244.c	loading dpl from a instead of r3
   30DE F5 82             11204 	mov	dpl,a
   30E0 C0 02             11205 	push	ar2
   30E2 12s01r60          11206 	lcall	_putchar
   30E5 D0 02             11207 	pop	ar2
                          11208 ;	main4.c:1291: for(i=0;i<8;i++)
                          11209 ;	genPlus
                          11210 ;     genPlusIncr
   30E7 0A                11211 	inc	r2
                          11212 ;	Peephole 112.b	changed ljmp to sjmp
   30E8 80 A1             11213 	sjmp	00106$
   30EA                   11214 00109$:
                          11215 ;	main4.c:1305: printf("Please enter enter the location where you want to print a custom character :");
                          11216 ;	genIpush
   30EA 74rA9             11217 	mov	a,#__str_113
   30EC C0 E0             11218 	push	acc
   30EE 74s11             11219 	mov	a,#(__str_113 >> 8)
   30F0 C0 E0             11220 	push	acc
   30F2 74 80             11221 	mov	a,#0x80
   30F4 C0 E0             11222 	push	acc
                          11223 ;	genCall
   30F6 12s00r00          11224 	lcall	_printf
   30F9 15 81             11225 	dec	sp
   30FB 15 81             11226 	dec	sp
   30FD 15 81             11227 	dec	sp
                          11228 ;	main4.c:1308: lcdcreatechar(ccode, &row_vals[0]);
                          11229 ;	genAssign
   30FF 90s00r76          11230 	mov	dptr,#_ccode
   3102 E0                11231 	movx	a,@dptr
   3103 FA                11232 	mov	r2,a
                          11233 ;	genCast
   3104 90s00r00          11234 	mov	dptr,#_lcdcreatechar_PARM_2
   3107 74r6E             11235 	mov	a,#_row_vals
   3109 F0                11236 	movx	@dptr,a
   310A A3                11237 	inc	dptr
   310B 74s00             11238 	mov	a,#(_row_vals >> 8)
   310D F0                11239 	movx	@dptr,a
   310E A3                11240 	inc	dptr
   310F 74 00             11241 	mov	a,#0x0
   3111 F0                11242 	movx	@dptr,a
                          11243 ;	genCall
   3112 8A 82             11244 	mov	dpl,r2
   3114 12s00r00          11245 	lcall	_lcdcreatechar
                          11246 ;	main4.c:1309: goto_row_column();
                          11247 ;	genCall
   3117 12s04rB0          11248 	lcall	_goto_row_column
                          11249 ;	main4.c:1310: lcdputch(ccode-48);
                          11250 ;	genAssign
   311A 90s00r76          11251 	mov	dptr,#_ccode
   311D E0                11252 	movx	a,@dptr
                          11253 ;	genMinus
                          11254 ;	Peephole 105	removed redundant mov
                          11255 ;	Peephole 215	removed some moves
   311E 24 D0             11256 	add	a,#0xd0
                          11257 ;	genCall
   3120 FA                11258 	mov	r2,a
                          11259 ;	Peephole 244.c	loading dpl from a instead of r2
   3121 F5 82             11260 	mov	dpl,a
                          11261 ;	Peephole 253.b	replaced lcall/ret with ljmp
   3123 02s00r00          11262 	ljmp	_lcdputch
                          11263 ;
                          11264 ;------------------------------------------------------------
                          11265 ;Allocation info for local variables in function 'expander_functions'
                          11266 ;------------------------------------------------------------
                          11267 ;sloc0                     Allocated with name '_expander_functions_sloc0_1_0'
                          11268 ;sloc1                     Allocated with name '_expander_functions_sloc1_1_0'
                          11269 ;sloc2                     Allocated with name '_expander_functions_sloc2_1_0'
                          11270 ;sloc3                     Allocated with name '_expander_functions_sloc3_1_0'
                          11271 ;choice4                   Allocated with name '_expander_functions_choice4_1_1'
                          11272 ;pin                       Allocated with name '_expander_functions_pin_1_1'
                          11273 ;p                         Allocated with name '_expander_functions_p_1_1'
                          11274 ;pinconfig                 Allocated with name '_expander_functions_pinconfig_1_1'
                          11275 ;i                         Allocated with name '_expander_functions_i_1_1'
                          11276 ;pw                        Allocated with name '_expander_functions_pw_1_1'
                          11277 ;pindata                   Allocated with name '_expander_functions_pindata_1_1'
                          11278 ;------------------------------------------------------------
                          11279 ;	main4.c:1314: void expander_functions(void)
                          11280 ;	-----------------------------------------
                          11281 ;	 function expander_functions
                          11282 ;	-----------------------------------------
   3126                   11283 _expander_functions:
                          11284 ;	main4.c:1317: unsigned int p[8]={0,0,0,0,0,0,0,0};
                          11285 ;	genPointerSet
                          11286 ;     genFarPointerSet
   3126 90s00rA0          11287 	mov	dptr,#_expander_functions_p_1_1
                          11288 ;	Peephole 181	changed mov to clr
   3129 E4                11289 	clr	a
   312A F0                11290 	movx	@dptr,a
   312B A3                11291 	inc	dptr
                          11292 ;	Peephole 101	removed redundant mov
   312C F0                11293 	movx	@dptr,a
                          11294 ;	genPointerSet
                          11295 ;     genFarPointerSet
   312D 90s00rA2          11296 	mov	dptr,#(_expander_functions_p_1_1 + 0x0002)
                          11297 ;	Peephole 181	changed mov to clr
   3130 E4                11298 	clr	a
   3131 F0                11299 	movx	@dptr,a
   3132 A3                11300 	inc	dptr
                          11301 ;	Peephole 101	removed redundant mov
   3133 F0                11302 	movx	@dptr,a
                          11303 ;	genPointerSet
                          11304 ;     genFarPointerSet
   3134 90s00rA4          11305 	mov	dptr,#(_expander_functions_p_1_1 + 0x0004)
                          11306 ;	Peephole 181	changed mov to clr
   3137 E4                11307 	clr	a
   3138 F0                11308 	movx	@dptr,a
   3139 A3                11309 	inc	dptr
                          11310 ;	Peephole 101	removed redundant mov
   313A F0                11311 	movx	@dptr,a
                          11312 ;	genPointerSet
                          11313 ;     genFarPointerSet
   313B 90s00rA6          11314 	mov	dptr,#(_expander_functions_p_1_1 + 0x0006)
                          11315 ;	Peephole 181	changed mov to clr
   313E E4                11316 	clr	a
   313F F0                11317 	movx	@dptr,a
   3140 A3                11318 	inc	dptr
                          11319 ;	Peephole 101	removed redundant mov
   3141 F0                11320 	movx	@dptr,a
                          11321 ;	genPointerSet
                          11322 ;     genFarPointerSet
   3142 90s00rA8          11323 	mov	dptr,#(_expander_functions_p_1_1 + 0x0008)
                          11324 ;	Peephole 181	changed mov to clr
   3145 E4                11325 	clr	a
   3146 F0                11326 	movx	@dptr,a
   3147 A3                11327 	inc	dptr
                          11328 ;	Peephole 101	removed redundant mov
   3148 F0                11329 	movx	@dptr,a
                          11330 ;	genPointerSet
                          11331 ;     genFarPointerSet
   3149 90s00rAA          11332 	mov	dptr,#(_expander_functions_p_1_1 + 0x000a)
                          11333 ;	Peephole 181	changed mov to clr
   314C E4                11334 	clr	a
   314D F0                11335 	movx	@dptr,a
   314E A3                11336 	inc	dptr
                          11337 ;	Peephole 101	removed redundant mov
   314F F0                11338 	movx	@dptr,a
                          11339 ;	genPointerSet
                          11340 ;     genFarPointerSet
   3150 90s00rAC          11341 	mov	dptr,#(_expander_functions_p_1_1 + 0x000c)
                          11342 ;	Peephole 181	changed mov to clr
   3153 E4                11343 	clr	a
   3154 F0                11344 	movx	@dptr,a
   3155 A3                11345 	inc	dptr
                          11346 ;	Peephole 101	removed redundant mov
   3156 F0                11347 	movx	@dptr,a
                          11348 ;	genPointerSet
                          11349 ;     genFarPointerSet
   3157 90s00rAE          11350 	mov	dptr,#(_expander_functions_p_1_1 + 0x000e)
                          11351 ;	Peephole 181	changed mov to clr
   315A E4                11352 	clr	a
   315B F0                11353 	movx	@dptr,a
   315C A3                11354 	inc	dptr
                          11355 ;	Peephole 101	removed redundant mov
   315D F0                11356 	movx	@dptr,a
                          11357 ;	main4.c:1320: printf("\n\n\r--------------------------------------------------------------------------------");
                          11358 ;	genIpush
   315E 74r3A             11359 	mov	a,#__str_88
   3160 C0 E0             11360 	push	acc
   3162 74s0E             11361 	mov	a,#(__str_88 >> 8)
   3164 C0 E0             11362 	push	acc
   3166 74 80             11363 	mov	a,#0x80
   3168 C0 E0             11364 	push	acc
                          11365 ;	genCall
   316A 12s00r00          11366 	lcall	_printf
   316D 15 81             11367 	dec	sp
   316F 15 81             11368 	dec	sp
   3171 15 81             11369 	dec	sp
                          11370 ;	main4.c:1321: printf("\n\r                              I2C PORT EXPANDER Functions");
                          11371 ;	genIpush
   3173 74rF6             11372 	mov	a,#__str_114
   3175 C0 E0             11373 	push	acc
   3177 74s11             11374 	mov	a,#(__str_114 >> 8)
   3179 C0 E0             11375 	push	acc
   317B 74 80             11376 	mov	a,#0x80
   317D C0 E0             11377 	push	acc
                          11378 ;	genCall
   317F 12s00r00          11379 	lcall	_printf
   3182 15 81             11380 	dec	sp
   3184 15 81             11381 	dec	sp
   3186 15 81             11382 	dec	sp
                          11383 ;	main4.c:1322: printf("\n\r--------------------------------------------------------------------------------");
                          11384 ;	genIpush
   3188 74r3A             11385 	mov	a,#__str_18
   318A C0 E0             11386 	push	acc
   318C 74s03             11387 	mov	a,#(__str_18 >> 8)
   318E C0 E0             11388 	push	acc
   3190 74 80             11389 	mov	a,#0x80
   3192 C0 E0             11390 	push	acc
                          11391 ;	genCall
   3194 12s00r00          11392 	lcall	_printf
   3197 15 81             11393 	dec	sp
   3199 15 81             11394 	dec	sp
   319B 15 81             11395 	dec	sp
                          11396 ;	main4.c:1323: printf("\n\rFunction 1:Write Port Pins functions and write the outputs");
                          11397 ;	genIpush
   319D 74r32             11398 	mov	a,#__str_115
   319F C0 E0             11399 	push	acc
   31A1 74s12             11400 	mov	a,#(__str_115 >> 8)
   31A3 C0 E0             11401 	push	acc
   31A5 74 80             11402 	mov	a,#0x80
   31A7 C0 E0             11403 	push	acc
                          11404 ;	genCall
   31A9 12s00r00          11405 	lcall	_printf
   31AC 15 81             11406 	dec	sp
   31AE 15 81             11407 	dec	sp
   31B0 15 81             11408 	dec	sp
                          11409 ;	main4.c:1324: printf("\n\rFunction 2:Read Port Pins");
                          11410 ;	genIpush
   31B2 74r6F             11411 	mov	a,#__str_116
   31B4 C0 E0             11412 	push	acc
   31B6 74s12             11413 	mov	a,#(__str_116 >> 8)
   31B8 C0 E0             11414 	push	acc
   31BA 74 80             11415 	mov	a,#0x80
   31BC C0 E0             11416 	push	acc
                          11417 ;	genCall
   31BE 12s00r00          11418 	lcall	_printf
   31C1 15 81             11419 	dec	sp
   31C3 15 81             11420 	dec	sp
   31C5 15 81             11421 	dec	sp
                          11422 ;	main4.c:1325: printf("\n\rFunction 3:Toggle Port P0");
                          11423 ;	genIpush
   31C7 74r8B             11424 	mov	a,#__str_117
   31C9 C0 E0             11425 	push	acc
   31CB 74s12             11426 	mov	a,#(__str_117 >> 8)
   31CD C0 E0             11427 	push	acc
   31CF 74 80             11428 	mov	a,#0x80
   31D1 C0 E0             11429 	push	acc
                          11430 ;	genCall
   31D3 12s00r00          11431 	lcall	_printf
   31D6 15 81             11432 	dec	sp
   31D8 15 81             11433 	dec	sp
   31DA 15 81             11434 	dec	sp
                          11435 ;	main4.c:1326: printf("\n\rFunction 4:Enable Interrupt for PORT EXPANDER");
                          11436 ;	genIpush
   31DC 74rA7             11437 	mov	a,#__str_118
   31DE C0 E0             11438 	push	acc
   31E0 74s12             11439 	mov	a,#(__str_118 >> 8)
   31E2 C0 E0             11440 	push	acc
   31E4 74 80             11441 	mov	a,#0x80
   31E6 C0 E0             11442 	push	acc
                          11443 ;	genCall
   31E8 12s00r00          11444 	lcall	_printf
   31EB 15 81             11445 	dec	sp
   31ED 15 81             11446 	dec	sp
   31EF 15 81             11447 	dec	sp
                          11448 ;	main4.c:1327: printf("\n\rEnter your choice:");
                          11449 ;	genIpush
   31F1 74r5B             11450 	mov	a,#__str_29
   31F3 C0 E0             11451 	push	acc
   31F5 74s05             11452 	mov	a,#(__str_29 >> 8)
   31F7 C0 E0             11453 	push	acc
   31F9 74 80             11454 	mov	a,#0x80
   31FB C0 E0             11455 	push	acc
                          11456 ;	genCall
   31FD 12s00r00          11457 	lcall	_printf
   3200 15 81             11458 	dec	sp
   3202 15 81             11459 	dec	sp
   3204 15 81             11460 	dec	sp
                          11461 ;	main4.c:1328: choice4 = getchar();
                          11462 ;	genCall
   3206 12s01r72          11463 	lcall	_getchar
   3209 AA 82             11464 	mov	r2,dpl
                          11465 ;	main4.c:1330: switch(choice4)
                          11466 ;	genCmpEq
                          11467 ;	gencjneshort
   320B BA 30 02          11468 	cjne	r2,#0x30,00174$
                          11469 ;	Peephole 112.b	changed ljmp to sjmp
   320E 80 1A             11470 	sjmp	00101$
   3210                   11471 00174$:
                          11472 ;	genCmpEq
                          11473 ;	gencjneshort
   3210 BA 31 02          11474 	cjne	r2,#0x31,00175$
                          11475 ;	Peephole 112.b	changed ljmp to sjmp
   3213 80 18             11476 	sjmp	00102$
   3215                   11477 00175$:
                          11478 ;	genCmpEq
                          11479 ;	gencjneshort
   3215 BA 32 03          11480 	cjne	r2,#0x32,00176$
   3218 02s35r20          11481 	ljmp	00109$
   321B                   11482 00176$:
                          11483 ;	genCmpEq
                          11484 ;	gencjneshort
   321B BA 33 03          11485 	cjne	r2,#0x33,00177$
   321E 02s36rD9          11486 	ljmp	00134$
   3221                   11487 00177$:
                          11488 ;	genCmpEq
                          11489 ;	gencjneshort
   3221 BA 34 03          11490 	cjne	r2,#0x34,00178$
   3224 02s37rDA          11491 	ljmp	00138$
   3227                   11492 00178$:
   3227 02s37rF2          11493 	ljmp	00139$
                          11494 ;	main4.c:1332: case '0':
   322A                   11495 00101$:
                          11496 ;	main4.c:1335: main_menu();
                          11497 ;	genCall
                          11498 ;	main4.c:1336: }break;
                          11499 ;	Peephole 251.a	replaced ljmp to ret with ret
                          11500 ;	Peephole 253.a	replaced lcall/ret with ljmp
   322A 02s0Fr01          11501 	ljmp	_main_menu
                          11502 ;	main4.c:1337: case '1':
   322D                   11503 00102$:
                          11504 ;	main4.c:1339: printf("\n\rPlease select the function of the pins");
                          11505 ;	genIpush
   322D 74rD7             11506 	mov	a,#__str_119
   322F C0 E0             11507 	push	acc
   3231 74s12             11508 	mov	a,#(__str_119 >> 8)
   3233 C0 E0             11509 	push	acc
   3235 74 80             11510 	mov	a,#0x80
   3237 C0 E0             11511 	push	acc
                          11512 ;	genCall
   3239 12s00r00          11513 	lcall	_printf
   323C 15 81             11514 	dec	sp
   323E 15 81             11515 	dec	sp
   3240 15 81             11516 	dec	sp
                          11517 ;	main4.c:1340: for(i=0;i<8;i++)
                          11518 ;	genAssign
   3242 7A 00             11519 	mov	r2,#0x00
   3244 7B 00             11520 	mov	r3,#0x00
   3246                   11521 00141$:
                          11522 ;	genCmpLt
                          11523 ;	genCmp
   3246 C3                11524 	clr	c
   3247 EA                11525 	mov	a,r2
   3248 94 08             11526 	subb	a,#0x08
   324A EB                11527 	mov	a,r3
   324B 64 80             11528 	xrl	a,#0x80
   324D 94 80             11529 	subb	a,#0x80
                          11530 ;	genIfxJump
                          11531 ;	Peephole 112.b	changed ljmp to sjmp
                          11532 ;	Peephole 160.b	removed sjmp by inverse jump logic
   324F 50 6C             11533 	jnc	00144$
                          11534 ;	Peephole 300	removed redundant label 00179$
                          11535 ;	main4.c:1342: printf("\n\rPlease select the function for Pin%d",i);
                          11536 ;	genIpush
   3251 C0 02             11537 	push	ar2
   3253 C0 03             11538 	push	ar3
   3255 C0 02             11539 	push	ar2
   3257 C0 03             11540 	push	ar3
                          11541 ;	genIpush
   3259 74r00             11542 	mov	a,#__str_120
   325B C0 E0             11543 	push	acc
   325D 74s13             11544 	mov	a,#(__str_120 >> 8)
   325F C0 E0             11545 	push	acc
   3261 74 80             11546 	mov	a,#0x80
   3263 C0 E0             11547 	push	acc
                          11548 ;	genCall
   3265 12s00r00          11549 	lcall	_printf
   3268 E5 81             11550 	mov	a,sp
   326A 24 FB             11551 	add	a,#0xfb
   326C F5 81             11552 	mov	sp,a
   326E D0 03             11553 	pop	ar3
   3270 D0 02             11554 	pop	ar2
                          11555 ;	main4.c:1343: pin = getchar();
                          11556 ;	genCall
   3272 C0 02             11557 	push	ar2
   3274 C0 03             11558 	push	ar3
   3276 12s01r72          11559 	lcall	_getchar
   3279 AC 82             11560 	mov	r4,dpl
   327B D0 03             11561 	pop	ar3
   327D D0 02             11562 	pop	ar2
                          11563 ;	main4.c:1344: if(pin == '1')
                          11564 ;	genCmpEq
                          11565 ;	gencjneshort
                          11566 ;	Peephole 112.b	changed ljmp to sjmp
                          11567 ;	Peephole 198.b	optimized misc jump sequence
   327F BC 31 19          11568 	cjne	r4,#0x31,00104$
                          11569 ;	Peephole 200.b	removed redundant sjmp
                          11570 ;	Peephole 300	removed redundant label 00180$
                          11571 ;	Peephole 300	removed redundant label 00181$
                          11572 ;	main4.c:1346: p[i]=1;
                          11573 ;	genLeftShift
                          11574 ;	genLeftShiftLiteral
                          11575 ;	genlshTwo
   3282 8A 05             11576 	mov	ar5,r2
   3284 EB                11577 	mov	a,r3
   3285 CD                11578 	xch	a,r5
   3286 25 E0             11579 	add	a,acc
   3288 CD                11580 	xch	a,r5
   3289 33                11581 	rlc	a
   328A FE                11582 	mov	r6,a
                          11583 ;	genPlus
                          11584 ;	Peephole 236.g	used r5 instead of ar5
   328B ED                11585 	mov	a,r5
   328C 24rA0             11586 	add	a,#_expander_functions_p_1_1
   328E F5 82             11587 	mov	dpl,a
                          11588 ;	Peephole 236.g	used r6 instead of ar6
   3290 EE                11589 	mov	a,r6
   3291 34s00             11590 	addc	a,#(_expander_functions_p_1_1 >> 8)
   3293 F5 83             11591 	mov	dph,a
                          11592 ;	genPointerSet
                          11593 ;     genFarPointerSet
   3295 74 01             11594 	mov	a,#0x01
   3297 F0                11595 	movx	@dptr,a
   3298 A3                11596 	inc	dptr
                          11597 ;	Peephole 181	changed mov to clr
   3299 E4                11598 	clr	a
   329A F0                11599 	movx	@dptr,a
   329B                   11600 00104$:
                          11601 ;	main4.c:1349: if(pin == '0')
                          11602 ;	genCmpEq
                          11603 ;	gencjneshort
                          11604 ;	Peephole 112.b	changed ljmp to sjmp
                          11605 ;	Peephole 198.b	optimized misc jump sequence
   329B BC 30 17          11606 	cjne	r4,#0x30,00143$
                          11607 ;	Peephole 200.b	removed redundant sjmp
                          11608 ;	Peephole 300	removed redundant label 00182$
                          11609 ;	Peephole 300	removed redundant label 00183$
                          11610 ;	main4.c:1351: p[i]= 0;
                          11611 ;	genLeftShift
                          11612 ;	genLeftShiftLiteral
                          11613 ;	genlshTwo
   329E 8A 04             11614 	mov	ar4,r2
   32A0 EB                11615 	mov	a,r3
   32A1 CC                11616 	xch	a,r4
   32A2 25 E0             11617 	add	a,acc
   32A4 CC                11618 	xch	a,r4
   32A5 33                11619 	rlc	a
   32A6 FD                11620 	mov	r5,a
                          11621 ;	genPlus
                          11622 ;	Peephole 236.g	used r4 instead of ar4
   32A7 EC                11623 	mov	a,r4
   32A8 24rA0             11624 	add	a,#_expander_functions_p_1_1
   32AA F5 82             11625 	mov	dpl,a
                          11626 ;	Peephole 236.g	used r5 instead of ar5
   32AC ED                11627 	mov	a,r5
   32AD 34s00             11628 	addc	a,#(_expander_functions_p_1_1 >> 8)
   32AF F5 83             11629 	mov	dph,a
                          11630 ;	genPointerSet
                          11631 ;     genFarPointerSet
                          11632 ;	Peephole 181	changed mov to clr
   32B1 E4                11633 	clr	a
   32B2 F0                11634 	movx	@dptr,a
   32B3 A3                11635 	inc	dptr
                          11636 ;	Peephole 101	removed redundant mov
   32B4 F0                11637 	movx	@dptr,a
   32B5                   11638 00143$:
                          11639 ;	main4.c:1340: for(i=0;i<8;i++)
                          11640 ;	genPlus
                          11641 ;     genPlusIncr
   32B5 0A                11642 	inc	r2
   32B6 BA 00 01          11643 	cjne	r2,#0x00,00184$
   32B9 0B                11644 	inc	r3
   32BA                   11645 00184$:
   32BA 02s32r46          11646 	ljmp	00141$
   32BD                   11647 00144$:
                          11648 ;	main4.c:1354: pinconfig = p[0]+(p[1]*2)+(p[2]*4)+(p[3]*8)+(p[4]*16)+(p[5]*32)+(p[6]*64)+(p[7]*128);
                          11649 ;	genPointerGet
                          11650 ;	genFarPointerGet
   32BD 90s00rA0          11651 	mov	dptr,#_expander_functions_p_1_1
   32C0 E0                11652 	movx	a,@dptr
   32C1 FA                11653 	mov	r2,a
   32C2 A3                11654 	inc	dptr
   32C3 E0                11655 	movx	a,@dptr
   32C4 FB                11656 	mov	r3,a
                          11657 ;	genPointerGet
                          11658 ;	genFarPointerGet
   32C5 90s00rA2          11659 	mov	dptr,#(_expander_functions_p_1_1 + 0x0002)
   32C8 E0                11660 	movx	a,@dptr
   32C9 FC                11661 	mov	r4,a
   32CA A3                11662 	inc	dptr
   32CB E0                11663 	movx	a,@dptr
                          11664 ;	genLeftShift
                          11665 ;	genLeftShiftLiteral
                          11666 ;	genlshTwo
   32CC FD                11667 	mov	r5,a
                          11668 ;	Peephole 105	removed redundant mov
   32CD CC                11669 	xch	a,r4
   32CE 25 E0             11670 	add	a,acc
   32D0 CC                11671 	xch	a,r4
   32D1 33                11672 	rlc	a
   32D2 FD                11673 	mov	r5,a
                          11674 ;	genPlus
                          11675 ;	Peephole 236.g	used r4 instead of ar4
   32D3 EC                11676 	mov	a,r4
                          11677 ;	Peephole 236.a	used r2 instead of ar2
   32D4 2A                11678 	add	a,r2
   32D5 FA                11679 	mov	r2,a
                          11680 ;	Peephole 236.g	used r5 instead of ar5
   32D6 ED                11681 	mov	a,r5
                          11682 ;	Peephole 236.b	used r3 instead of ar3
   32D7 3B                11683 	addc	a,r3
   32D8 FB                11684 	mov	r3,a
                          11685 ;	genPointerGet
                          11686 ;	genFarPointerGet
   32D9 90s00rA4          11687 	mov	dptr,#(_expander_functions_p_1_1 + 0x0004)
   32DC E0                11688 	movx	a,@dptr
   32DD FC                11689 	mov	r4,a
   32DE A3                11690 	inc	dptr
   32DF E0                11691 	movx	a,@dptr
                          11692 ;	genLeftShift
                          11693 ;	genLeftShiftLiteral
                          11694 ;	genlshTwo
   32E0 FD                11695 	mov	r5,a
                          11696 ;	Peephole 105	removed redundant mov
   32E1 CC                11697 	xch	a,r4
   32E2 25 E0             11698 	add	a,acc
   32E4 CC                11699 	xch	a,r4
   32E5 33                11700 	rlc	a
   32E6 CC                11701 	xch	a,r4
   32E7 25 E0             11702 	add	a,acc
   32E9 CC                11703 	xch	a,r4
   32EA 33                11704 	rlc	a
   32EB FD                11705 	mov	r5,a
                          11706 ;	genPlus
                          11707 ;	Peephole 236.g	used r4 instead of ar4
   32EC EC                11708 	mov	a,r4
                          11709 ;	Peephole 236.a	used r2 instead of ar2
   32ED 2A                11710 	add	a,r2
   32EE FA                11711 	mov	r2,a
                          11712 ;	Peephole 236.g	used r5 instead of ar5
   32EF ED                11713 	mov	a,r5
                          11714 ;	Peephole 236.b	used r3 instead of ar3
   32F0 3B                11715 	addc	a,r3
   32F1 FB                11716 	mov	r3,a
                          11717 ;	genPointerGet
                          11718 ;	genFarPointerGet
   32F2 90s00rA6          11719 	mov	dptr,#(_expander_functions_p_1_1 + 0x0006)
   32F5 E0                11720 	movx	a,@dptr
   32F6 FC                11721 	mov	r4,a
   32F7 A3                11722 	inc	dptr
   32F8 E0                11723 	movx	a,@dptr
                          11724 ;	genLeftShift
                          11725 ;	genLeftShiftLiteral
                          11726 ;	genlshTwo
   32F9 FD                11727 	mov	r5,a
                          11728 ;	Peephole 105	removed redundant mov
   32FA C4                11729 	swap	a
   32FB 03                11730 	rr	a
   32FC 54 F8             11731 	anl	a,#0xf8
   32FE CC                11732 	xch	a,r4
   32FF C4                11733 	swap	a
   3300 03                11734 	rr	a
   3301 CC                11735 	xch	a,r4
   3302 6C                11736 	xrl	a,r4
   3303 CC                11737 	xch	a,r4
   3304 54 F8             11738 	anl	a,#0xf8
   3306 CC                11739 	xch	a,r4
   3307 6C                11740 	xrl	a,r4
   3308 FD                11741 	mov	r5,a
                          11742 ;	genPlus
                          11743 ;	Peephole 236.g	used r4 instead of ar4
   3309 EC                11744 	mov	a,r4
                          11745 ;	Peephole 236.a	used r2 instead of ar2
   330A 2A                11746 	add	a,r2
   330B FA                11747 	mov	r2,a
                          11748 ;	Peephole 236.g	used r5 instead of ar5
   330C ED                11749 	mov	a,r5
                          11750 ;	Peephole 236.b	used r3 instead of ar3
   330D 3B                11751 	addc	a,r3
   330E FB                11752 	mov	r3,a
                          11753 ;	genPointerGet
                          11754 ;	genFarPointerGet
   330F 90s00rA8          11755 	mov	dptr,#(_expander_functions_p_1_1 + 0x0008)
   3312 E0                11756 	movx	a,@dptr
   3313 FC                11757 	mov	r4,a
   3314 A3                11758 	inc	dptr
   3315 E0                11759 	movx	a,@dptr
                          11760 ;	genLeftShift
                          11761 ;	genLeftShiftLiteral
                          11762 ;	genlshTwo
   3316 FD                11763 	mov	r5,a
                          11764 ;	Peephole 105	removed redundant mov
   3317 C4                11765 	swap	a
   3318 54 F0             11766 	anl	a,#0xf0
   331A CC                11767 	xch	a,r4
   331B C4                11768 	swap	a
   331C CC                11769 	xch	a,r4
   331D 6C                11770 	xrl	a,r4
   331E CC                11771 	xch	a,r4
   331F 54 F0             11772 	anl	a,#0xf0
   3321 CC                11773 	xch	a,r4
   3322 6C                11774 	xrl	a,r4
   3323 FD                11775 	mov	r5,a
                          11776 ;	genPlus
                          11777 ;	Peephole 236.g	used r4 instead of ar4
   3324 EC                11778 	mov	a,r4
                          11779 ;	Peephole 236.a	used r2 instead of ar2
   3325 2A                11780 	add	a,r2
   3326 FA                11781 	mov	r2,a
                          11782 ;	Peephole 236.g	used r5 instead of ar5
   3327 ED                11783 	mov	a,r5
                          11784 ;	Peephole 236.b	used r3 instead of ar3
   3328 3B                11785 	addc	a,r3
   3329 FB                11786 	mov	r3,a
                          11787 ;	genPointerGet
                          11788 ;	genFarPointerGet
   332A 90s00rAA          11789 	mov	dptr,#(_expander_functions_p_1_1 + 0x000a)
   332D E0                11790 	movx	a,@dptr
   332E FC                11791 	mov	r4,a
   332F A3                11792 	inc	dptr
   3330 E0                11793 	movx	a,@dptr
                          11794 ;	genLeftShift
                          11795 ;	genLeftShiftLiteral
                          11796 ;	genlshTwo
   3331 FD                11797 	mov	r5,a
                          11798 ;	Peephole 105	removed redundant mov
   3332 C4                11799 	swap	a
   3333 23                11800 	rl	a
   3334 54 E0             11801 	anl	a,#0xe0
   3336 CC                11802 	xch	a,r4
   3337 C4                11803 	swap	a
   3338 23                11804 	rl	a
   3339 CC                11805 	xch	a,r4
   333A 6C                11806 	xrl	a,r4
   333B CC                11807 	xch	a,r4
   333C 54 E0             11808 	anl	a,#0xe0
   333E CC                11809 	xch	a,r4
   333F 6C                11810 	xrl	a,r4
   3340 FD                11811 	mov	r5,a
                          11812 ;	genPlus
                          11813 ;	Peephole 236.g	used r4 instead of ar4
   3341 EC                11814 	mov	a,r4
                          11815 ;	Peephole 236.a	used r2 instead of ar2
   3342 2A                11816 	add	a,r2
   3343 FA                11817 	mov	r2,a
                          11818 ;	Peephole 236.g	used r5 instead of ar5
   3344 ED                11819 	mov	a,r5
                          11820 ;	Peephole 236.b	used r3 instead of ar3
   3345 3B                11821 	addc	a,r3
   3346 FB                11822 	mov	r3,a
                          11823 ;	genPointerGet
                          11824 ;	genFarPointerGet
   3347 90s00rAC          11825 	mov	dptr,#(_expander_functions_p_1_1 + 0x000c)
   334A E0                11826 	movx	a,@dptr
   334B FC                11827 	mov	r4,a
   334C A3                11828 	inc	dptr
   334D E0                11829 	movx	a,@dptr
                          11830 ;	genLeftShift
                          11831 ;	genLeftShiftLiteral
                          11832 ;	genlshTwo
   334E FD                11833 	mov	r5,a
                          11834 ;	Peephole 105	removed redundant mov
   334F 54 03             11835 	anl	a,#0x03
   3351 A2 E0             11836 	mov	c,acc.0
   3353 CC                11837 	xch	a,r4
   3354 13                11838 	rrc	a
   3355 CC                11839 	xch	a,r4
   3356 13                11840 	rrc	a
   3357 A2 E0             11841 	mov	c,acc.0
   3359 CC                11842 	xch	a,r4
   335A 13                11843 	rrc	a
   335B CC                11844 	xch	a,r4
   335C 13                11845 	rrc	a
   335D CC                11846 	xch	a,r4
   335E FD                11847 	mov	r5,a
                          11848 ;	genPlus
                          11849 ;	Peephole 236.g	used r4 instead of ar4
   335F EC                11850 	mov	a,r4
                          11851 ;	Peephole 236.a	used r2 instead of ar2
   3360 2A                11852 	add	a,r2
   3361 FA                11853 	mov	r2,a
                          11854 ;	Peephole 236.g	used r5 instead of ar5
   3362 ED                11855 	mov	a,r5
                          11856 ;	Peephole 236.b	used r3 instead of ar3
   3363 3B                11857 	addc	a,r3
   3364 FB                11858 	mov	r3,a
                          11859 ;	genPointerGet
                          11860 ;	genFarPointerGet
   3365 90s00rAE          11861 	mov	dptr,#(_expander_functions_p_1_1 + 0x000e)
   3368 E0                11862 	movx	a,@dptr
   3369 FC                11863 	mov	r4,a
   336A A3                11864 	inc	dptr
   336B E0                11865 	movx	a,@dptr
                          11866 ;	genLeftShift
                          11867 ;	genLeftShiftLiteral
                          11868 ;	genlshTwo
   336C FD                11869 	mov	r5,a
                          11870 ;	Peephole 105	removed redundant mov
   336D 54 01             11871 	anl	a,#0x01
   336F A2 E0             11872 	mov	c,acc.0
   3371 CC                11873 	xch	a,r4
   3372 13                11874 	rrc	a
   3373 CC                11875 	xch	a,r4
   3374 13                11876 	rrc	a
   3375 CC                11877 	xch	a,r4
   3376 FD                11878 	mov	r5,a
                          11879 ;	genPlus
                          11880 ;	Peephole 236.g	used r4 instead of ar4
   3377 EC                11881 	mov	a,r4
                          11882 ;	Peephole 236.a	used r2 instead of ar2
   3378 2A                11883 	add	a,r2
   3379 FA                11884 	mov	r2,a
                          11885 ;	Peephole 236.g	used r5 instead of ar5
   337A ED                11886 	mov	a,r5
                          11887 ;	Peephole 236.b	used r3 instead of ar3
   337B 3B                11888 	addc	a,r3
   337C FB                11889 	mov	r3,a
                          11890 ;	main4.c:1355: printf("The Pinconfig is %X",pinconfig);
                          11891 ;	genIpush
   337D C0 02             11892 	push	ar2
   337F C0 03             11893 	push	ar3
   3381 C0 02             11894 	push	ar2
   3383 C0 03             11895 	push	ar3
                          11896 ;	genIpush
   3385 74r27             11897 	mov	a,#__str_121
   3387 C0 E0             11898 	push	acc
   3389 74s13             11899 	mov	a,#(__str_121 >> 8)
   338B C0 E0             11900 	push	acc
   338D 74 80             11901 	mov	a,#0x80
   338F C0 E0             11902 	push	acc
                          11903 ;	genCall
   3391 12s00r00          11904 	lcall	_printf
   3394 E5 81             11905 	mov	a,sp
   3396 24 FB             11906 	add	a,#0xfb
   3398 F5 81             11907 	mov	sp,a
   339A D0 03             11908 	pop	ar3
   339C D0 02             11909 	pop	ar2
                          11910 ;	main4.c:1358: printf("\n\rPlease write data on the output port pins");
                          11911 ;	genIpush
   339E C0 02             11912 	push	ar2
   33A0 C0 03             11913 	push	ar3
   33A2 74r3B             11914 	mov	a,#__str_122
   33A4 C0 E0             11915 	push	acc
   33A6 74s13             11916 	mov	a,#(__str_122 >> 8)
   33A8 C0 E0             11917 	push	acc
   33AA 74 80             11918 	mov	a,#0x80
   33AC C0 E0             11919 	push	acc
                          11920 ;	genCall
   33AE 12s00r00          11921 	lcall	_printf
   33B1 15 81             11922 	dec	sp
   33B3 15 81             11923 	dec	sp
   33B5 15 81             11924 	dec	sp
   33B7 D0 03             11925 	pop	ar3
   33B9 D0 02             11926 	pop	ar2
                          11927 ;	main4.c:1359: for(i=0;i<8;i++)
                          11928 ;	genAssign
   33BB 7C 00             11929 	mov	r4,#0x00
   33BD 7D 00             11930 	mov	r5,#0x00
   33BF                   11931 00145$:
                          11932 ;	genCmpLt
                          11933 ;	genCmp
   33BF C3                11934 	clr	c
   33C0 EC                11935 	mov	a,r4
   33C1 94 08             11936 	subb	a,#0x08
   33C3 ED                11937 	mov	a,r5
   33C4 64 80             11938 	xrl	a,#0x80
   33C6 94 80             11939 	subb	a,#0x80
                          11940 ;	genIfxJump
   33C8 40 03             11941 	jc	00185$
   33CA 02s34r52          11942 	ljmp	00148$
   33CD                   11943 00185$:
                          11944 ;	main4.c:1361: if(p[i]==1)
                          11945 ;	genLeftShift
                          11946 ;	genLeftShiftLiteral
                          11947 ;	genlshTwo
   33CD 8C 06             11948 	mov	ar6,r4
   33CF ED                11949 	mov	a,r5
   33D0 CE                11950 	xch	a,r6
   33D1 25 E0             11951 	add	a,acc
   33D3 CE                11952 	xch	a,r6
   33D4 33                11953 	rlc	a
   33D5 FF                11954 	mov	r7,a
                          11955 ;	genPlus
                          11956 ;	Peephole 236.g	used r6 instead of ar6
   33D6 EE                11957 	mov	a,r6
   33D7 24rA0             11958 	add	a,#_expander_functions_p_1_1
   33D9 F5 82             11959 	mov	dpl,a
                          11960 ;	Peephole 236.g	used r7 instead of ar7
   33DB EF                11961 	mov	a,r7
   33DC 34s00             11962 	addc	a,#(_expander_functions_p_1_1 >> 8)
   33DE F5 83             11963 	mov	dph,a
                          11964 ;	genPointerGet
                          11965 ;	genFarPointerGet
   33E0 E0                11966 	movx	a,@dptr
   33E1 F8                11967 	mov	r0,a
   33E2 A3                11968 	inc	dptr
   33E3 E0                11969 	movx	a,@dptr
   33E4 F9                11970 	mov	r1,a
                          11971 ;	genCmpEq
                          11972 ;	gencjneshort
                          11973 ;	Peephole 112.b	changed ljmp to sjmp
                          11974 ;	Peephole 198.a	optimized misc jump sequence
   33E5 B8 01 62          11975 	cjne	r0,#0x01,00147$
   33E8 B9 00 5F          11976 	cjne	r1,#0x00,00147$
                          11977 ;	Peephole 200.b	removed redundant sjmp
                          11978 ;	Peephole 300	removed redundant label 00186$
                          11979 ;	Peephole 300	removed redundant label 00187$
                          11980 ;	main4.c:1363: printf("\n\rPlease enter the output on pin %d",i);
                          11981 ;	genIpush
   33EB C0 02             11982 	push	ar2
   33ED C0 03             11983 	push	ar3
   33EF C0 04             11984 	push	ar4
   33F1 C0 05             11985 	push	ar5
   33F3 C0 06             11986 	push	ar6
   33F5 C0 07             11987 	push	ar7
   33F7 C0 04             11988 	push	ar4
   33F9 C0 05             11989 	push	ar5
                          11990 ;	genIpush
   33FB 74r67             11991 	mov	a,#__str_123
   33FD C0 E0             11992 	push	acc
   33FF 74s13             11993 	mov	a,#(__str_123 >> 8)
   3401 C0 E0             11994 	push	acc
   3403 74 80             11995 	mov	a,#0x80
   3405 C0 E0             11996 	push	acc
                          11997 ;	genCall
   3407 12s00r00          11998 	lcall	_printf
   340A E5 81             11999 	mov	a,sp
   340C 24 FB             12000 	add	a,#0xfb
   340E F5 81             12001 	mov	sp,a
   3410 D0 07             12002 	pop	ar7
   3412 D0 06             12003 	pop	ar6
   3414 D0 05             12004 	pop	ar5
   3416 D0 04             12005 	pop	ar4
   3418 D0 03             12006 	pop	ar3
   341A D0 02             12007 	pop	ar2
                          12008 ;	main4.c:1364: pin = getchar();
                          12009 ;	genCall
   341C C0 02             12010 	push	ar2
   341E C0 03             12011 	push	ar3
   3420 C0 04             12012 	push	ar4
   3422 C0 05             12013 	push	ar5
   3424 C0 06             12014 	push	ar6
   3426 C0 07             12015 	push	ar7
   3428 12s01r72          12016 	lcall	_getchar
   342B A8 82             12017 	mov	r0,dpl
   342D D0 07             12018 	pop	ar7
   342F D0 06             12019 	pop	ar6
   3431 D0 05             12020 	pop	ar5
   3433 D0 04             12021 	pop	ar4
   3435 D0 03             12022 	pop	ar3
   3437 D0 02             12023 	pop	ar2
                          12024 ;	main4.c:1365: pw[i] = pin;
                          12025 ;	genPlus
                          12026 ;	Peephole 236.g	used r6 instead of ar6
   3439 EE                12027 	mov	a,r6
   343A 24rB0             12028 	add	a,#_expander_functions_pw_1_1
   343C F5 82             12029 	mov	dpl,a
                          12030 ;	Peephole 236.g	used r7 instead of ar7
   343E EF                12031 	mov	a,r7
   343F 34s00             12032 	addc	a,#(_expander_functions_pw_1_1 >> 8)
   3441 F5 83             12033 	mov	dph,a
                          12034 ;	genCast
   3443 7E 00             12035 	mov	r6,#0x00
                          12036 ;	genPointerSet
                          12037 ;     genFarPointerSet
   3445 E8                12038 	mov	a,r0
   3446 F0                12039 	movx	@dptr,a
   3447 A3                12040 	inc	dptr
   3448 EE                12041 	mov	a,r6
   3449 F0                12042 	movx	@dptr,a
   344A                   12043 00147$:
                          12044 ;	main4.c:1359: for(i=0;i<8;i++)
                          12045 ;	genPlus
                          12046 ;     genPlusIncr
   344A 0C                12047 	inc	r4
   344B BC 00 01          12048 	cjne	r4,#0x00,00188$
   344E 0D                12049 	inc	r5
   344F                   12050 00188$:
   344F 02s33rBF          12051 	ljmp	00145$
   3452                   12052 00148$:
                          12053 ;	main4.c:1368: pindata = pw[0]+(pw[1]*2)+(pw[2]*4)+(pw[3]*8)+(pw[4]*16)+(pw[5]*32)+(pw[6]*64)+(pw[7]*128);
                          12054 ;	genPointerGet
                          12055 ;	genFarPointerGet
   3452 90s00rB0          12056 	mov	dptr,#_expander_functions_pw_1_1
   3455 E0                12057 	movx	a,@dptr
   3456 FC                12058 	mov	r4,a
   3457 A3                12059 	inc	dptr
   3458 E0                12060 	movx	a,@dptr
   3459 FD                12061 	mov	r5,a
                          12062 ;	genPointerGet
                          12063 ;	genFarPointerGet
   345A 90s00rB2          12064 	mov	dptr,#(_expander_functions_pw_1_1 + 0x0002)
   345D E0                12065 	movx	a,@dptr
   345E FE                12066 	mov	r6,a
   345F A3                12067 	inc	dptr
   3460 E0                12068 	movx	a,@dptr
                          12069 ;	genLeftShift
                          12070 ;	genLeftShiftLiteral
                          12071 ;	genlshTwo
   3461 FF                12072 	mov	r7,a
                          12073 ;	Peephole 105	removed redundant mov
   3462 CE                12074 	xch	a,r6
   3463 25 E0             12075 	add	a,acc
   3465 CE                12076 	xch	a,r6
   3466 33                12077 	rlc	a
   3467 FF                12078 	mov	r7,a
                          12079 ;	genPlus
                          12080 ;	Peephole 236.g	used r6 instead of ar6
   3468 EE                12081 	mov	a,r6
                          12082 ;	Peephole 236.a	used r4 instead of ar4
   3469 2C                12083 	add	a,r4
   346A FC                12084 	mov	r4,a
                          12085 ;	Peephole 236.g	used r7 instead of ar7
   346B EF                12086 	mov	a,r7
                          12087 ;	Peephole 236.b	used r5 instead of ar5
   346C 3D                12088 	addc	a,r5
   346D FD                12089 	mov	r5,a
                          12090 ;	genPointerGet
                          12091 ;	genFarPointerGet
   346E 90s00rB4          12092 	mov	dptr,#(_expander_functions_pw_1_1 + 0x0004)
   3471 E0                12093 	movx	a,@dptr
   3472 FE                12094 	mov	r6,a
   3473 A3                12095 	inc	dptr
   3474 E0                12096 	movx	a,@dptr
                          12097 ;	genLeftShift
                          12098 ;	genLeftShiftLiteral
                          12099 ;	genlshTwo
   3475 FF                12100 	mov	r7,a
                          12101 ;	Peephole 105	removed redundant mov
   3476 CE                12102 	xch	a,r6
   3477 25 E0             12103 	add	a,acc
   3479 CE                12104 	xch	a,r6
   347A 33                12105 	rlc	a
   347B CE                12106 	xch	a,r6
   347C 25 E0             12107 	add	a,acc
   347E CE                12108 	xch	a,r6
   347F 33                12109 	rlc	a
   3480 FF                12110 	mov	r7,a
                          12111 ;	genPlus
                          12112 ;	Peephole 236.g	used r6 instead of ar6
   3481 EE                12113 	mov	a,r6
                          12114 ;	Peephole 236.a	used r4 instead of ar4
   3482 2C                12115 	add	a,r4
   3483 FC                12116 	mov	r4,a
                          12117 ;	Peephole 236.g	used r7 instead of ar7
   3484 EF                12118 	mov	a,r7
                          12119 ;	Peephole 236.b	used r5 instead of ar5
   3485 3D                12120 	addc	a,r5
   3486 FD                12121 	mov	r5,a
                          12122 ;	genPointerGet
                          12123 ;	genFarPointerGet
   3487 90s00rB6          12124 	mov	dptr,#(_expander_functions_pw_1_1 + 0x0006)
   348A E0                12125 	movx	a,@dptr
   348B FE                12126 	mov	r6,a
   348C A3                12127 	inc	dptr
   348D E0                12128 	movx	a,@dptr
                          12129 ;	genLeftShift
                          12130 ;	genLeftShiftLiteral
                          12131 ;	genlshTwo
   348E FF                12132 	mov	r7,a
                          12133 ;	Peephole 105	removed redundant mov
   348F C4                12134 	swap	a
   3490 03                12135 	rr	a
   3491 54 F8             12136 	anl	a,#0xf8
   3493 CE                12137 	xch	a,r6
   3494 C4                12138 	swap	a
   3495 03                12139 	rr	a
   3496 CE                12140 	xch	a,r6
   3497 6E                12141 	xrl	a,r6
   3498 CE                12142 	xch	a,r6
   3499 54 F8             12143 	anl	a,#0xf8
   349B CE                12144 	xch	a,r6
   349C 6E                12145 	xrl	a,r6
   349D FF                12146 	mov	r7,a
                          12147 ;	genPlus
                          12148 ;	Peephole 236.g	used r6 instead of ar6
   349E EE                12149 	mov	a,r6
                          12150 ;	Peephole 236.a	used r4 instead of ar4
   349F 2C                12151 	add	a,r4
   34A0 FC                12152 	mov	r4,a
                          12153 ;	Peephole 236.g	used r7 instead of ar7
   34A1 EF                12154 	mov	a,r7
                          12155 ;	Peephole 236.b	used r5 instead of ar5
   34A2 3D                12156 	addc	a,r5
   34A3 FD                12157 	mov	r5,a
                          12158 ;	genPointerGet
                          12159 ;	genFarPointerGet
   34A4 90s00rB8          12160 	mov	dptr,#(_expander_functions_pw_1_1 + 0x0008)
   34A7 E0                12161 	movx	a,@dptr
   34A8 FE                12162 	mov	r6,a
   34A9 A3                12163 	inc	dptr
   34AA E0                12164 	movx	a,@dptr
                          12165 ;	genLeftShift
                          12166 ;	genLeftShiftLiteral
                          12167 ;	genlshTwo
   34AB FF                12168 	mov	r7,a
                          12169 ;	Peephole 105	removed redundant mov
   34AC C4                12170 	swap	a
   34AD 54 F0             12171 	anl	a,#0xf0
   34AF CE                12172 	xch	a,r6
   34B0 C4                12173 	swap	a
   34B1 CE                12174 	xch	a,r6
   34B2 6E                12175 	xrl	a,r6
   34B3 CE                12176 	xch	a,r6
   34B4 54 F0             12177 	anl	a,#0xf0
   34B6 CE                12178 	xch	a,r6
   34B7 6E                12179 	xrl	a,r6
   34B8 FF                12180 	mov	r7,a
                          12181 ;	genPlus
                          12182 ;	Peephole 236.g	used r6 instead of ar6
   34B9 EE                12183 	mov	a,r6
                          12184 ;	Peephole 236.a	used r4 instead of ar4
   34BA 2C                12185 	add	a,r4
   34BB FC                12186 	mov	r4,a
                          12187 ;	Peephole 236.g	used r7 instead of ar7
   34BC EF                12188 	mov	a,r7
                          12189 ;	Peephole 236.b	used r5 instead of ar5
   34BD 3D                12190 	addc	a,r5
   34BE FD                12191 	mov	r5,a
                          12192 ;	genPointerGet
                          12193 ;	genFarPointerGet
   34BF 90s00rBA          12194 	mov	dptr,#(_expander_functions_pw_1_1 + 0x000a)
   34C2 E0                12195 	movx	a,@dptr
   34C3 FE                12196 	mov	r6,a
   34C4 A3                12197 	inc	dptr
   34C5 E0                12198 	movx	a,@dptr
                          12199 ;	genLeftShift
                          12200 ;	genLeftShiftLiteral
                          12201 ;	genlshTwo
   34C6 FF                12202 	mov	r7,a
                          12203 ;	Peephole 105	removed redundant mov
   34C7 C4                12204 	swap	a
   34C8 23                12205 	rl	a
   34C9 54 E0             12206 	anl	a,#0xe0
   34CB CE                12207 	xch	a,r6
   34CC C4                12208 	swap	a
   34CD 23                12209 	rl	a
   34CE CE                12210 	xch	a,r6
   34CF 6E                12211 	xrl	a,r6
   34D0 CE                12212 	xch	a,r6
   34D1 54 E0             12213 	anl	a,#0xe0
   34D3 CE                12214 	xch	a,r6
   34D4 6E                12215 	xrl	a,r6
   34D5 FF                12216 	mov	r7,a
                          12217 ;	genPlus
                          12218 ;	Peephole 236.g	used r6 instead of ar6
   34D6 EE                12219 	mov	a,r6
                          12220 ;	Peephole 236.a	used r4 instead of ar4
   34D7 2C                12221 	add	a,r4
   34D8 FC                12222 	mov	r4,a
                          12223 ;	Peephole 236.g	used r7 instead of ar7
   34D9 EF                12224 	mov	a,r7
                          12225 ;	Peephole 236.b	used r5 instead of ar5
   34DA 3D                12226 	addc	a,r5
   34DB FD                12227 	mov	r5,a
                          12228 ;	genPointerGet
                          12229 ;	genFarPointerGet
   34DC 90s00rBC          12230 	mov	dptr,#(_expander_functions_pw_1_1 + 0x000c)
   34DF E0                12231 	movx	a,@dptr
   34E0 FE                12232 	mov	r6,a
   34E1 A3                12233 	inc	dptr
   34E2 E0                12234 	movx	a,@dptr
                          12235 ;	genLeftShift
                          12236 ;	genLeftShiftLiteral
                          12237 ;	genlshTwo
   34E3 FF                12238 	mov	r7,a
                          12239 ;	Peephole 105	removed redundant mov
   34E4 54 03             12240 	anl	a,#0x03
   34E6 A2 E0             12241 	mov	c,acc.0
   34E8 CE                12242 	xch	a,r6
   34E9 13                12243 	rrc	a
   34EA CE                12244 	xch	a,r6
   34EB 13                12245 	rrc	a
   34EC A2 E0             12246 	mov	c,acc.0
   34EE CE                12247 	xch	a,r6
   34EF 13                12248 	rrc	a
   34F0 CE                12249 	xch	a,r6
   34F1 13                12250 	rrc	a
   34F2 CE                12251 	xch	a,r6
   34F3 FF                12252 	mov	r7,a
                          12253 ;	genPlus
                          12254 ;	Peephole 236.g	used r6 instead of ar6
   34F4 EE                12255 	mov	a,r6
                          12256 ;	Peephole 236.a	used r4 instead of ar4
   34F5 2C                12257 	add	a,r4
   34F6 FC                12258 	mov	r4,a
                          12259 ;	Peephole 236.g	used r7 instead of ar7
   34F7 EF                12260 	mov	a,r7
                          12261 ;	Peephole 236.b	used r5 instead of ar5
   34F8 3D                12262 	addc	a,r5
   34F9 FD                12263 	mov	r5,a
                          12264 ;	genPointerGet
                          12265 ;	genFarPointerGet
   34FA 90s00rBE          12266 	mov	dptr,#(_expander_functions_pw_1_1 + 0x000e)
   34FD E0                12267 	movx	a,@dptr
   34FE FE                12268 	mov	r6,a
   34FF A3                12269 	inc	dptr
   3500 E0                12270 	movx	a,@dptr
                          12271 ;	genLeftShift
                          12272 ;	genLeftShiftLiteral
                          12273 ;	genlshTwo
   3501 FF                12274 	mov	r7,a
                          12275 ;	Peephole 105	removed redundant mov
   3502 54 01             12276 	anl	a,#0x01
   3504 A2 E0             12277 	mov	c,acc.0
   3506 CE                12278 	xch	a,r6
   3507 13                12279 	rrc	a
   3508 CE                12280 	xch	a,r6
   3509 13                12281 	rrc	a
   350A CE                12282 	xch	a,r6
   350B FF                12283 	mov	r7,a
                          12284 ;	genPlus
   350C 90s00r00          12285 	mov	dptr,#_I2CExpanderWrite_PARM_2
                          12286 ;	Peephole 236.g	used r6 instead of ar6
   350F EE                12287 	mov	a,r6
                          12288 ;	Peephole 236.a	used r4 instead of ar4
   3510 2C                12289 	add	a,r4
   3511 F0                12290 	movx	@dptr,a
                          12291 ;	Peephole 236.g	used r7 instead of ar7
   3512 EF                12292 	mov	a,r7
                          12293 ;	Peephole 236.b	used r5 instead of ar5
   3513 3D                12294 	addc	a,r5
   3514 A3                12295 	inc	dptr
   3515 F0                12296 	movx	@dptr,a
                          12297 ;	main4.c:1369: I2CExpanderWrite(pinconfig,pindata);
                          12298 ;	genCall
   3516 8A 82             12299 	mov	dpl,r2
   3518 8B 83             12300 	mov	dph,r3
   351A 12s00r00          12301 	lcall	_I2CExpanderWrite
                          12302 ;	main4.c:1370: expander_functions();
                          12303 ;	genCall
                          12304 ;	main4.c:1372: }break;
                          12305 ;	Peephole 251.a	replaced ljmp to ret with ret
                          12306 ;	Peephole 253.a	replaced lcall/ret with ljmp
   351D 02s31r26          12307 	ljmp	_expander_functions
                          12308 ;	main4.c:1373: case '2':
   3520                   12309 00109$:
                          12310 ;	main4.c:1375: printf("\n\n\rThe status of the I/O port Pins are ");
                          12311 ;	genIpush
   3520 74r8B             12312 	mov	a,#__str_124
   3522 C0 E0             12313 	push	acc
   3524 74s13             12314 	mov	a,#(__str_124 >> 8)
   3526 C0 E0             12315 	push	acc
   3528 74 80             12316 	mov	a,#0x80
   352A C0 E0             12317 	push	acc
                          12318 ;	genCall
   352C 12s00r00          12319 	lcall	_printf
   352F 15 81             12320 	dec	sp
   3531 15 81             12321 	dec	sp
   3533 15 81             12322 	dec	sp
                          12323 ;	main4.c:1376: pinconfig= I2CExpanderRead();
                          12324 ;	genCall
   3535 12s00r00          12325 	lcall	_I2CExpanderRead
   3538 AA 82             12326 	mov	r2,dpl
   353A AB 83             12327 	mov	r3,dph
                          12328 ;	main4.c:1377: if(pinconfig &0x01) p[0] =1;
                          12329 ;	genAnd
   353C EA                12330 	mov	a,r2
                          12331 ;	genIfxJump
                          12332 ;	Peephole 108.d	removed ljmp by inverse jump logic
   353D 30 E0 0B          12333 	jnb	acc.0,00111$
                          12334 ;	Peephole 300	removed redundant label 00189$
                          12335 ;	genPointerSet
                          12336 ;     genFarPointerSet
   3540 90s00rA0          12337 	mov	dptr,#_expander_functions_p_1_1
   3543 74 01             12338 	mov	a,#0x01
   3545 F0                12339 	movx	@dptr,a
   3546 A3                12340 	inc	dptr
                          12341 ;	Peephole 181	changed mov to clr
   3547 E4                12342 	clr	a
   3548 F0                12343 	movx	@dptr,a
                          12344 ;	Peephole 112.b	changed ljmp to sjmp
   3549 80 07             12345 	sjmp	00112$
   354B                   12346 00111$:
                          12347 ;	main4.c:1378: else p[0] = 0;
                          12348 ;	genPointerSet
                          12349 ;     genFarPointerSet
   354B 90s00rA0          12350 	mov	dptr,#_expander_functions_p_1_1
                          12351 ;	Peephole 181	changed mov to clr
   354E E4                12352 	clr	a
   354F F0                12353 	movx	@dptr,a
   3550 A3                12354 	inc	dptr
                          12355 ;	Peephole 101	removed redundant mov
   3551 F0                12356 	movx	@dptr,a
   3552                   12357 00112$:
                          12358 ;	main4.c:1379: if(pinconfig &0x02) p[1] =1;
                          12359 ;	genAnd
   3552 EA                12360 	mov	a,r2
                          12361 ;	genIfxJump
                          12362 ;	Peephole 108.d	removed ljmp by inverse jump logic
   3553 30 E1 0B          12363 	jnb	acc.1,00114$
                          12364 ;	Peephole 300	removed redundant label 00190$
                          12365 ;	genPointerSet
                          12366 ;     genFarPointerSet
   3556 90s00rA2          12367 	mov	dptr,#(_expander_functions_p_1_1 + 0x0002)
   3559 74 01             12368 	mov	a,#0x01
   355B F0                12369 	movx	@dptr,a
   355C A3                12370 	inc	dptr
                          12371 ;	Peephole 181	changed mov to clr
   355D E4                12372 	clr	a
   355E F0                12373 	movx	@dptr,a
                          12374 ;	Peephole 112.b	changed ljmp to sjmp
   355F 80 07             12375 	sjmp	00115$
   3561                   12376 00114$:
                          12377 ;	main4.c:1380: else p[1] = 0;
                          12378 ;	genPointerSet
                          12379 ;     genFarPointerSet
   3561 90s00rA2          12380 	mov	dptr,#(_expander_functions_p_1_1 + 0x0002)
                          12381 ;	Peephole 181	changed mov to clr
   3564 E4                12382 	clr	a
   3565 F0                12383 	movx	@dptr,a
   3566 A3                12384 	inc	dptr
                          12385 ;	Peephole 101	removed redundant mov
   3567 F0                12386 	movx	@dptr,a
   3568                   12387 00115$:
                          12388 ;	main4.c:1381: if(pinconfig &0x06) p[2] =1;
                          12389 ;	genAnd
   3568 EA                12390 	mov	a,r2
   3569 54 06             12391 	anl	a,#0x06
                          12392 ;	Peephole 108.c	removed ljmp by inverse jump logic
   356B 60 0B             12393 	jz	00117$
                          12394 ;	Peephole 300	removed redundant label 00191$
                          12395 ;	genPointerSet
                          12396 ;     genFarPointerSet
   356D 90s00rA4          12397 	mov	dptr,#(_expander_functions_p_1_1 + 0x0004)
   3570 74 01             12398 	mov	a,#0x01
   3572 F0                12399 	movx	@dptr,a
   3573 A3                12400 	inc	dptr
                          12401 ;	Peephole 181	changed mov to clr
   3574 E4                12402 	clr	a
   3575 F0                12403 	movx	@dptr,a
                          12404 ;	Peephole 112.b	changed ljmp to sjmp
   3576 80 07             12405 	sjmp	00118$
   3578                   12406 00117$:
                          12407 ;	main4.c:1382: else p[2] = 0;
                          12408 ;	genPointerSet
                          12409 ;     genFarPointerSet
   3578 90s00rA4          12410 	mov	dptr,#(_expander_functions_p_1_1 + 0x0004)
                          12411 ;	Peephole 181	changed mov to clr
   357B E4                12412 	clr	a
   357C F0                12413 	movx	@dptr,a
   357D A3                12414 	inc	dptr
                          12415 ;	Peephole 101	removed redundant mov
   357E F0                12416 	movx	@dptr,a
   357F                   12417 00118$:
                          12418 ;	main4.c:1383: if(pinconfig &0x08) p[3] =1;
                          12419 ;	genAnd
   357F EA                12420 	mov	a,r2
                          12421 ;	genIfxJump
                          12422 ;	Peephole 108.d	removed ljmp by inverse jump logic
   3580 30 E3 0B          12423 	jnb	acc.3,00120$
                          12424 ;	Peephole 300	removed redundant label 00192$
                          12425 ;	genPointerSet
                          12426 ;     genFarPointerSet
   3583 90s00rA6          12427 	mov	dptr,#(_expander_functions_p_1_1 + 0x0006)
   3586 74 01             12428 	mov	a,#0x01
   3588 F0                12429 	movx	@dptr,a
   3589 A3                12430 	inc	dptr
                          12431 ;	Peephole 181	changed mov to clr
   358A E4                12432 	clr	a
   358B F0                12433 	movx	@dptr,a
                          12434 ;	Peephole 112.b	changed ljmp to sjmp
   358C 80 07             12435 	sjmp	00121$
   358E                   12436 00120$:
                          12437 ;	main4.c:1384: else p[3]= 0;
                          12438 ;	genPointerSet
                          12439 ;     genFarPointerSet
   358E 90s00rA6          12440 	mov	dptr,#(_expander_functions_p_1_1 + 0x0006)
                          12441 ;	Peephole 181	changed mov to clr
   3591 E4                12442 	clr	a
   3592 F0                12443 	movx	@dptr,a
   3593 A3                12444 	inc	dptr
                          12445 ;	Peephole 101	removed redundant mov
   3594 F0                12446 	movx	@dptr,a
   3595                   12447 00121$:
                          12448 ;	main4.c:1385: if(pinconfig &0x10) p[4]=1;
                          12449 ;	genAnd
   3595 EA                12450 	mov	a,r2
                          12451 ;	genIfxJump
                          12452 ;	Peephole 108.d	removed ljmp by inverse jump logic
   3596 30 E4 0B          12453 	jnb	acc.4,00123$
                          12454 ;	Peephole 300	removed redundant label 00193$
                          12455 ;	genPointerSet
                          12456 ;     genFarPointerSet
   3599 90s00rA8          12457 	mov	dptr,#(_expander_functions_p_1_1 + 0x0008)
   359C 74 01             12458 	mov	a,#0x01
   359E F0                12459 	movx	@dptr,a
   359F A3                12460 	inc	dptr
                          12461 ;	Peephole 181	changed mov to clr
   35A0 E4                12462 	clr	a
   35A1 F0                12463 	movx	@dptr,a
                          12464 ;	Peephole 112.b	changed ljmp to sjmp
   35A2 80 07             12465 	sjmp	00124$
   35A4                   12466 00123$:
                          12467 ;	main4.c:1386: else p[4] = 0;
                          12468 ;	genPointerSet
                          12469 ;     genFarPointerSet
   35A4 90s00rA8          12470 	mov	dptr,#(_expander_functions_p_1_1 + 0x0008)
                          12471 ;	Peephole 181	changed mov to clr
   35A7 E4                12472 	clr	a
   35A8 F0                12473 	movx	@dptr,a
   35A9 A3                12474 	inc	dptr
                          12475 ;	Peephole 101	removed redundant mov
   35AA F0                12476 	movx	@dptr,a
   35AB                   12477 00124$:
                          12478 ;	main4.c:1387: if(pinconfig &0x20) p[5] =1;
                          12479 ;	genAnd
   35AB EA                12480 	mov	a,r2
                          12481 ;	genIfxJump
                          12482 ;	Peephole 108.d	removed ljmp by inverse jump logic
   35AC 30 E5 0B          12483 	jnb	acc.5,00126$
                          12484 ;	Peephole 300	removed redundant label 00194$
                          12485 ;	genPointerSet
                          12486 ;     genFarPointerSet
   35AF 90s00rAA          12487 	mov	dptr,#(_expander_functions_p_1_1 + 0x000a)
   35B2 74 01             12488 	mov	a,#0x01
   35B4 F0                12489 	movx	@dptr,a
   35B5 A3                12490 	inc	dptr
                          12491 ;	Peephole 181	changed mov to clr
   35B6 E4                12492 	clr	a
   35B7 F0                12493 	movx	@dptr,a
                          12494 ;	Peephole 112.b	changed ljmp to sjmp
   35B8 80 07             12495 	sjmp	00127$
   35BA                   12496 00126$:
                          12497 ;	main4.c:1388: else p[5] = 0;
                          12498 ;	genPointerSet
                          12499 ;     genFarPointerSet
   35BA 90s00rAA          12500 	mov	dptr,#(_expander_functions_p_1_1 + 0x000a)
                          12501 ;	Peephole 181	changed mov to clr
   35BD E4                12502 	clr	a
   35BE F0                12503 	movx	@dptr,a
   35BF A3                12504 	inc	dptr
                          12505 ;	Peephole 101	removed redundant mov
   35C0 F0                12506 	movx	@dptr,a
   35C1                   12507 00127$:
                          12508 ;	main4.c:1389: if(pinconfig &0x40) p[6] =1;
                          12509 ;	genAnd
   35C1 EA                12510 	mov	a,r2
                          12511 ;	genIfxJump
                          12512 ;	Peephole 108.d	removed ljmp by inverse jump logic
   35C2 30 E6 0B          12513 	jnb	acc.6,00129$
                          12514 ;	Peephole 300	removed redundant label 00195$
                          12515 ;	genPointerSet
                          12516 ;     genFarPointerSet
   35C5 90s00rAC          12517 	mov	dptr,#(_expander_functions_p_1_1 + 0x000c)
   35C8 74 01             12518 	mov	a,#0x01
   35CA F0                12519 	movx	@dptr,a
   35CB A3                12520 	inc	dptr
                          12521 ;	Peephole 181	changed mov to clr
   35CC E4                12522 	clr	a
   35CD F0                12523 	movx	@dptr,a
                          12524 ;	Peephole 112.b	changed ljmp to sjmp
   35CE 80 07             12525 	sjmp	00130$
   35D0                   12526 00129$:
                          12527 ;	main4.c:1390: else p[6] = 0;
                          12528 ;	genPointerSet
                          12529 ;     genFarPointerSet
   35D0 90s00rAC          12530 	mov	dptr,#(_expander_functions_p_1_1 + 0x000c)
                          12531 ;	Peephole 181	changed mov to clr
   35D3 E4                12532 	clr	a
   35D4 F0                12533 	movx	@dptr,a
   35D5 A3                12534 	inc	dptr
                          12535 ;	Peephole 101	removed redundant mov
   35D6 F0                12536 	movx	@dptr,a
   35D7                   12537 00130$:
                          12538 ;	main4.c:1391: if(pinconfig &0x80) p[7] =1;
                          12539 ;	genAnd
   35D7 EA                12540 	mov	a,r2
                          12541 ;	genIfxJump
                          12542 ;	Peephole 108.d	removed ljmp by inverse jump logic
   35D8 30 E7 0B          12543 	jnb	acc.7,00132$
                          12544 ;	Peephole 300	removed redundant label 00196$
                          12545 ;	genPointerSet
                          12546 ;     genFarPointerSet
   35DB 90s00rAE          12547 	mov	dptr,#(_expander_functions_p_1_1 + 0x000e)
   35DE 74 01             12548 	mov	a,#0x01
   35E0 F0                12549 	movx	@dptr,a
   35E1 A3                12550 	inc	dptr
                          12551 ;	Peephole 181	changed mov to clr
   35E2 E4                12552 	clr	a
   35E3 F0                12553 	movx	@dptr,a
                          12554 ;	Peephole 112.b	changed ljmp to sjmp
   35E4 80 07             12555 	sjmp	00133$
   35E6                   12556 00132$:
                          12557 ;	main4.c:1392: else p[7] = 0;
                          12558 ;	genPointerSet
                          12559 ;     genFarPointerSet
   35E6 90s00rAE          12560 	mov	dptr,#(_expander_functions_p_1_1 + 0x000e)
                          12561 ;	Peephole 181	changed mov to clr
   35E9 E4                12562 	clr	a
   35EA F0                12563 	movx	@dptr,a
   35EB A3                12564 	inc	dptr
                          12565 ;	Peephole 101	removed redundant mov
   35EC F0                12566 	movx	@dptr,a
   35ED                   12567 00133$:
                          12568 ;	main4.c:1393: printf("\n\r----------------------------------------");
                          12569 ;	genIpush
   35ED 74rB3             12570 	mov	a,#__str_125
   35EF C0 E0             12571 	push	acc
   35F1 74s13             12572 	mov	a,#(__str_125 >> 8)
   35F3 C0 E0             12573 	push	acc
   35F5 74 80             12574 	mov	a,#0x80
   35F7 C0 E0             12575 	push	acc
                          12576 ;	genCall
   35F9 12s00r00          12577 	lcall	_printf
   35FC 15 81             12578 	dec	sp
   35FE 15 81             12579 	dec	sp
   3600 15 81             12580 	dec	sp
                          12581 ;	main4.c:1394: printf("\n\r| P0 | P1 | P2 | P3 | P4 | P5 | P6 | P7|");
                          12582 ;	genIpush
   3602 74rDE             12583 	mov	a,#__str_126
   3604 C0 E0             12584 	push	acc
   3606 74s13             12585 	mov	a,#(__str_126 >> 8)
   3608 C0 E0             12586 	push	acc
   360A 74 80             12587 	mov	a,#0x80
   360C C0 E0             12588 	push	acc
                          12589 ;	genCall
   360E 12s00r00          12590 	lcall	_printf
   3611 15 81             12591 	dec	sp
   3613 15 81             12592 	dec	sp
   3615 15 81             12593 	dec	sp
                          12594 ;	main4.c:1395: printf("\n\r=========================================");
                          12595 ;	genIpush
   3617 74r09             12596 	mov	a,#__str_127
   3619 C0 E0             12597 	push	acc
   361B 74s14             12598 	mov	a,#(__str_127 >> 8)
   361D C0 E0             12599 	push	acc
   361F 74 80             12600 	mov	a,#0x80
   3621 C0 E0             12601 	push	acc
                          12602 ;	genCall
   3623 12s00r00          12603 	lcall	_printf
   3626 15 81             12604 	dec	sp
   3628 15 81             12605 	dec	sp
   362A 15 81             12606 	dec	sp
                          12607 ;	main4.c:1396: printf("\n\r| %2d | %2d | %2d | %2d | %2d | %2d | %2d | %2d |",p[0],p[1],p[2],p[3],p[4],p[5],p[6],p[7]);
                          12608 ;	genPointerGet
                          12609 ;	genFarPointerGet
   362C 90s00rAE          12610 	mov	dptr,#(_expander_functions_p_1_1 + 0x000e)
   362F E0                12611 	movx	a,@dptr
   3630 FA                12612 	mov	r2,a
   3631 A3                12613 	inc	dptr
   3632 E0                12614 	movx	a,@dptr
   3633 FB                12615 	mov	r3,a
                          12616 ;	genPointerGet
                          12617 ;	genFarPointerGet
   3634 90s00rAC          12618 	mov	dptr,#(_expander_functions_p_1_1 + 0x000c)
   3637 E0                12619 	movx	a,@dptr
   3638 FC                12620 	mov	r4,a
   3639 A3                12621 	inc	dptr
   363A E0                12622 	movx	a,@dptr
   363B FD                12623 	mov	r5,a
                          12624 ;	genPointerGet
                          12625 ;	genFarPointerGet
   363C 90s00rAA          12626 	mov	dptr,#(_expander_functions_p_1_1 + 0x000a)
   363F E0                12627 	movx	a,@dptr
   3640 FE                12628 	mov	r6,a
   3641 A3                12629 	inc	dptr
   3642 E0                12630 	movx	a,@dptr
   3643 FF                12631 	mov	r7,a
                          12632 ;	genPointerGet
                          12633 ;	genFarPointerGet
   3644 90s00rA8          12634 	mov	dptr,#(_expander_functions_p_1_1 + 0x0008)
   3647 E0                12635 	movx	a,@dptr
   3648 F5*06             12636 	mov	_expander_functions_sloc0_1_0,a
   364A A3                12637 	inc	dptr
   364B E0                12638 	movx	a,@dptr
   364C F5*07             12639 	mov	(_expander_functions_sloc0_1_0 + 1),a
                          12640 ;	genPointerGet
                          12641 ;	genFarPointerGet
   364E 90s00rA6          12642 	mov	dptr,#(_expander_functions_p_1_1 + 0x0006)
   3651 E0                12643 	movx	a,@dptr
   3652 F5*08             12644 	mov	_expander_functions_sloc1_1_0,a
   3654 A3                12645 	inc	dptr
   3655 E0                12646 	movx	a,@dptr
   3656 F5*09             12647 	mov	(_expander_functions_sloc1_1_0 + 1),a
                          12648 ;	genPointerGet
                          12649 ;	genFarPointerGet
   3658 90s00rA4          12650 	mov	dptr,#(_expander_functions_p_1_1 + 0x0004)
   365B E0                12651 	movx	a,@dptr
   365C F5*0A             12652 	mov	_expander_functions_sloc2_1_0,a
   365E A3                12653 	inc	dptr
   365F E0                12654 	movx	a,@dptr
   3660 F5*0B             12655 	mov	(_expander_functions_sloc2_1_0 + 1),a
                          12656 ;	genPointerGet
                          12657 ;	genFarPointerGet
   3662 90s00rA2          12658 	mov	dptr,#(_expander_functions_p_1_1 + 0x0002)
   3665 E0                12659 	movx	a,@dptr
   3666 F5*0C             12660 	mov	_expander_functions_sloc3_1_0,a
   3668 A3                12661 	inc	dptr
   3669 E0                12662 	movx	a,@dptr
   366A F5*0D             12663 	mov	(_expander_functions_sloc3_1_0 + 1),a
                          12664 ;	genPointerGet
                          12665 ;	genFarPointerGet
   366C 90s00rA0          12666 	mov	dptr,#_expander_functions_p_1_1
   366F E0                12667 	movx	a,@dptr
   3670 F8                12668 	mov	r0,a
   3671 A3                12669 	inc	dptr
   3672 E0                12670 	movx	a,@dptr
   3673 F9                12671 	mov	r1,a
                          12672 ;	genIpush
   3674 C0 02             12673 	push	ar2
   3676 C0 03             12674 	push	ar3
                          12675 ;	genIpush
   3678 C0 04             12676 	push	ar4
   367A C0 05             12677 	push	ar5
                          12678 ;	genIpush
   367C C0 06             12679 	push	ar6
   367E C0 07             12680 	push	ar7
                          12681 ;	genIpush
   3680 C0*06             12682 	push	_expander_functions_sloc0_1_0
   3682 C0*07             12683 	push	(_expander_functions_sloc0_1_0 + 1)
                          12684 ;	genIpush
   3684 C0*08             12685 	push	_expander_functions_sloc1_1_0
   3686 C0*09             12686 	push	(_expander_functions_sloc1_1_0 + 1)
                          12687 ;	genIpush
   3688 C0*0A             12688 	push	_expander_functions_sloc2_1_0
   368A C0*0B             12689 	push	(_expander_functions_sloc2_1_0 + 1)
                          12690 ;	genIpush
   368C C0*0C             12691 	push	_expander_functions_sloc3_1_0
   368E C0*0D             12692 	push	(_expander_functions_sloc3_1_0 + 1)
                          12693 ;	genIpush
   3690 C0 00             12694 	push	ar0
   3692 C0 01             12695 	push	ar1
                          12696 ;	genIpush
   3694 74r35             12697 	mov	a,#__str_128
   3696 C0 E0             12698 	push	acc
   3698 74s14             12699 	mov	a,#(__str_128 >> 8)
   369A C0 E0             12700 	push	acc
   369C 74 80             12701 	mov	a,#0x80
   369E C0 E0             12702 	push	acc
                          12703 ;	genCall
   36A0 12s00r00          12704 	lcall	_printf
   36A3 E5 81             12705 	mov	a,sp
   36A5 24 ED             12706 	add	a,#0xed
   36A7 F5 81             12707 	mov	sp,a
                          12708 ;	main4.c:1397: printf("\n\r----------------------------------------");
                          12709 ;	genIpush
   36A9 74rB3             12710 	mov	a,#__str_125
   36AB C0 E0             12711 	push	acc
   36AD 74s13             12712 	mov	a,#(__str_125 >> 8)
   36AF C0 E0             12713 	push	acc
   36B1 74 80             12714 	mov	a,#0x80
   36B3 C0 E0             12715 	push	acc
                          12716 ;	genCall
   36B5 12s00r00          12717 	lcall	_printf
   36B8 15 81             12718 	dec	sp
   36BA 15 81             12719 	dec	sp
   36BC 15 81             12720 	dec	sp
                          12721 ;	main4.c:1399: printf("\n\n\rPress any key to Continue . . .");
                          12722 ;	genIpush
   36BE 74r69             12723 	mov	a,#__str_129
   36C0 C0 E0             12724 	push	acc
   36C2 74s14             12725 	mov	a,#(__str_129 >> 8)
   36C4 C0 E0             12726 	push	acc
   36C6 74 80             12727 	mov	a,#0x80
   36C8 C0 E0             12728 	push	acc
                          12729 ;	genCall
   36CA 12s00r00          12730 	lcall	_printf
   36CD 15 81             12731 	dec	sp
   36CF 15 81             12732 	dec	sp
   36D1 15 81             12733 	dec	sp
                          12734 ;	main4.c:1400: getchar();
                          12735 ;	genCall
   36D3 12s01r72          12736 	lcall	_getchar
                          12737 ;	main4.c:1401: expander_functions();
                          12738 ;	genCall
                          12739 ;	main4.c:1402: }break;
                          12740 ;	Peephole 251.a	replaced ljmp to ret with ret
                          12741 ;	Peephole 253.a	replaced lcall/ret with ljmp
   36D6 02s31r26          12742 	ljmp	_expander_functions
                          12743 ;	main4.c:1403: case '3':
   36D9                   12744 00134$:
                          12745 ;	main4.c:1405: printf("\n\rToggling pin P0");
                          12746 ;	genIpush
   36D9 74r8C             12747 	mov	a,#__str_130
   36DB C0 E0             12748 	push	acc
   36DD 74s14             12749 	mov	a,#(__str_130 >> 8)
   36DF C0 E0             12750 	push	acc
   36E1 74 80             12751 	mov	a,#0x80
   36E3 C0 E0             12752 	push	acc
                          12753 ;	genCall
   36E5 12s00r00          12754 	lcall	_printf
   36E8 15 81             12755 	dec	sp
   36EA 15 81             12756 	dec	sp
   36EC 15 81             12757 	dec	sp
                          12758 ;	main4.c:1406: pinconfig= I2CExpanderRead();
                          12759 ;	genCall
   36EE 12s00r00          12760 	lcall	_I2CExpanderRead
   36F1 E5 82             12761 	mov	a,dpl
   36F3 85 83 F0          12762 	mov	b,dph
                          12763 ;	main4.c:1407: if(pinconfig &0x01) p[0] =0;
                          12764 ;	genAnd
                          12765 ;	genIfxJump
                          12766 ;	Peephole 108.d	removed ljmp by inverse jump logic
   36F6 30 E0 09          12767 	jnb	acc.0,00136$
                          12768 ;	Peephole 300	removed redundant label 00197$
                          12769 ;	genPointerSet
                          12770 ;     genFarPointerSet
   36F9 90s00rA0          12771 	mov	dptr,#_expander_functions_p_1_1
                          12772 ;	Peephole 181	changed mov to clr
   36FC E4                12773 	clr	a
   36FD F0                12774 	movx	@dptr,a
   36FE A3                12775 	inc	dptr
                          12776 ;	Peephole 101	removed redundant mov
   36FF F0                12777 	movx	@dptr,a
                          12778 ;	Peephole 112.b	changed ljmp to sjmp
   3700 80 09             12779 	sjmp	00137$
   3702                   12780 00136$:
                          12781 ;	main4.c:1408: else p[0] = 1;
                          12782 ;	genPointerSet
                          12783 ;     genFarPointerSet
   3702 90s00rA0          12784 	mov	dptr,#_expander_functions_p_1_1
   3705 74 01             12785 	mov	a,#0x01
   3707 F0                12786 	movx	@dptr,a
   3708 A3                12787 	inc	dptr
                          12788 ;	Peephole 181	changed mov to clr
   3709 E4                12789 	clr	a
   370A F0                12790 	movx	@dptr,a
   370B                   12791 00137$:
                          12792 ;	main4.c:1409: pinconfig = p[0]+(p[1]*2)+(p[2]*4)+(p[3]*8)+(p[4]*16)+(p[5]*32)+(p[6]*64)+(p[7]*128);
                          12793 ;	genPointerGet
                          12794 ;	genFarPointerGet
   370B 90s00rA0          12795 	mov	dptr,#_expander_functions_p_1_1
   370E E0                12796 	movx	a,@dptr
   370F FA                12797 	mov	r2,a
   3710 A3                12798 	inc	dptr
   3711 E0                12799 	movx	a,@dptr
   3712 FB                12800 	mov	r3,a
                          12801 ;	genPointerGet
                          12802 ;	genFarPointerGet
   3713 90s00rA2          12803 	mov	dptr,#(_expander_functions_p_1_1 + 0x0002)
   3716 E0                12804 	movx	a,@dptr
   3717 FC                12805 	mov	r4,a
   3718 A3                12806 	inc	dptr
   3719 E0                12807 	movx	a,@dptr
                          12808 ;	genLeftShift
                          12809 ;	genLeftShiftLiteral
                          12810 ;	genlshTwo
   371A FD                12811 	mov	r5,a
                          12812 ;	Peephole 105	removed redundant mov
   371B CC                12813 	xch	a,r4
   371C 25 E0             12814 	add	a,acc
   371E CC                12815 	xch	a,r4
   371F 33                12816 	rlc	a
   3720 FD                12817 	mov	r5,a
                          12818 ;	genPlus
                          12819 ;	Peephole 236.g	used r4 instead of ar4
   3721 EC                12820 	mov	a,r4
                          12821 ;	Peephole 236.a	used r2 instead of ar2
   3722 2A                12822 	add	a,r2
   3723 FA                12823 	mov	r2,a
                          12824 ;	Peephole 236.g	used r5 instead of ar5
   3724 ED                12825 	mov	a,r5
                          12826 ;	Peephole 236.b	used r3 instead of ar3
   3725 3B                12827 	addc	a,r3
   3726 FB                12828 	mov	r3,a
                          12829 ;	genPointerGet
                          12830 ;	genFarPointerGet
   3727 90s00rA4          12831 	mov	dptr,#(_expander_functions_p_1_1 + 0x0004)
   372A E0                12832 	movx	a,@dptr
   372B FC                12833 	mov	r4,a
   372C A3                12834 	inc	dptr
   372D E0                12835 	movx	a,@dptr
                          12836 ;	genLeftShift
                          12837 ;	genLeftShiftLiteral
                          12838 ;	genlshTwo
   372E FD                12839 	mov	r5,a
                          12840 ;	Peephole 105	removed redundant mov
   372F CC                12841 	xch	a,r4
   3730 25 E0             12842 	add	a,acc
   3732 CC                12843 	xch	a,r4
   3733 33                12844 	rlc	a
   3734 CC                12845 	xch	a,r4
   3735 25 E0             12846 	add	a,acc
   3737 CC                12847 	xch	a,r4
   3738 33                12848 	rlc	a
   3739 FD                12849 	mov	r5,a
                          12850 ;	genPlus
                          12851 ;	Peephole 236.g	used r4 instead of ar4
   373A EC                12852 	mov	a,r4
                          12853 ;	Peephole 236.a	used r2 instead of ar2
   373B 2A                12854 	add	a,r2
   373C FA                12855 	mov	r2,a
                          12856 ;	Peephole 236.g	used r5 instead of ar5
   373D ED                12857 	mov	a,r5
                          12858 ;	Peephole 236.b	used r3 instead of ar3
   373E 3B                12859 	addc	a,r3
   373F FB                12860 	mov	r3,a
                          12861 ;	genPointerGet
                          12862 ;	genFarPointerGet
   3740 90s00rA6          12863 	mov	dptr,#(_expander_functions_p_1_1 + 0x0006)
   3743 E0                12864 	movx	a,@dptr
   3744 FC                12865 	mov	r4,a
   3745 A3                12866 	inc	dptr
   3746 E0                12867 	movx	a,@dptr
                          12868 ;	genLeftShift
                          12869 ;	genLeftShiftLiteral
                          12870 ;	genlshTwo
   3747 FD                12871 	mov	r5,a
                          12872 ;	Peephole 105	removed redundant mov
   3748 C4                12873 	swap	a
   3749 03                12874 	rr	a
   374A 54 F8             12875 	anl	a,#0xf8
   374C CC                12876 	xch	a,r4
   374D C4                12877 	swap	a
   374E 03                12878 	rr	a
   374F CC                12879 	xch	a,r4
   3750 6C                12880 	xrl	a,r4
   3751 CC                12881 	xch	a,r4
   3752 54 F8             12882 	anl	a,#0xf8
   3754 CC                12883 	xch	a,r4
   3755 6C                12884 	xrl	a,r4
   3756 FD                12885 	mov	r5,a
                          12886 ;	genPlus
                          12887 ;	Peephole 236.g	used r4 instead of ar4
   3757 EC                12888 	mov	a,r4
                          12889 ;	Peephole 236.a	used r2 instead of ar2
   3758 2A                12890 	add	a,r2
   3759 FA                12891 	mov	r2,a
                          12892 ;	Peephole 236.g	used r5 instead of ar5
   375A ED                12893 	mov	a,r5
                          12894 ;	Peephole 236.b	used r3 instead of ar3
   375B 3B                12895 	addc	a,r3
   375C FB                12896 	mov	r3,a
                          12897 ;	genPointerGet
                          12898 ;	genFarPointerGet
   375D 90s00rA8          12899 	mov	dptr,#(_expander_functions_p_1_1 + 0x0008)
   3760 E0                12900 	movx	a,@dptr
   3761 FC                12901 	mov	r4,a
   3762 A3                12902 	inc	dptr
   3763 E0                12903 	movx	a,@dptr
                          12904 ;	genLeftShift
                          12905 ;	genLeftShiftLiteral
                          12906 ;	genlshTwo
   3764 FD                12907 	mov	r5,a
                          12908 ;	Peephole 105	removed redundant mov
   3765 C4                12909 	swap	a
   3766 54 F0             12910 	anl	a,#0xf0
   3768 CC                12911 	xch	a,r4
   3769 C4                12912 	swap	a
   376A CC                12913 	xch	a,r4
   376B 6C                12914 	xrl	a,r4
   376C CC                12915 	xch	a,r4
   376D 54 F0             12916 	anl	a,#0xf0
   376F CC                12917 	xch	a,r4
   3770 6C                12918 	xrl	a,r4
   3771 FD                12919 	mov	r5,a
                          12920 ;	genPlus
                          12921 ;	Peephole 236.g	used r4 instead of ar4
   3772 EC                12922 	mov	a,r4
                          12923 ;	Peephole 236.a	used r2 instead of ar2
   3773 2A                12924 	add	a,r2
   3774 FA                12925 	mov	r2,a
                          12926 ;	Peephole 236.g	used r5 instead of ar5
   3775 ED                12927 	mov	a,r5
                          12928 ;	Peephole 236.b	used r3 instead of ar3
   3776 3B                12929 	addc	a,r3
   3777 FB                12930 	mov	r3,a
                          12931 ;	genPointerGet
                          12932 ;	genFarPointerGet
   3778 90s00rAA          12933 	mov	dptr,#(_expander_functions_p_1_1 + 0x000a)
   377B E0                12934 	movx	a,@dptr
   377C FC                12935 	mov	r4,a
   377D A3                12936 	inc	dptr
   377E E0                12937 	movx	a,@dptr
                          12938 ;	genLeftShift
                          12939 ;	genLeftShiftLiteral
                          12940 ;	genlshTwo
   377F FD                12941 	mov	r5,a
                          12942 ;	Peephole 105	removed redundant mov
   3780 C4                12943 	swap	a
   3781 23                12944 	rl	a
   3782 54 E0             12945 	anl	a,#0xe0
   3784 CC                12946 	xch	a,r4
   3785 C4                12947 	swap	a
   3786 23                12948 	rl	a
   3787 CC                12949 	xch	a,r4
   3788 6C                12950 	xrl	a,r4
   3789 CC                12951 	xch	a,r4
   378A 54 E0             12952 	anl	a,#0xe0
   378C CC                12953 	xch	a,r4
   378D 6C                12954 	xrl	a,r4
   378E FD                12955 	mov	r5,a
                          12956 ;	genPlus
                          12957 ;	Peephole 236.g	used r4 instead of ar4
   378F EC                12958 	mov	a,r4
                          12959 ;	Peephole 236.a	used r2 instead of ar2
   3790 2A                12960 	add	a,r2
   3791 FA                12961 	mov	r2,a
                          12962 ;	Peephole 236.g	used r5 instead of ar5
   3792 ED                12963 	mov	a,r5
                          12964 ;	Peephole 236.b	used r3 instead of ar3
   3793 3B                12965 	addc	a,r3
   3794 FB                12966 	mov	r3,a
                          12967 ;	genPointerGet
                          12968 ;	genFarPointerGet
   3795 90s00rAC          12969 	mov	dptr,#(_expander_functions_p_1_1 + 0x000c)
   3798 E0                12970 	movx	a,@dptr
   3799 FC                12971 	mov	r4,a
   379A A3                12972 	inc	dptr
   379B E0                12973 	movx	a,@dptr
                          12974 ;	genLeftShift
                          12975 ;	genLeftShiftLiteral
                          12976 ;	genlshTwo
   379C FD                12977 	mov	r5,a
                          12978 ;	Peephole 105	removed redundant mov
   379D 54 03             12979 	anl	a,#0x03
   379F A2 E0             12980 	mov	c,acc.0
   37A1 CC                12981 	xch	a,r4
   37A2 13                12982 	rrc	a
   37A3 CC                12983 	xch	a,r4
   37A4 13                12984 	rrc	a
   37A5 A2 E0             12985 	mov	c,acc.0
   37A7 CC                12986 	xch	a,r4
   37A8 13                12987 	rrc	a
   37A9 CC                12988 	xch	a,r4
   37AA 13                12989 	rrc	a
   37AB CC                12990 	xch	a,r4
   37AC FD                12991 	mov	r5,a
                          12992 ;	genPlus
                          12993 ;	Peephole 236.g	used r4 instead of ar4
   37AD EC                12994 	mov	a,r4
                          12995 ;	Peephole 236.a	used r2 instead of ar2
   37AE 2A                12996 	add	a,r2
   37AF FA                12997 	mov	r2,a
                          12998 ;	Peephole 236.g	used r5 instead of ar5
   37B0 ED                12999 	mov	a,r5
                          13000 ;	Peephole 236.b	used r3 instead of ar3
   37B1 3B                13001 	addc	a,r3
   37B2 FB                13002 	mov	r3,a
                          13003 ;	genPointerGet
                          13004 ;	genFarPointerGet
   37B3 90s00rAE          13005 	mov	dptr,#(_expander_functions_p_1_1 + 0x000e)
   37B6 E0                13006 	movx	a,@dptr
   37B7 FC                13007 	mov	r4,a
   37B8 A3                13008 	inc	dptr
   37B9 E0                13009 	movx	a,@dptr
                          13010 ;	genLeftShift
                          13011 ;	genLeftShiftLiteral
                          13012 ;	genlshTwo
   37BA FD                13013 	mov	r5,a
                          13014 ;	Peephole 105	removed redundant mov
   37BB 54 01             13015 	anl	a,#0x01
   37BD A2 E0             13016 	mov	c,acc.0
   37BF CC                13017 	xch	a,r4
   37C0 13                13018 	rrc	a
   37C1 CC                13019 	xch	a,r4
   37C2 13                13020 	rrc	a
   37C3 CC                13021 	xch	a,r4
   37C4 FD                13022 	mov	r5,a
                          13023 ;	genPlus
                          13024 ;	Peephole 236.g	used r4 instead of ar4
   37C5 EC                13025 	mov	a,r4
                          13026 ;	Peephole 236.a	used r2 instead of ar2
   37C6 2A                13027 	add	a,r2
   37C7 FA                13028 	mov	r2,a
                          13029 ;	Peephole 236.g	used r5 instead of ar5
   37C8 ED                13030 	mov	a,r5
                          13031 ;	Peephole 236.b	used r3 instead of ar3
   37C9 3B                13032 	addc	a,r3
   37CA FB                13033 	mov	r3,a
                          13034 ;	main4.c:1410: I2CExpanderWrite(pinconfig,pinconfig);
                          13035 ;	genAssign
   37CB 90s00r00          13036 	mov	dptr,#_I2CExpanderWrite_PARM_2
   37CE EA                13037 	mov	a,r2
   37CF F0                13038 	movx	@dptr,a
   37D0 A3                13039 	inc	dptr
   37D1 EB                13040 	mov	a,r3
   37D2 F0                13041 	movx	@dptr,a
                          13042 ;	genCall
   37D3 8A 82             13043 	mov	dpl,r2
   37D5 8B 83             13044 	mov	dph,r3
                          13045 ;	main4.c:1411: }break;
                          13046 ;	main4.c:1412: case '4':
                          13047 ;	Peephole 112.b	changed ljmp to sjmp
                          13048 ;	Peephole 251.b	replaced sjmp to ret with ret
                          13049 ;	Peephole 253.a	replaced lcall/ret with ljmp
   37D7 02s00r00          13050 	ljmp	_I2CExpanderWrite
   37DA                   13051 00138$:
                          13052 ;	main4.c:1414: printf("\n\rEnable Interrupts from PORT EXPANDER");
                          13053 ;	genIpush
   37DA 74r9E             13054 	mov	a,#__str_131
   37DC C0 E0             13055 	push	acc
   37DE 74s14             13056 	mov	a,#(__str_131 >> 8)
   37E0 C0 E0             13057 	push	acc
   37E2 74 80             13058 	mov	a,#0x80
   37E4 C0 E0             13059 	push	acc
                          13060 ;	genCall
   37E6 12s00r00          13061 	lcall	_printf
   37E9 15 81             13062 	dec	sp
   37EB 15 81             13063 	dec	sp
   37ED 15 81             13064 	dec	sp
                          13065 ;	main4.c:1415: IE|= 0x83;
                          13066 ;	genOr
   37EF 43 A8 83          13067 	orl	_IE,#0x83
                          13068 ;	main4.c:1418: default:
   37F2                   13069 00139$:
                          13070 ;	main4.c:1420: printf("Error! Invalid Input.");
                          13071 ;	genIpush
   37F2 74rC5             13072 	mov	a,#__str_132
   37F4 C0 E0             13073 	push	acc
   37F6 74s14             13074 	mov	a,#(__str_132 >> 8)
   37F8 C0 E0             13075 	push	acc
   37FA 74 80             13076 	mov	a,#0x80
   37FC C0 E0             13077 	push	acc
                          13078 ;	genCall
   37FE 12s00r00          13079 	lcall	_printf
   3801 15 81             13080 	dec	sp
   3803 15 81             13081 	dec	sp
   3805 15 81             13082 	dec	sp
                          13083 ;	main4.c:1421: expander_functions();
                          13084 ;	genCall
                          13085 ;	main4.c:1423: }
                          13086 ;	Peephole 253.b	replaced lcall/ret with ljmp
   3807 02s31r26          13087 	ljmp	_expander_functions
                          13088 ;
                          13089 ;------------------------------------------------------------
                          13090 ;Allocation info for local variables in function 'print_time_stamp'
                          13091 ;------------------------------------------------------------
                          13092 ;------------------------------------------------------------
                          13093 ;	main4.c:1427: void print_time_stamp(void) __critical
                          13094 ;	-----------------------------------------
                          13095 ;	 function print_time_stamp
                          13096 ;	-----------------------------------------
   380A                   13097 _print_time_stamp:
   380A D3                13098 	setb	c
   380B 10 AF 01          13099 	jbc	ea,00107$
   380E C3                13100 	clr	c
   380F                   13101 00107$:
   380F C0 D0             13102 	push	psw
                          13103 ;	main4.c:1429: if(advance==1)
                          13104 ;	genAssign
   3811 90s00r60          13105 	mov	dptr,#_advance
   3814 E0                13106 	movx	a,@dptr
   3815 FA                13107 	mov	r2,a
   3816 A3                13108 	inc	dptr
   3817 E0                13109 	movx	a,@dptr
   3818 FB                13110 	mov	r3,a
                          13111 ;	genCmpEq
                          13112 ;	gencjneshort
   3819 BA 01 05          13113 	cjne	r2,#0x01,00108$
   381C BB 00 02          13114 	cjne	r3,#0x00,00108$
   381F 80 03             13115 	sjmp	00109$
   3821                   13116 00108$:
   3821 02s39r17          13117 	ljmp	00102$
   3824                   13118 00109$:
                          13119 ;	main4.c:1431: lcdgotoaddr(88);
                          13120 ;	genCall
                          13121 ;	Peephole 182.b	used 16 bit load of dptr
   3824 90 00 58          13122 	mov	dptr,#0x0058
   3827 12s00r00          13123 	lcall	_lcdgotoaddr
                          13124 ;	main4.c:1432: lcdputch((minute/10)+48);
                          13125 ;	genAssign
   382A 90s00r58          13126 	mov	dptr,#_minute
   382D E0                13127 	movx	a,@dptr
   382E FA                13128 	mov	r2,a
   382F A3                13129 	inc	dptr
   3830 E0                13130 	movx	a,@dptr
   3831 FB                13131 	mov	r3,a
                          13132 ;	genAssign
   3832 90s00r00          13133 	mov	dptr,#__divsint_PARM_2
   3835 74 0A             13134 	mov	a,#0x0A
   3837 F0                13135 	movx	@dptr,a
   3838 E4                13136 	clr	a
   3839 A3                13137 	inc	dptr
   383A F0                13138 	movx	@dptr,a
                          13139 ;	genCall
   383B 8A 82             13140 	mov	dpl,r2
   383D 8B 83             13141 	mov	dph,r3
   383F 12s00r00          13142 	lcall	__divsint
   3842 AA 82             13143 	mov	r2,dpl
   3844 AB 83             13144 	mov	r3,dph
                          13145 ;	genCast
                          13146 ;	genPlus
                          13147 ;     genPlusIncr
   3846 74 30             13148 	mov	a,#0x30
                          13149 ;	Peephole 236.a	used r2 instead of ar2
   3848 2A                13150 	add	a,r2
                          13151 ;	genCall
   3849 FA                13152 	mov	r2,a
                          13153 ;	Peephole 244.c	loading dpl from a instead of r2
   384A F5 82             13154 	mov	dpl,a
   384C 12s00r00          13155 	lcall	_lcdputch
                          13156 ;	main4.c:1433: lcdputch((minute%10)+48);
                          13157 ;	genAssign
   384F 90s00r58          13158 	mov	dptr,#_minute
   3852 E0                13159 	movx	a,@dptr
   3853 FA                13160 	mov	r2,a
   3854 A3                13161 	inc	dptr
   3855 E0                13162 	movx	a,@dptr
   3856 FB                13163 	mov	r3,a
                          13164 ;	genAssign
   3857 90s00r00          13165 	mov	dptr,#__modsint_PARM_2
   385A 74 0A             13166 	mov	a,#0x0A
   385C F0                13167 	movx	@dptr,a
   385D E4                13168 	clr	a
   385E A3                13169 	inc	dptr
   385F F0                13170 	movx	@dptr,a
                          13171 ;	genCall
   3860 8A 82             13172 	mov	dpl,r2
   3862 8B 83             13173 	mov	dph,r3
   3864 12s00r00          13174 	lcall	__modsint
   3867 AA 82             13175 	mov	r2,dpl
   3869 AB 83             13176 	mov	r3,dph
                          13177 ;	genCast
                          13178 ;	genPlus
                          13179 ;     genPlusIncr
   386B 74 30             13180 	mov	a,#0x30
                          13181 ;	Peephole 236.a	used r2 instead of ar2
   386D 2A                13182 	add	a,r2
                          13183 ;	genCall
   386E FA                13184 	mov	r2,a
                          13185 ;	Peephole 244.c	loading dpl from a instead of r2
   386F F5 82             13186 	mov	dpl,a
   3871 12s00r00          13187 	lcall	_lcdputch
                          13188 ;	main4.c:1434: lcdputch(':');
                          13189 ;	genCall
   3874 75 82 3A          13190 	mov	dpl,#0x3A
   3877 12s00r00          13191 	lcall	_lcdputch
                          13192 ;	main4.c:1435: lcdputch((sec/10)+48);
                          13193 ;	genAssign
   387A 90s00r5A          13194 	mov	dptr,#_sec
   387D E0                13195 	movx	a,@dptr
   387E FA                13196 	mov	r2,a
   387F A3                13197 	inc	dptr
   3880 E0                13198 	movx	a,@dptr
   3881 FB                13199 	mov	r3,a
                          13200 ;	genAssign
   3882 90s00r00          13201 	mov	dptr,#__divsint_PARM_2
   3885 74 0A             13202 	mov	a,#0x0A
   3887 F0                13203 	movx	@dptr,a
   3888 E4                13204 	clr	a
   3889 A3                13205 	inc	dptr
   388A F0                13206 	movx	@dptr,a
                          13207 ;	genCall
   388B 8A 82             13208 	mov	dpl,r2
   388D 8B 83             13209 	mov	dph,r3
   388F 12s00r00          13210 	lcall	__divsint
   3892 AA 82             13211 	mov	r2,dpl
   3894 AB 83             13212 	mov	r3,dph
                          13213 ;	genCast
                          13214 ;	genPlus
                          13215 ;     genPlusIncr
   3896 74 30             13216 	mov	a,#0x30
                          13217 ;	Peephole 236.a	used r2 instead of ar2
   3898 2A                13218 	add	a,r2
                          13219 ;	genCall
   3899 FA                13220 	mov	r2,a
                          13221 ;	Peephole 244.c	loading dpl from a instead of r2
   389A F5 82             13222 	mov	dpl,a
   389C 12s00r00          13223 	lcall	_lcdputch
                          13224 ;	main4.c:1436: lcdputch((sec%10)+48);
                          13225 ;	genAssign
   389F 90s00r5A          13226 	mov	dptr,#_sec
   38A2 E0                13227 	movx	a,@dptr
   38A3 FA                13228 	mov	r2,a
   38A4 A3                13229 	inc	dptr
   38A5 E0                13230 	movx	a,@dptr
   38A6 FB                13231 	mov	r3,a
                          13232 ;	genAssign
   38A7 90s00r00          13233 	mov	dptr,#__modsint_PARM_2
   38AA 74 0A             13234 	mov	a,#0x0A
   38AC F0                13235 	movx	@dptr,a
   38AD E4                13236 	clr	a
   38AE A3                13237 	inc	dptr
   38AF F0                13238 	movx	@dptr,a
                          13239 ;	genCall
   38B0 8A 82             13240 	mov	dpl,r2
   38B2 8B 83             13241 	mov	dph,r3
   38B4 12s00r00          13242 	lcall	__modsint
   38B7 AA 82             13243 	mov	r2,dpl
   38B9 AB 83             13244 	mov	r3,dph
                          13245 ;	genCast
                          13246 ;	genPlus
                          13247 ;     genPlusIncr
   38BB 74 30             13248 	mov	a,#0x30
                          13249 ;	Peephole 236.a	used r2 instead of ar2
   38BD 2A                13250 	add	a,r2
                          13251 ;	genCall
   38BE FA                13252 	mov	r2,a
                          13253 ;	Peephole 244.c	loading dpl from a instead of r2
   38BF F5 82             13254 	mov	dpl,a
   38C1 12s00r00          13255 	lcall	_lcdputch
                          13256 ;	main4.c:1437: lcdputch('.');
                          13257 ;	genCall
   38C4 75 82 2E          13258 	mov	dpl,#0x2E
   38C7 12s00r00          13259 	lcall	_lcdputch
                          13260 ;	main4.c:1438: lcdputch((deci/10)+48);
                          13261 ;	genAssign
   38CA 90s00r5C          13262 	mov	dptr,#_deci
   38CD E0                13263 	movx	a,@dptr
   38CE FA                13264 	mov	r2,a
   38CF A3                13265 	inc	dptr
   38D0 E0                13266 	movx	a,@dptr
   38D1 FB                13267 	mov	r3,a
                          13268 ;	genAssign
   38D2 90s00r00          13269 	mov	dptr,#__divsint_PARM_2
   38D5 74 0A             13270 	mov	a,#0x0A
   38D7 F0                13271 	movx	@dptr,a
   38D8 E4                13272 	clr	a
   38D9 A3                13273 	inc	dptr
   38DA F0                13274 	movx	@dptr,a
                          13275 ;	genCall
   38DB 8A 82             13276 	mov	dpl,r2
   38DD 8B 83             13277 	mov	dph,r3
   38DF 12s00r00          13278 	lcall	__divsint
   38E2 AA 82             13279 	mov	r2,dpl
   38E4 AB 83             13280 	mov	r3,dph
                          13281 ;	genCast
                          13282 ;	genPlus
                          13283 ;     genPlusIncr
   38E6 74 30             13284 	mov	a,#0x30
                          13285 ;	Peephole 236.a	used r2 instead of ar2
   38E8 2A                13286 	add	a,r2
                          13287 ;	genCall
   38E9 FA                13288 	mov	r2,a
                          13289 ;	Peephole 244.c	loading dpl from a instead of r2
   38EA F5 82             13290 	mov	dpl,a
   38EC 12s00r00          13291 	lcall	_lcdputch
                          13292 ;	main4.c:1439: lcdputch((deci%10)+48);
                          13293 ;	genAssign
   38EF 90s00r5C          13294 	mov	dptr,#_deci
   38F2 E0                13295 	movx	a,@dptr
   38F3 FA                13296 	mov	r2,a
   38F4 A3                13297 	inc	dptr
   38F5 E0                13298 	movx	a,@dptr
   38F6 FB                13299 	mov	r3,a
                          13300 ;	genAssign
   38F7 90s00r00          13301 	mov	dptr,#__modsint_PARM_2
   38FA 74 0A             13302 	mov	a,#0x0A
   38FC F0                13303 	movx	@dptr,a
   38FD E4                13304 	clr	a
   38FE A3                13305 	inc	dptr
   38FF F0                13306 	movx	@dptr,a
                          13307 ;	genCall
   3900 8A 82             13308 	mov	dpl,r2
   3902 8B 83             13309 	mov	dph,r3
   3904 12s00r00          13310 	lcall	__modsint
   3907 AA 82             13311 	mov	r2,dpl
   3909 AB 83             13312 	mov	r3,dph
                          13313 ;	genCast
                          13314 ;	genPlus
                          13315 ;     genPlusIncr
   390B 74 30             13316 	mov	a,#0x30
                          13317 ;	Peephole 236.a	used r2 instead of ar2
   390D 2A                13318 	add	a,r2
                          13319 ;	genCall
   390E FA                13320 	mov	r2,a
                          13321 ;	Peephole 244.c	loading dpl from a instead of r2
   390F F5 82             13322 	mov	dpl,a
   3911 12s00r00          13323 	lcall	_lcdputch
   3914 02s39rE2          13324 	ljmp	00104$
   3917                   13325 00102$:
                          13326 ;	main4.c:1443: lcdgotoaddr(89);
                          13327 ;	genCall
                          13328 ;	Peephole 182.b	used 16 bit load of dptr
   3917 90 00 59          13329 	mov	dptr,#0x0059
   391A 12s00r00          13330 	lcall	_lcdgotoaddr
                          13331 ;	main4.c:1444: lcdputch((minute/10)+48);
                          13332 ;	genAssign
   391D 90s00r58          13333 	mov	dptr,#_minute
   3920 E0                13334 	movx	a,@dptr
   3921 FA                13335 	mov	r2,a
   3922 A3                13336 	inc	dptr
   3923 E0                13337 	movx	a,@dptr
   3924 FB                13338 	mov	r3,a
                          13339 ;	genAssign
   3925 90s00r00          13340 	mov	dptr,#__divsint_PARM_2
   3928 74 0A             13341 	mov	a,#0x0A
   392A F0                13342 	movx	@dptr,a
   392B E4                13343 	clr	a
   392C A3                13344 	inc	dptr
   392D F0                13345 	movx	@dptr,a
                          13346 ;	genCall
   392E 8A 82             13347 	mov	dpl,r2
   3930 8B 83             13348 	mov	dph,r3
   3932 12s00r00          13349 	lcall	__divsint
   3935 AA 82             13350 	mov	r2,dpl
   3937 AB 83             13351 	mov	r3,dph
                          13352 ;	genCast
                          13353 ;	genPlus
                          13354 ;     genPlusIncr
   3939 74 30             13355 	mov	a,#0x30
                          13356 ;	Peephole 236.a	used r2 instead of ar2
   393B 2A                13357 	add	a,r2
                          13358 ;	genCall
   393C FA                13359 	mov	r2,a
                          13360 ;	Peephole 244.c	loading dpl from a instead of r2
   393D F5 82             13361 	mov	dpl,a
   393F 12s00r00          13362 	lcall	_lcdputch
                          13363 ;	main4.c:1445: lcdputch((minute%10)+48);
                          13364 ;	genAssign
   3942 90s00r58          13365 	mov	dptr,#_minute
   3945 E0                13366 	movx	a,@dptr
   3946 FA                13367 	mov	r2,a
   3947 A3                13368 	inc	dptr
   3948 E0                13369 	movx	a,@dptr
   3949 FB                13370 	mov	r3,a
                          13371 ;	genAssign
   394A 90s00r00          13372 	mov	dptr,#__modsint_PARM_2
   394D 74 0A             13373 	mov	a,#0x0A
   394F F0                13374 	movx	@dptr,a
   3950 E4                13375 	clr	a
   3951 A3                13376 	inc	dptr
   3952 F0                13377 	movx	@dptr,a
                          13378 ;	genCall
   3953 8A 82             13379 	mov	dpl,r2
   3955 8B 83             13380 	mov	dph,r3
   3957 12s00r00          13381 	lcall	__modsint
   395A AA 82             13382 	mov	r2,dpl
   395C AB 83             13383 	mov	r3,dph
                          13384 ;	genCast
                          13385 ;	genPlus
                          13386 ;     genPlusIncr
   395E 74 30             13387 	mov	a,#0x30
                          13388 ;	Peephole 236.a	used r2 instead of ar2
   3960 2A                13389 	add	a,r2
                          13390 ;	genCall
   3961 FA                13391 	mov	r2,a
                          13392 ;	Peephole 244.c	loading dpl from a instead of r2
   3962 F5 82             13393 	mov	dpl,a
   3964 12s00r00          13394 	lcall	_lcdputch
                          13395 ;	main4.c:1446: lcdputch(':');
                          13396 ;	genCall
   3967 75 82 3A          13397 	mov	dpl,#0x3A
   396A 12s00r00          13398 	lcall	_lcdputch
                          13399 ;	main4.c:1447: lcdputch((sec/10)+48);
                          13400 ;	genAssign
   396D 90s00r5A          13401 	mov	dptr,#_sec
   3970 E0                13402 	movx	a,@dptr
   3971 FA                13403 	mov	r2,a
   3972 A3                13404 	inc	dptr
   3973 E0                13405 	movx	a,@dptr
   3974 FB                13406 	mov	r3,a
                          13407 ;	genAssign
   3975 90s00r00          13408 	mov	dptr,#__divsint_PARM_2
   3978 74 0A             13409 	mov	a,#0x0A
   397A F0                13410 	movx	@dptr,a
   397B E4                13411 	clr	a
   397C A3                13412 	inc	dptr
   397D F0                13413 	movx	@dptr,a
                          13414 ;	genCall
   397E 8A 82             13415 	mov	dpl,r2
   3980 8B 83             13416 	mov	dph,r3
   3982 12s00r00          13417 	lcall	__divsint
   3985 AA 82             13418 	mov	r2,dpl
   3987 AB 83             13419 	mov	r3,dph
                          13420 ;	genCast
                          13421 ;	genPlus
                          13422 ;     genPlusIncr
   3989 74 30             13423 	mov	a,#0x30
                          13424 ;	Peephole 236.a	used r2 instead of ar2
   398B 2A                13425 	add	a,r2
                          13426 ;	genCall
   398C FA                13427 	mov	r2,a
                          13428 ;	Peephole 244.c	loading dpl from a instead of r2
   398D F5 82             13429 	mov	dpl,a
   398F 12s00r00          13430 	lcall	_lcdputch
                          13431 ;	main4.c:1448: lcdputch((sec%10)+48);
                          13432 ;	genAssign
   3992 90s00r5A          13433 	mov	dptr,#_sec
   3995 E0                13434 	movx	a,@dptr
   3996 FA                13435 	mov	r2,a
   3997 A3                13436 	inc	dptr
   3998 E0                13437 	movx	a,@dptr
   3999 FB                13438 	mov	r3,a
                          13439 ;	genAssign
   399A 90s00r00          13440 	mov	dptr,#__modsint_PARM_2
   399D 74 0A             13441 	mov	a,#0x0A
   399F F0                13442 	movx	@dptr,a
   39A0 E4                13443 	clr	a
   39A1 A3                13444 	inc	dptr
   39A2 F0                13445 	movx	@dptr,a
                          13446 ;	genCall
   39A3 8A 82             13447 	mov	dpl,r2
   39A5 8B 83             13448 	mov	dph,r3
   39A7 12s00r00          13449 	lcall	__modsint
   39AA AA 82             13450 	mov	r2,dpl
   39AC AB 83             13451 	mov	r3,dph
                          13452 ;	genCast
                          13453 ;	genPlus
                          13454 ;     genPlusIncr
   39AE 74 30             13455 	mov	a,#0x30
                          13456 ;	Peephole 236.a	used r2 instead of ar2
   39B0 2A                13457 	add	a,r2
                          13458 ;	genCall
   39B1 FA                13459 	mov	r2,a
                          13460 ;	Peephole 244.c	loading dpl from a instead of r2
   39B2 F5 82             13461 	mov	dpl,a
   39B4 12s00r00          13462 	lcall	_lcdputch
                          13463 ;	main4.c:1449: lcdputch('.');
                          13464 ;	genCall
   39B7 75 82 2E          13465 	mov	dpl,#0x2E
   39BA 12s00r00          13466 	lcall	_lcdputch
                          13467 ;	main4.c:1450: lcdputch((deci/10)+48);
                          13468 ;	genAssign
   39BD 90s00r5C          13469 	mov	dptr,#_deci
   39C0 E0                13470 	movx	a,@dptr
   39C1 FA                13471 	mov	r2,a
   39C2 A3                13472 	inc	dptr
   39C3 E0                13473 	movx	a,@dptr
   39C4 FB                13474 	mov	r3,a
                          13475 ;	genAssign
   39C5 90s00r00          13476 	mov	dptr,#__divsint_PARM_2
   39C8 74 0A             13477 	mov	a,#0x0A
   39CA F0                13478 	movx	@dptr,a
   39CB E4                13479 	clr	a
   39CC A3                13480 	inc	dptr
   39CD F0                13481 	movx	@dptr,a
                          13482 ;	genCall
   39CE 8A 82             13483 	mov	dpl,r2
   39D0 8B 83             13484 	mov	dph,r3
   39D2 12s00r00          13485 	lcall	__divsint
   39D5 AA 82             13486 	mov	r2,dpl
   39D7 AB 83             13487 	mov	r3,dph
                          13488 ;	genCast
                          13489 ;	genPlus
                          13490 ;     genPlusIncr
   39D9 74 30             13491 	mov	a,#0x30
                          13492 ;	Peephole 236.a	used r2 instead of ar2
   39DB 2A                13493 	add	a,r2
                          13494 ;	genCall
   39DC FA                13495 	mov	r2,a
                          13496 ;	Peephole 244.c	loading dpl from a instead of r2
   39DD F5 82             13497 	mov	dpl,a
   39DF 12s00r00          13498 	lcall	_lcdputch
   39E2                   13499 00104$:
   39E2 D0 D0             13500 	pop	psw
   39E4 92 AF             13501 	mov	ea,c
   39E6 22                13502 	ret
                          13503 ;------------------------------------------------------------
                          13504 ;Allocation info for local variables in function 'isr_zero'
                          13505 ;------------------------------------------------------------
                          13506 ;------------------------------------------------------------
                          13507 ;	main4.c:1454: void isr_zero(void) __interrupt (0)
                          13508 ;	-----------------------------------------
                          13509 ;	 function isr_zero
                          13510 ;	-----------------------------------------
   39E7                   13511 _isr_zero:
   39E7 C0 E0             13512 	push	acc
   39E9 C0 F0             13513 	push	b
   39EB C0 82             13514 	push	dpl
   39ED C0 83             13515 	push	dph
   39EF C0 02             13516 	push	(0+2)
   39F1 C0 03             13517 	push	(0+3)
   39F3 C0 04             13518 	push	(0+4)
   39F5 C0 05             13519 	push	(0+5)
   39F7 C0 06             13520 	push	(0+6)
   39F9 C0 07             13521 	push	(0+7)
   39FB C0 00             13522 	push	(0+0)
   39FD C0 01             13523 	push	(0+1)
   39FF C0 D0             13524 	push	psw
   3A01 75 D0 00          13525 	mov	psw,#0x00
                          13526 ;	main4.c:1456: printf("\n\n\rInterrupt has been triggered");
                          13527 ;	genIpush
   3A04 74rDB             13528 	mov	a,#__str_133
   3A06 C0 E0             13529 	push	acc
   3A08 74s14             13530 	mov	a,#(__str_133 >> 8)
   3A0A C0 E0             13531 	push	acc
   3A0C 74 80             13532 	mov	a,#0x80
   3A0E C0 E0             13533 	push	acc
                          13534 ;	genCall
   3A10 12s00r00          13535 	lcall	_printf
   3A13 15 81             13536 	dec	sp
   3A15 15 81             13537 	dec	sp
   3A17 15 81             13538 	dec	sp
                          13539 ;	main4.c:1459: }
                          13540 ;	genCritical
   3A19 D2*01             13541 	setb	_isr_zero_sloc0_1_0
   3A1B 10 AF 02          13542 	jbc	ea,00103$
   3A1E C2*01             13543 	clr	_isr_zero_sloc0_1_0
   3A20                   13544 00103$:
                          13545 ;	main4.c:1458: P1_7= !P1_7;
                          13546 ;	genNot
   3A20 B2 97             13547 	cpl	_P1_7
                          13548 ;     genEndCritical
   3A22 A2*01             13549 	mov	c,_isr_zero_sloc0_1_0
   3A24 92 AF             13550 	mov	ea,c
                          13551 ;	Peephole 300	removed redundant label 00101$
   3A26 D0 D0             13552 	pop	psw
   3A28 D0 01             13553 	pop	(0+1)
   3A2A D0 00             13554 	pop	(0+0)
   3A2C D0 07             13555 	pop	(0+7)
   3A2E D0 06             13556 	pop	(0+6)
   3A30 D0 05             13557 	pop	(0+5)
   3A32 D0 04             13558 	pop	(0+4)
   3A34 D0 03             13559 	pop	(0+3)
   3A36 D0 02             13560 	pop	(0+2)
   3A38 D0 83             13561 	pop	dph
   3A3A D0 82             13562 	pop	dpl
   3A3C D0 F0             13563 	pop	b
   3A3E D0 E0             13564 	pop	acc
   3A40 32                13565 	reti
                          13566 	.area CSEG    (CODE)
                          13567 	.area CONST   (CODE)
   0000                   13568 __str_0:
   0000 0A                13569 	.db 0x0A
   0001 0A                13570 	.db 0x0A
   0002 0D                13571 	.db 0x0D
   0003 50 6C 65 61 73 65 13572 	.ascii "Please Enter a address of the location in hex LCD"
        20 45 6E 74 65 72
        20 61 20 61 64 64
        72 65 73 73 20 6F
        66 20 74 68 65 20
        6C 6F 63 61 74 69
        6F 6E 20 69 6E 20
        68 65 78 20 4C 43
        44
   0034 0A                13573 	.db 0x0A
   0035 0A                13574 	.db 0x0A
   0036 0D                13575 	.db 0x0D
   0037 00                13576 	.db 0x00
   0038                   13577 __str_1:
   0038 0A                13578 	.db 0x0A
   0039 0D                13579 	.db 0x0D
   003A 2B 2D 2D 2D 2D 2D 13580 	.ascii "+------+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+"
        2D 2B 2D 2D 2B 2D
        2D 2B 2D 2D 2B 2D
        2D 2B 2D 2D 2B 2D
        2D 2B 2D 2D 2B 2D
        2D 2B 2D 2D 2B 2D
        2D 2B 2D 2D 2B 2D
        2D 2B 2D 2D 2B 2D
        2D 2B 2D 2D 2B 2D
        2D 2B
   0072 00                13581 	.db 0x00
   0073                   13582 __str_2:
   0073 0A                13583 	.db 0x0A
   0074 0D                13584 	.db 0x0D
   0075 7C 20 20 20 20 20 13585 	.ascii "|      |00|01|02|03|04|05|06|07|08|19|10|11|12|13|14|15|"
        20 7C 30 30 7C 30
        31 7C 30 32 7C 30
        33 7C 30 34 7C 30
        35 7C 30 36 7C 30
        37 7C 30 38 7C 31
        39 7C 31 30 7C 31
        31 7C 31 32 7C 31
        33 7C 31 34 7C 31
        35 7C
   00AD 00                13586 	.db 0x00
   00AE                   13587 __str_3:
   00AE 0A                13588 	.db 0x0A
   00AF 0D                13589 	.db 0x0D
   00B0 7C 20 52 6F 77 30 13590 	.ascii "| Row0 |00|01|02|03|04|05|06|07|08|09|0A|0B|0C|0D|0E|0F|"
        20 7C 30 30 7C 30
        31 7C 30 32 7C 30
        33 7C 30 34 7C 30
        35 7C 30 36 7C 30
        37 7C 30 38 7C 30
        39 7C 30 41 7C 30
        42 7C 30 43 7C 30
        44 7C 30 45 7C 30
        46 7C
   00E8 00                13591 	.db 0x00
   00E9                   13592 __str_4:
   00E9 0A                13593 	.db 0x0A
   00EA 0D                13594 	.db 0x0D
   00EB 7C 20 52 6F 77 31 13595 	.ascii "| Row1 |40|41|42|43|44|45|46|47|48|49|4A|4B|4C|4D|4E|4F|"
        20 7C 34 30 7C 34
        31 7C 34 32 7C 34
        33 7C 34 34 7C 34
        35 7C 34 36 7C 34
        37 7C 34 38 7C 34
        39 7C 34 41 7C 34
        42 7C 34 43 7C 34
        44 7C 34 45 7C 34
        46 7C
   0123 00                13596 	.db 0x00
   0124                   13597 __str_5:
   0124 0A                13598 	.db 0x0A
   0125 0D                13599 	.db 0x0D
   0126 7C 20 52 6F 77 32 13600 	.ascii "| Row2 |10|11|12|13|14|15|16|17|18|19|1A|1B|1C|1D|1E|1F|"
        20 7C 31 30 7C 31
        31 7C 31 32 7C 31
        33 7C 31 34 7C 31
        35 7C 31 36 7C 31
        37 7C 31 38 7C 31
        39 7C 31 41 7C 31
        42 7C 31 43 7C 31
        44 7C 31 45 7C 31
        46 7C
   015E 00                13601 	.db 0x00
   015F                   13602 __str_6:
   015F 0A                13603 	.db 0x0A
   0160 0D                13604 	.db 0x0D
   0161 7C 20 52 6F 77 33 13605 	.ascii "| Row3 |50|51|52|53|54|55|56|57|58|59|5A|5B|5C|5D|5E|5F|"
        20 7C 35 30 7C 35
        31 7C 35 32 7C 35
        33 7C 35 34 7C 35
        35 7C 35 36 7C 35
        37 7C 35 38 7C 35
        39 7C 35 41 7C 35
        42 7C 35 43 7C 35
        44 7C 35 45 7C 35
        46 7C
   0199 00                13606 	.db 0x00
   019A                   13607 __str_7:
   019A 0A                13608 	.db 0x0A
   019B 0D                13609 	.db 0x0D
   019C 45 6E 74 65 72 20 13610 	.ascii "Enter the address in hex 0x"
        74 68 65 20 61 64
        64 72 65 73 73 20
        69 6E 20 68 65 78
        20 30 78
   01B7 00                13611 	.db 0x00
   01B8                   13612 __str_8:
   01B8 0A                13613 	.db 0x0A
   01B9 0D                13614 	.db 0x0D
   01BA 49 6E 76 61 6C 69 13615 	.ascii "Invalid input"
        64 20 69 6E 70 75
        74
   01C7 00                13616 	.db 0x00
   01C8                   13617 __str_9:
   01C8 0A                13618 	.db 0x0A
   01C9 0D                13619 	.db 0x0D
   01CA 49 6E 76 61 6C 69 13620 	.ascii "Invalid Input"
        64 20 49 6E 70 75
        74
   01D7 00                13621 	.db 0x00
   01D8                   13622 __str_10:
   01D8 0A                13623 	.db 0x0A
   01D9 0A                13624 	.db 0x0A
   01DA 0D                13625 	.db 0x0D
   01DB 4F 75 74 20 6F 66 13626 	.ascii "Out of range address"
        20 72 61 6E 67 65
        20 61 64 64 72 65
        73 73
   01EF 00                13627 	.db 0x00
   01F0                   13628 __str_11:
   01F0 0A                13629 	.db 0x0A
   01F1 0D                13630 	.db 0x0D
   01F2 50 6C 65 61 73 65 13631 	.ascii "Please Enter the row(X = 0 to 3) and column(Y = 0 to 15) c"
        20 45 6E 74 65 72
        20 74 68 65 20 72
        6F 77 28 58 20 3D
        20 30 20 74 6F 20
        33 29 20 61 6E 64
        20 63 6F 6C 75 6D
        6E 28 59 20 3D 20
        30 20 74 6F 20 31
        35 29 20 63
   022C 6F 6F 72 64 69 6E 13632 	.ascii "oordinates where you wish to place the cursor:"
        61 74 65 73 20 77
        68 65 72 65 20 79
        6F 75 20 77 69 73
        68 20 74 6F 20 70
        6C 61 63 65 20 74
        68 65 20 63 75 72
        73 6F 72 3A
   025A 00                13633 	.db 0x00
   025B                   13634 __str_12:
   025B 0A                13635 	.db 0x0A
   025C 0D                13636 	.db 0x0D
   025D 50 6C 65 61 73 65 13637 	.ascii "Please enter the row:"
        20 65 6E 74 65 72
        20 74 68 65 20 72
        6F 77 3A
   0272 0A                13638 	.db 0x0A
   0273 0D                13639 	.db 0x0D
   0274 00                13640 	.db 0x00
   0275                   13641 __str_13:
   0275 0A                13642 	.db 0x0A
   0276 0D                13643 	.db 0x0D
   0277 50 6C 65 61 73 65 13644 	.ascii "Please enter the column:"
        20 65 6E 74 65 72
        20 74 68 65 20 63
        6F 6C 75 6D 6E 3A
   028F 0A                13645 	.db 0x0A
   0290 0D                13646 	.db 0x0D
   0291 00                13647 	.db 0x00
   0292                   13648 __str_14:
   0292 0A                13649 	.db 0x0A
   0293 0D                13650 	.db 0x0D
   0294 49 6E 76 61 6C 69 13651 	.ascii "Invalid Input(1)"
        64 20 49 6E 70 75
        74 28 31 29
   02A4 00                13652 	.db 0x00
   02A5                   13653 __str_15:
   02A5 49 6E 76 61 6C 69 13654 	.ascii "Invalid Input(4)"
        64 20 49 6E 70 75
        74 28 34 29
   02B5 00                13655 	.db 0x00
   02B6                   13656 __str_16:
   02B6 0A                13657 	.db 0x0A
   02B7 0A                13658 	.db 0x0A
   02B8 0D                13659 	.db 0x0D
   02B9 2D 2D 2D 2D 2D 2D 13660 	.ascii "---------------------------------------------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D
   02F2 2D 2D 2D 2D 2D 2D 13661 	.ascii "---------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D
   0307 00                13662 	.db 0x00
   0308                   13663 __str_17:
   0308 0A                13664 	.db 0x0A
   0309 0D                13665 	.db 0x0D
   030A 20 20 20 20 20 20 13666 	.ascii "                              LCD FUNCTION MENU"
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        4C 43 44 20 46 55
        4E 43 54 49 4F 4E
        20 4D 45 4E 55
   0339 00                13667 	.db 0x00
   033A                   13668 __str_18:
   033A 0A                13669 	.db 0x0A
   033B 0D                13670 	.db 0x0D
   033C 2D 2D 2D 2D 2D 2D 13671 	.ascii "----------------------------------------------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D
   0376 2D 2D 2D 2D 2D 2D 13672 	.ascii "----------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D
   038C 00                13673 	.db 0x00
   038D                   13674 __str_19:
   038D 0A                13675 	.db 0x0A
   038E 0D                13676 	.db 0x0D
   038F 46 75 6E 63 74 69 13677 	.ascii "Function 1: Initialize the LCD || lcdinit()"
        6F 6E 20 31 3A 20
        49 6E 69 74 69 61
        6C 69 7A 65 20 74
        68 65 20 4C 43 44
        20 7C 7C 20 6C 63
        64 69 6E 69 74 28
        29
   03BA 00                13678 	.db 0x00
   03BB                   13679 __str_20:
   03BB 0A                13680 	.db 0x0A
   03BC 0D                13681 	.db 0x0D
   03BD 46 75 6E 63 74 69 13682 	.ascii "Function 2: Go to a DDRAM address || lcdgotoaddr(int)"
        6F 6E 20 32 3A 20
        47 6F 20 74 6F 20
        61 20 44 44 52 41
        4D 20 61 64 64 72
        65 73 73 20 7C 7C
        20 6C 63 64 67 6F
        74 6F 61 64 64 72
        28 69 6E 74 29
   03F2 00                13683 	.db 0x00
   03F3                   13684 __str_21:
   03F3 0A                13685 	.db 0x0A
   03F4 0D                13686 	.db 0x0D
   03F5 46 75 6E 63 74 69 13687 	.ascii "Function 3: Go to location (row,column) || lcdgotoxy( row,"
        6F 6E 20 33 3A 20
        47 6F 20 74 6F 20
        6C 6F 63 61 74 69
        6F 6E 20 28 72 6F
        77 2C 63 6F 6C 75
        6D 6E 29 20 7C 7C
        20 6C 63 64 67 6F
        74 6F 78 79 28 20
        72 6F 77 2C
   042F 63 6F 6C 75 6D 6E 13688 	.ascii "column)"
        29
   0436 00                13689 	.db 0x00
   0437                   13690 __str_22:
   0437 0A                13691 	.db 0x0A
   0438 0D                13692 	.db 0x0D
   0439 46 75 6E 63 74 69 13693 	.ascii "Function 4: LCD print single character at a time || lcdput"
        6F 6E 20 34 3A 20
        4C 43 44 20 70 72
        69 6E 74 20 73 69
        6E 67 6C 65 20 63
        68 61 72 61 63 74
        65 72 20 61 74 20
        61 20 74 69 6D 65
        20 7C 7C 20 6C 63
        64 70 75 74
   0473 63 68 28 63 68 61 13694 	.ascii "ch(char)"
        72 29
   047B 00                13695 	.db 0x00
   047C                   13696 __str_23:
   047C 0A                13697 	.db 0x0A
   047D 0D                13698 	.db 0x0D
   047E 46 75 6E 63 74 69 13699 	.ascii "Function 5: LCD print a string || lcdputstr()"
        6F 6E 20 35 3A 20
        4C 43 44 20 70 72
        69 6E 74 20 61 20
        73 74 72 69 6E 67
        20 7C 7C 20 6C 63
        64 70 75 74 73 74
        72 28 29
   04AB 00                13700 	.db 0x00
   04AC                   13701 __str_24:
   04AC 0A                13702 	.db 0x0A
   04AD 0D                13703 	.db 0x0D
   04AE 46 75 6E 63 74 69 13704 	.ascii "Function 6: Clear the screen"
        6F 6E 20 36 3A 20
        43 6C 65 61 72 20
        74 68 65 20 73 63
        72 65 65 6E
   04CA 00                13705 	.db 0x00
   04CB                   13706 __str_25:
   04CB 0A                13707 	.db 0x0A
   04CC 0D                13708 	.db 0x0D
   04CD 46 75 6E 63 74 69 13709 	.ascii "Function 7: Read the position of the cursor"
        6F 6E 20 37 3A 20
        52 65 61 64 20 74
        68 65 20 70 6F 73
        69 74 69 6F 6E 20
        6F 66 20 74 68 65
        20 63 75 72 73 6F
        72
   04F8 00                13710 	.db 0x00
   04F9                   13711 __str_26:
   04F9 0A                13712 	.db 0x0A
   04FA 0D                13713 	.db 0x0D
   04FB 46 75 6E 63 74 69 13714 	.ascii "Function 8: Create a custom character"
        6F 6E 20 38 3A 20
        43 72 65 61 74 65
        20 61 20 63 75 73
        74 6F 6D 20 63 68
        61 72 61 63 74 65
        72
   0520 00                13715 	.db 0x00
   0521                   13716 __str_27:
   0521 0A                13717 	.db 0x0A
   0522 0D                13718 	.db 0x0D
   0523 46 75 6E 63 74 69 13719 	.ascii "Function 9: Fun Logo"
        6F 6E 20 39 3A 20
        46 75 6E 20 4C 6F
        67 6F
   0537 00                13720 	.db 0x00
   0538                   13721 __str_28:
   0538 0A                13722 	.db 0x0A
   0539 0D                13723 	.db 0x0D
   053A 46 75 6E 63 74 69 13724 	.ascii "Function 0: Go back to main menu"
        6F 6E 20 30 3A 20
        47 6F 20 62 61 63
        6B 20 74 6F 20 6D
        61 69 6E 20 6D 65
        6E 75
   055A 00                13725 	.db 0x00
   055B                   13726 __str_29:
   055B 0A                13727 	.db 0x0A
   055C 0D                13728 	.db 0x0D
   055D 45 6E 74 65 72 20 13729 	.ascii "Enter your choice:"
        79 6F 75 72 20 63
        68 6F 69 63 65 3A
   056F 00                13730 	.db 0x00
   0570                   13731 __str_30:
   0570 0A                13732 	.db 0x0A
   0571 0A                13733 	.db 0x0A
   0572 0D                13734 	.db 0x0D
   0573 4C 43 44 20 69 6E 13735 	.ascii "LCD initialized"
        69 74 69 61 6C 69
        7A 65 64
   0582 00                13736 	.db 0x00
   0583                   13737 __str_31:
   0583 0A                13738 	.db 0x0A
   0584 0A                13739 	.db 0x0A
   0585 0D                13740 	.db 0x0D
   0586 20 50 6C 65 61 73 13741 	.ascii " Please enter a character to be printed to the LCD:"
        65 20 65 6E 74 65
        72 20 61 20 63 68
        61 72 61 63 74 65
        72 20 74 6F 20 62
        65 20 70 72 69 6E
        74 65 64 20 74 6F
        20 74 68 65 20 4C
        43 44 3A
   05B9 00                13742 	.db 0x00
   05BA                   13743 __str_32:
   05BA 0A                13744 	.db 0x0A
   05BB 0A                13745 	.db 0x0A
   05BC 0D                13746 	.db 0x0D
   05BD 50 6C 65 61 73 65 13747 	.ascii "Please enter the string to be printed to the screen:"
        20 65 6E 74 65 72
        20 74 68 65 20 73
        74 72 69 6E 67 20
        74 6F 20 62 65 20
        70 72 69 6E 74 65
        64 20 74 6F 20 74
        68 65 20 73 63 72
        65 65 6E 3A
   05F1 00                13748 	.db 0x00
   05F2                   13749 __str_33:
   05F2 0A                13750 	.db 0x0A
   05F3 0A                13751 	.db 0x0A
   05F4 0D                13752 	.db 0x0D
   05F5 53 63 72 65 65 6E 13753 	.ascii "Screen Cleared"
        20 43 6C 65 61 72
        65 64
   0603 00                13754 	.db 0x00
   0604                   13755 __str_34:
   0604 54 68 65 20 63 75 13756 	.ascii "The current position of the cursor is : %d"
        72 72 65 6E 74 20
        70 6F 73 69 74 69
        6F 6E 20 6F 66 20
        74 68 65 20 63 75
        72 73 6F 72 20 69
        73 20 3A 20 25 64
   062E 00                13757 	.db 0x00
   062F                   13758 __str_35:
   062F 0A                13759 	.db 0x0A
   0630 0A                13760 	.db 0x0A
   0631 0D                13761 	.db 0x0D
   0632 59 6F 75 20 68 61 13762 	.ascii "You have entered the Custom character mode"
        76 65 20 65 6E 74
        65 72 65 64 20 74
        68 65 20 43 75 73
        74 6F 6D 20 63 68
        61 72 61 63 74 65
        72 20 6D 6F 64 65
   065C 00                13763 	.db 0x00
   065D                   13764 __str_36:
   065D 0A                13765 	.db 0x0A
   065E 0A                13766 	.db 0x0A
   065F 0D                13767 	.db 0x0D
   0660 20 46 55 4E 20 4C 13768 	.ascii " FUN LOGO!"
        4F 47 4F 21
   066A 00                13769 	.db 0x00
   066B                   13770 __str_37:
   066B 49 6E 76 61 6C 69 13771 	.ascii "Invalid Input"
        64 20 49 6E 70 75
        74
   0678 00                13772 	.db 0x00
   0679                   13773 __str_38:
   0679 0A                13774 	.db 0x0A
   067A 0D                13775 	.db 0x0D
   067B 20 20 20 20 20 20 13776 	.ascii "                           EEPROM FUNCTION MENU"
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 45 45 50
        52 4F 4D 20 46 55
        4E 43 54 49 4F 4E
        20 4D 45 4E 55
   06AA 00                13777 	.db 0x00
   06AB                   13778 __str_39:
   06AB 0A                13779 	.db 0x0A
   06AC 0D                13780 	.db 0x0D
   06AD 46 75 6E 63 74 69 13781 	.ascii "Function 1:Write Byte"
        6F 6E 20 31 3A 57
        72 69 74 65 20 42
        79 74 65
   06C2 00                13782 	.db 0x00
   06C3                   13783 __str_40:
   06C3 0A                13784 	.db 0x0A
   06C4 0D                13785 	.db 0x0D
   06C5 46 75 6E 63 74 69 13786 	.ascii "Function 2:Read Byte"
        6F 6E 20 32 3A 52
        65 61 64 20 42 79
        74 65
   06D9 00                13787 	.db 0x00
   06DA                   13788 __str_41:
   06DA 0A                13789 	.db 0x0A
   06DB 0D                13790 	.db 0x0D
   06DC 46 75 6E 63 74 69 13791 	.ascii "Function 3:Block Fill"
        6F 6E 20 33 3A 42
        6C 6F 63 6B 20 46
        69 6C 6C
   06F1 00                13792 	.db 0x00
   06F2                   13793 __str_42:
   06F2 0A                13794 	.db 0x0A
   06F3 0D                13795 	.db 0x0D
   06F4 46 75 6E 63 74 69 13796 	.ascii "Function 4:LCD Display"
        6F 6E 20 34 3A 4C
        43 44 20 44 69 73
        70 6C 61 79
   070A 00                13797 	.db 0x00
   070B                   13798 __str_43:
   070B 0A                13799 	.db 0x0A
   070C 0D                13800 	.db 0x0D
   070D 46 75 6E 63 74 69 13801 	.ascii "Function 5:Hex Dump"
        6F 6E 20 35 3A 48
        65 78 20 44 75 6D
        70
   0720 00                13802 	.db 0x00
   0721                   13803 __str_44:
   0721 0A                13804 	.db 0x0A
   0722 0D                13805 	.db 0x0D
   0723 46 75 6E 63 74 69 13806 	.ascii "Function 6:Internal Reset"
        6F 6E 20 36 3A 49
        6E 74 65 72 6E 61
        6C 20 52 65 73 65
        74
   073C 00                13807 	.db 0x00
   073D                   13808 __str_45:
   073D 0A                13809 	.db 0x0A
   073E 0D                13810 	.db 0x0D
   073F 46 75 6E 63 74 69 13811 	.ascii "Function 0:Back to Main menu"
        6F 6E 20 30 3A 42
        61 63 6B 20 74 6F
        20 4D 61 69 6E 20
        6D 65 6E 75
   075B 00                13812 	.db 0x00
   075C                   13813 __str_46:
   075C 0A                13814 	.db 0x0A
   075D 0A                13815 	.db 0x0A
   075E 0D                13816 	.db 0x0D
   075F 50 6C 65 61 73 65 13817 	.ascii "Please enter the address where the byte is to be written "
        20 65 6E 74 65 72
        20 74 68 65 20 61
        64 64 72 65 73 73
        20 77 68 65 72 65
        20 74 68 65 20 62
        79 74 65 20 69 73
        20 74 6F 20 62 65
        20 77 72 69 74 74
        65 6E 20
   0798 28 30 78 30 30 30 13818 	.ascii "(0x000 to 0x7FF) 0x"
        20 74 6F 20 30 78
        37 46 46 29 20 30
        78
   07AB 00                13819 	.db 0x00
   07AC                   13820 __str_47:
   07AC 49 6E 76 61 6C 69 13821 	.ascii "Invalid Input.Please try Again"
        64 20 49 6E 70 75
        74 2E 50 6C 65 61
        73 65 20 74 72 79
        20 41 67 61 69 6E
   07CA 00                13822 	.db 0x00
   07CB                   13823 __str_48:
   07CB 0A                13824 	.db 0x0A
   07CC 0A                13825 	.db 0x0A
   07CD 0D                13826 	.db 0x0D
   07CE 50 6C 65 61 73 65 13827 	.ascii "Please enter the databyte to be store    d 0x"
        20 65 6E 74 65 72
        20 74 68 65 20 64
        61 74 61 62 79 74
        65 20 74 6F 20 62
        65 20 73 74 6F 72
        65 20 20 20 20 64
        20 30 78
   07FB 00                13828 	.db 0x00
   07FC                   13829 __str_49:
   07FC 0A                13830 	.db 0x0A
   07FD 0D                13831 	.db 0x0D
   07FE 57 72 69 74 65 20 13832 	.ascii "Write Operation Sucessfull"
        4F 70 65 72 61 74
        69 6F 6E 20 53 75
        63 65 73 73 66 75
        6C 6C
   0818 00                13833 	.db 0x00
   0819                   13834 __str_50:
   0819 0A                13835 	.db 0x0A
   081A 0D                13836 	.db 0x0D
   081B 57 72 69 74 65 20 13837 	.ascii "Write Operation Unsucessful"
        4F 70 65 72 61 74
        69 6F 6E 20 55 6E
        73 75 63 65 73 73
        66 75 6C
   0836 00                13838 	.db 0x00
   0837                   13839 __str_51:
   0837 0A                13840 	.db 0x0A
   0838 0A                13841 	.db 0x0A
   0839 0D                13842 	.db 0x0D
   083A 50 6C 65 61 73 65 13843 	.ascii "Please enter the address where the byte is to be read (0x"
        20 65 6E 74 65 72
        20 74 68 65 20 61
        64 64 72 65 73 73
        20 77 68 65 72 65
        20 74 68 65 20 62
        79 74 65 20 69 73
        20 74 6F 20 62 65
        20 72 65 61 64 20
        28 30 78
   0873 30 30 30 20 74 6F 13844 	.ascii "000 to 0x7FF) 0x"
        20 30 78 37 46 46
        29 20 30 78
   0883 00                13845 	.db 0x00
   0884                   13846 __str_52:
   0884 0A                13847 	.db 0x0A
   0885 0A                13848 	.db 0x0A
   0886 0D                13849 	.db 0x0D
   0887 54 68 65 20 64 61 13850 	.ascii "The data stored at location 0x%X is 0x%x "
        74 61 20 73 74 6F
        72 65 64 20 61 74
        20 6C 6F 63 61 74
        69 6F 6E 20 30 78
        25 58 20 69 73 20
        30 78 25 78 20
   08B0 00                13851 	.db 0x00
   08B1                   13852 __str_53:
   08B1 0A                13853 	.db 0x0A
   08B2 0A                13854 	.db 0x0A
   08B3 0D                13855 	.db 0x0D
   08B4 50 6C 65 61 73 65 13856 	.ascii "Please enter the START address for block fill (0x000 to 0"
        20 65 6E 74 65 72
        20 74 68 65 20 53
        54 41 52 54 20 61
        64 64 72 65 73 73
        20 66 6F 72 20 62
        6C 6F 63 6B 20 66
        69 6C 6C 20 28 30
        78 30 30 30 20 74
        6F 20 30
   08ED 78 37 46 46 29 20 13857 	.ascii "x7FF) 0x"
        30 78
   08F5 00                13858 	.db 0x00
   08F6                   13859 __str_54:
   08F6 0A                13860 	.db 0x0A
   08F7 0A                13861 	.db 0x0A
   08F8 0D                13862 	.db 0x0D
   08F9 50 6C 65 61 73 65 13863 	.ascii "Please enter the END address for block fill (0x000 to 0x7"
        20 65 6E 74 65 72
        20 74 68 65 20 45
        4E 44 20 61 64 64
        72 65 73 73 20 66
        6F 72 20 62 6C 6F
        63 6B 20 66 69 6C
        6C 20 28 30 78 30
        30 30 20 74 6F 20
        30 78 37
   0932 46 46 29 20 30 78 13864 	.ascii "FF) 0x"
   0938 00                13865 	.db 0x00
   0939                   13866 __str_55:
   0939 0A                13867 	.db 0x0A
   093A 0A                13868 	.db 0x0A
   093B 0D                13869 	.db 0x0D
   093C 50 6C 65 61 73 65 13870 	.ascii "Please enter the databyte for the fill 0x"
        20 65 6E 74 65 72
        20 74 68 65 20 64
        61 74 61 62 79 74
        65 20 66 6F 72 20
        74 68 65 20 66 69
        6C 6C 20 30 78
   0965 00                13871 	.db 0x00
   0966                   13872 __str_56:
   0966 0A                13873 	.db 0x0A
   0967 0A                13874 	.db 0x0A
   0968 0D                13875 	.db 0x0D
   0969 20 42 6C 6F 63 6B 13876 	.ascii " Block Fill Sucessfull"
        20 46 69 6C 6C 20
        53 75 63 65 73 73
        66 75 6C 6C
   097F 00                13877 	.db 0x00
   0980                   13878 __str_57:
   0980 0A                13879 	.db 0x0A
   0981 0A                13880 	.db 0x0A
   0982 0D                13881 	.db 0x0D
   0983 20 42 6C 6F 63 6B 13882 	.ascii " Block fill failed"
        20 66 69 6C 6C 20
        66 61 69 6C 65 64
   0995 00                13883 	.db 0x00
   0996                   13884 __str_58:
   0996 54 68 65 20 63 75 13885 	.ascii "The current set address is 0x%40X"
        72 72 65 6E 74 20
        73 65 74 20 61 64
        64 72 65 73 73 20
        69 73 20 30 78 25
        34 30 58
   09B7 00                13886 	.db 0x00
   09B8                   13887 __str_59:
   09B8 57 6F 75 6C 64 20 13888 	.ascii "Would you like to enter a new start addres(Y/N)"
        79 6F 75 20 6C 69
        6B 65 20 74 6F 20
        65 6E 74 65 72 20
        61 20 6E 65 77 20
        73 74 61 72 74 20
        61 64 64 72 65 73
        28 59 2F 4E 29
   09E7 00                13889 	.db 0x00
   09E8                   13890 __str_60:
   09E8 0A                13891 	.db 0x0A
   09E9 0A                13892 	.db 0x0A
   09EA 0D                13893 	.db 0x0D
   09EB 50 6C 65 61 73 65 13894 	.ascii "Please enter the START address for 4 byte block to be dis"
        20 65 6E 74 65 72
        20 74 68 65 20 53
        54 41 52 54 20 61
        64 64 72 65 73 73
        20 66 6F 72 20 34
        20 62 79 74 65 20
        62 6C 6F 63 6B 20
        74 6F 20 62 65 20
        64 69 73
   0A24 70 6C 61 79 65 64 13895 	.ascii "played on LCD (0x000 to 0x7FF) 0x"
        20 6F 6E 20 4C 43
        44 20 28 30 78 30
        30 30 20 74 6F 20
        30 78 37 46 46 29
        20 30 78
   0A45 00                13896 	.db 0x00
   0A46                   13897 __str_61:
   0A46 54 68 65 20 41 64 13898 	.ascii "The Address if out of range. Please try again"
        64 72 65 73 73 20
        69 66 20 6F 75 74
        20 6F 66 20 72 61
        6E 67 65 2E 20 50
        6C 65 61 73 65 20
        74 72 79 20 61 67
        61 69 6E
   0A73 00                13899 	.db 0x00
   0A74                   13900 __str_62:
   0A74 0A                13901 	.db 0x0A
   0A75 0D                13902 	.db 0x0D
   0A76 54 68 65 20 53 74 13903 	.ascii "The Start  Address is bigger than the end address please e"
        61 72 74 20 20 41
        64 64 72 65 73 73
        20 69 73 20 62 69
        67 67 65 72 20 74
        68 61 6E 20 74 68
        65 20 65 6E 64 20
        61 64 64 72 65 73
        73 20 70 6C 65 61
        73 65 20 65
   0AB0 6E 74 65 72 20 56 13904 	.ascii "nter Valid Inputs"
        61 6C 69 64 20 49
        6E 70 75 74 73
   0AC1 00                13905 	.db 0x00
   0AC2                   13906 __str_63:
   0AC2 0A                13907 	.db 0x0A
   0AC3 0A                13908 	.db 0x0A
   0AC4 0D                13909 	.db 0x0D
   0AC5 49 6E 69 74 69 61 13910 	.ascii "Initializing internal Reset"
        6C 69 7A 69 6E 67
        20 69 6E 74 65 72
        6E 61 6C 20 52 65
        73 65 74
   0AE0 00                13911 	.db 0x00
   0AE1                   13912 __str_64:
   0AE1 0A                13913 	.db 0x0A
   0AE2 0A                13914 	.db 0x0A
   0AE3 0D                13915 	.db 0x0D
   0AE4 54 68 65 20 45 45 13916 	.ascii "The EEPROM has been Reset to a valid state"
        50 52 4F 4D 20 68
        61 73 20 62 65 65
        6E 20 52 65 73 65
        74 20 74 6F 20 61
        20 76 61 6C 69 64
        20 73 74 61 74 65
   0B0E 00                13917 	.db 0x00
   0B0F                   13918 __str_65:
   0B0F 0A                13919 	.db 0x0A
   0B10 0A                13920 	.db 0x0A
   0B11 0D                13921 	.db 0x0D
   0B12 20 49 6E 61 76 6C 13922 	.ascii " Inavlid Input! Please Try Again."
        69 64 20 49 6E 70
        75 74 21 20 50 6C
        65 61 73 65 20 54
        72 79 20 41 67 61
        69 6E 2E
   0B33 00                13923 	.db 0x00
   0B34                   13924 __str_66:
   0B34 0A                13925 	.db 0x0A
   0B35 0A                13926 	.db 0x0A
   0B36 0A                13927 	.db 0x0A
   0B37 0A                13928 	.db 0x0A
   0B38 0A                13929 	.db 0x0A
   0B39 0A                13930 	.db 0x0A
   0B3A 0A                13931 	.db 0x0A
   0B3B 0A                13932 	.db 0x0A
   0B3C 0A                13933 	.db 0x0A
   0B3D 0A                13934 	.db 0x0A
   0B3E 0A                13935 	.db 0x0A
   0B3F 0A                13936 	.db 0x0A
   0B40 0A                13937 	.db 0x0A
   0B41 00                13938 	.db 0x00
   0B42                   13939 __str_67:
   0B42 0A                13940 	.db 0x0A
   0B43 0D                13941 	.db 0x0D
   0B44 2E 2D 2E 20 20 20 13942 	.ascii ".-.   .-. .--. .-.    .--.  .--. .-..-. .--."
        2E 2D 2E 20 2E 2D
        2D 2E 20 2E 2D 2E
        20 20 20 20 2E 2D
        2D 2E 20 20 2E 2D
        2D 2E 20 2E 2D 2E
        2E 2D 2E 20 2E 2D
        2D 2E
   0B70 00                13943 	.db 0x00
   0B71                   13944 __str_68:
   0B71 0A                13945 	.db 0x0A
   0B72 0D                13946 	.db 0x0D
   0B73 3A 20 3A 2E 2D 2E 13947 	.ascii ": :.-.: :: .--': :   : .--': ,. :: `' :: .--'"
        3A 20 3A 3A 20 2E
        2D 2D 27 3A 20 3A
        20 20 20 3A 20 2E
        2D 2D 27 3A 20 2C
        2E 20 3A 3A 20 60
        27 20 3A 3A 20 2E
        2D 2D 27
   0BA0 00                13948 	.db 0x00
   0BA1                   13949 __str_69:
   0BA1 0A                13950 	.db 0x0A
   0BA2 0D                13951 	.db 0x0D
   0BA3 3A 20 3A 3A 20 3A 13952 	.ascii ": :: :: :: `;  : :   : :   : :: :: .. :: `;:"
        3A 20 3A 3A 20 60
        3B 20 20 3A 20 3A
        20 20 20 3A 20 3A
        20 20 20 3A 20 3A
        3A 20 3A 3A 20 2E
        2E 20 3A 3A 20 60
        3B 3A
   0BCF 00                13953 	.db 0x00
   0BD0                   13954 __str_70:
   0BD0 0A                13955 	.db 0x0A
   0BD1 0D                13956 	.db 0x0D
   0BD2 3A 60 27 20 60 27 13957 	.ascii ":`' `'' ;: :__ : :__ : :__ : :; :: :; :: :__"
        27 20 3B 3A 20 3A
        5F 5F 20 3A 20 3A
        5F 5F 20 3A 20 3A
        5F 5F 20 3A 20 3A
        3B 20 3A 3A 20 3A
        3B 20 3A 3A 20 3A
        5F 5F
   0BFE 00                13958 	.db 0x00
   0BFF                   13959 __str_71:
   0BFF 0A                13960 	.db 0x0A
   0C00 0D                13961 	.db 0x0D
   0C01 20 60 2E 2C 60 2E 13962 	.ascii " `.,`.,' `.__.':___.'`.__.'`.__.':_;:_;`.__.'"
        2C 27 20 60 2E 5F
        5F 2E 27 3A 5F 5F
        5F 2E 27 60 2E 5F
        5F 2E 27 60 2E 5F
        5F 2E 27 3A 5F 3B
        3A 5F 3B 60 2E 5F
        5F 2E 27
   0C2E 00                13963 	.db 0x00
   0C2F                   13964 __str_72:
   0C2F 0A                13965 	.db 0x0A
   0C30 0A                13966 	.db 0x0A
   0C31 0D                13967 	.db 0x0D
   0C32 57 65 6C 63 6F 6D 13968 	.ascii "Welcome to the Lab 4 signoff"
        65 20 74 6F 20 74
        68 65 20 4C 61 62
        20 34 20 73 69 67
        6E 6F 66 66
   0C4E 00                13969 	.db 0x00
   0C4F                   13970 __str_73:
   0C4F 0A                13971 	.db 0x0A
   0C50 0A                13972 	.db 0x0A
   0C51 0D                13973 	.db 0x0D
   0C52 4F 70 74 69 6F 6E 13974 	.ascii "Options :"
        73 20 3A
   0C5B 00                13975 	.db 0x00
   0C5C                   13976 __str_74:
   0C5C 0A                13977 	.db 0x0A
   0C5D 0A                13978 	.db 0x0A
   0C5E 0D                13979 	.db 0x0D
   0C5F 20 50 72 65 73 73 13980 	.ascii " Press 1 : LCD testing functions"
        20 31 20 3A 20 4C
        43 44 20 74 65 73
        74 69 6E 67 20 66
        75 6E 63 74 69 6F
        6E 73
   0C7F 00                13981 	.db 0x00
   0C80                   13982 __str_75:
   0C80 0A                13983 	.db 0x0A
   0C81 0A                13984 	.db 0x0A
   0C82 0D                13985 	.db 0x0D
   0C83 20 50 72 65 73 73 13986 	.ascii " Press 2 : EEPROM testing functions"
        20 32 20 3A 20 45
        45 50 52 4F 4D 20
        74 65 73 74 69 6E
        67 20 66 75 6E 63
        74 69 6F 6E 73
   0CA6 00                13987 	.db 0x00
   0CA7                   13988 __str_76:
   0CA7 0A                13989 	.db 0x0A
   0CA8 0A                13990 	.db 0x0A
   0CA9 0D                13991 	.db 0x0D
   0CAA 20 50 72 65 73 73 13992 	.ascii " Press 3 : LCD TIMER functions"
        20 33 20 3A 20 4C
        43 44 20 54 49 4D
        45 52 20 66 75 6E
        63 74 69 6F 6E 73
   0CC8 00                13993 	.db 0x00
   0CC9                   13994 __str_77:
   0CC9 0A                13995 	.db 0x0A
   0CCA 0A                13996 	.db 0x0A
   0CCB 0D                13997 	.db 0x0D
   0CCC 20 50 72 65 73 73 13998 	.ascii " Press 4 : I2C PORT EXPANDER functions"
        20 34 20 3A 20 49
        32 43 20 50 4F 52
        54 20 45 58 50 41
        4E 44 45 52 20 66
        75 6E 63 74 69 6F
        6E 73
   0CF2 0A                13999 	.db 0x0A
   0CF3 0D                14000 	.db 0x0D
   0CF4 00                14001 	.db 0x00
   0CF5                   14002 __str_78:
   0CF5 45 6E 74 65 72 69 14003 	.ascii "Entering LCD function Menu: "
        6E 67 20 4C 43 44
        20 66 75 6E 63 74
        69 6F 6E 20 4D 65
        6E 75 3A 20
   0D11 0A                14004 	.db 0x0A
   0D12 0A                14005 	.db 0x0A
   0D13 0A                14006 	.db 0x0A
   0D14 0A                14007 	.db 0x0A
   0D15 0A                14008 	.db 0x0A
   0D16 0A                14009 	.db 0x0A
   0D17 0A                14010 	.db 0x0A
   0D18 0A                14011 	.db 0x0A
   0D19 0A                14012 	.db 0x0A
   0D1A 0A                14013 	.db 0x0A
   0D1B 0A                14014 	.db 0x0A
   0D1C 0A                14015 	.db 0x0A
   0D1D 0A                14016 	.db 0x0A
   0D1E 00                14017 	.db 0x00
   0D1F                   14018 __str_79:
   0D1F 0A                14019 	.db 0x0A
   0D20 0D                14020 	.db 0x0D
   0D21 45 6E 74 65 72 20 14021 	.ascii "Enter EEPROM function Menu "
        45 45 50 52 4F 4D
        20 66 75 6E 63 74
        69 6F 6E 20 4D 65
        6E 75 20
   0D3C 0A                14022 	.db 0x0A
   0D3D 0A                14023 	.db 0x0A
   0D3E 0A                14024 	.db 0x0A
   0D3F 0A                14025 	.db 0x0A
   0D40 0A                14026 	.db 0x0A
   0D41 0A                14027 	.db 0x0A
   0D42 0A                14028 	.db 0x0A
   0D43 0A                14029 	.db 0x0A
   0D44 0A                14030 	.db 0x0A
   0D45 0A                14031 	.db 0x0A
   0D46 0A                14032 	.db 0x0A
   0D47 0A                14033 	.db 0x0A
   0D48 0A                14034 	.db 0x0A
   0D49 00                14035 	.db 0x00
   0D4A                   14036 __str_80:
   0D4A 0A                14037 	.db 0x0A
   0D4B 0D                14038 	.db 0x0D
   0D4C 45 6E 74 65 72 69 14039 	.ascii "Entering LCD TIMER function Menu "
        6E 67 20 4C 43 44
        20 54 49 4D 45 52
        20 66 75 6E 63 74
        69 6F 6E 20 4D 65
        6E 75 20
   0D6D 0A                14040 	.db 0x0A
   0D6E 0A                14041 	.db 0x0A
   0D6F 0A                14042 	.db 0x0A
   0D70 0A                14043 	.db 0x0A
   0D71 0A                14044 	.db 0x0A
   0D72 0A                14045 	.db 0x0A
   0D73 0A                14046 	.db 0x0A
   0D74 0A                14047 	.db 0x0A
   0D75 0A                14048 	.db 0x0A
   0D76 0A                14049 	.db 0x0A
   0D77 0A                14050 	.db 0x0A
   0D78 0A                14051 	.db 0x0A
   0D79 0A                14052 	.db 0x0A
   0D7A 00                14053 	.db 0x00
   0D7B                   14054 __str_81:
   0D7B 0A                14055 	.db 0x0A
   0D7C 0D                14056 	.db 0x0D
   0D7D 45 6E 74 65 72 69 14057 	.ascii "Entering I2C PORT EXPANDER function Menu "
        6E 67 20 49 32 43
        20 50 4F 52 54 20
        45 58 50 41 4E 44
        45 52 20 66 75 6E
        63 74 69 6F 6E 20
        4D 65 6E 75 20
   0DA6 0A                14058 	.db 0x0A
   0DA7 0A                14059 	.db 0x0A
   0DA8 0A                14060 	.db 0x0A
   0DA9 0A                14061 	.db 0x0A
   0DAA 0A                14062 	.db 0x0A
   0DAB 0A                14063 	.db 0x0A
   0DAC 0A                14064 	.db 0x0A
   0DAD 0A                14065 	.db 0x0A
   0DAE 0A                14066 	.db 0x0A
   0DAF 0A                14067 	.db 0x0A
   0DB0 0A                14068 	.db 0x0A
   0DB1 0A                14069 	.db 0x0A
   0DB2 0A                14070 	.db 0x0A
   0DB3 00                14071 	.db 0x00
   0DB4                   14072 __str_82:
   0DB4 0A                14073 	.db 0x0A
   0DB5 0D                14074 	.db 0x0D
   0DB6 45 52 52 4F 52 21 14075 	.ascii "ERROR! Invalid Input."
        20 49 6E 76 61 6C
        69 64 20 49 6E 70
        75 74 2E
   0DCB 00                14076 	.db 0x00
   0DCC                   14077 __str_83:
   0DCC 0A                14078 	.db 0x0A
   0DCD 0A                14079 	.db 0x0A
   0DCE 0D                14080 	.db 0x0D
   0DCF 20 45 52 52 4F 52 14081 	.ascii " ERROR! Invalid Input"
        21 20 49 6E 76 61
        6C 69 64 20 49 6E
        70 75 74
   0DE4 00                14082 	.db 0x00
   0DE5                   14083 __str_84:
   0DE5 0A                14084 	.db 0x0A
   0DE6 0D                14085 	.db 0x0D
   0DE7 49 6E 76 61 6C 69 14086 	.ascii "Invalid Input(bb)"
        64 20 49 6E 70 75
        74 28 62 62 29
   0DF8 00                14087 	.db 0x00
   0DF9                   14088 __str_85:
   0DF9 49 6E 76 61 6C 69 14089 	.ascii "Invalid Input . Try Again"
        64 20 49 6E 70 75
        74 20 2E 20 54 72
        79 20 41 67 61 69
        6E
   0E12 00                14090 	.db 0x00
   0E13                   14091 __str_86:
   0E13 0A                14092 	.db 0x0A
   0E14 0A                14093 	.db 0x0A
   0E15 0D                14094 	.db 0x0D
   0E16 4F 75 74 20 6F 66 14095 	.ascii "Out of Range  %d"
        20 52 61 6E 67 65
        20 20 25 64
   0E26 00                14096 	.db 0x00
   0E27                   14097 __str_87:
   0E27 0A                14098 	.db 0x0A
   0E28 0A                14099 	.db 0x0A
   0E29 0D                14100 	.db 0x0D
   0E2A 49 6E 76 61 6C 69 14101 	.ascii "Invalid Input. "
        64 20 49 6E 70 75
        74 2E 20
   0E39 00                14102 	.db 0x00
   0E3A                   14103 __str_88:
   0E3A 0A                14104 	.db 0x0A
   0E3B 0A                14105 	.db 0x0A
   0E3C 0D                14106 	.db 0x0D
   0E3D 2D 2D 2D 2D 2D 2D 14107 	.ascii "---------------------------------------------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D
   0E76 2D 2D 2D 2D 2D 2D 14108 	.ascii "-----------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D
   0E8D 00                14109 	.db 0x00
   0E8E                   14110 __str_89:
   0E8E 0A                14111 	.db 0x0A
   0E8F 0D                14112 	.db 0x0D
   0E90 20 20 20 20 20 20 14113 	.ascii "                              EEPROM Contents"
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        45 45 50 52 4F 4D
        20 43 6F 6E 74 65
        6E 74 73
   0EBD 00                14114 	.db 0x00
   0EBE                   14115 __str_90:
   0EBE 0A                14116 	.db 0x0A
   0EBF 0D                14117 	.db 0x0D
   0EC0 41 41 41 41 3A 20 14118 	.ascii "AAAA: 00 |01 |02 |03 |04 |05 |06 |07 |08 |09 |0A |0B |0C |"
        30 30 20 7C 30 31
        20 7C 30 32 20 7C
        30 33 20 7C 30 34
        20 7C 30 35 20 7C
        30 36 20 7C 30 37
        20 7C 30 38 20 7C
        30 39 20 7C 30 41
        20 7C 30 42 20 7C
        30 43 20 7C
   0EFA 30 44 20 7C 30 45 14119 	.ascii "0D |0E |0F"
        20 7C 30 46
   0F04 00                14120 	.db 0x00
   0F05                   14121 __str_91:
   0F05 0A                14122 	.db 0x0A
   0F06 0D                14123 	.db 0x0D
   0F07 25 30 34 58 3A 20 14124 	.ascii "%04X: "
   0F0D 00                14125 	.db 0x00
   0F0E                   14126 __str_92:
   0F0E 20 20 20 20       14127 	.ascii "    "
   0F12 00                14128 	.db 0x00
   0F13                   14129 __str_93:
   0F13 25 58 20 20       14130 	.ascii "%X  "
   0F17 00                14131 	.db 0x00
   0F18                   14132 __str_94:
   0F18 0A                14133 	.db 0x0A
   0F19 0D                14134 	.db 0x0D
   0F1A 20 20 20 20 20 20 14135 	.ascii "                           CLOCK FUNCTION MENU"
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 43 4C 4F
        43 4B 20 46 55 4E
        43 54 49 4F 4E 20
        4D 45 4E 55
   0F48 00                14136 	.db 0x00
   0F49                   14137 __str_95:
   0F49 0A                14138 	.db 0x0A
   0F4A 0D                14139 	.db 0x0D
   0F4B 46 75 6E 63 74 69 14140 	.ascii "Function 1:Pause/Stop Timer"
        6F 6E 20 31 3A 50
        61 75 73 65 2F 53
        74 6F 70 20 54 69
        6D 65 72
   0F66 00                14141 	.db 0x00
   0F67                   14142 __str_96:
   0F67 0A                14143 	.db 0x0A
   0F68 0D                14144 	.db 0x0D
   0F69 46 75 6E 63 74 69 14145 	.ascii "Function 2:Start Timer"
        6F 6E 20 32 3A 53
        74 61 72 74 20 54
        69 6D 65 72
   0F7F 00                14146 	.db 0x00
   0F80                   14147 __str_97:
   0F80 0A                14148 	.db 0x0A
   0F81 0D                14149 	.db 0x0D
   0F82 46 75 6E 63 74 69 14150 	.ascii "Function 3:Reset Timer"
        6F 6E 20 33 3A 52
        65 73 65 74 20 54
        69 6D 65 72
   0F98 00                14151 	.db 0x00
   0F99                   14152 __str_98:
   0F99 0A                14153 	.db 0x0A
   0F9A 0D                14154 	.db 0x0D
   0F9B 46 75 6E 63 74 69 14155 	.ascii "Function 4:Print Time to Paulmon"
        6F 6E 20 34 3A 50
        72 69 6E 74 20 54
        69 6D 65 20 74 6F
        20 50 61 75 6C 6D
        6F 6E
   0FBB 00                14156 	.db 0x00
   0FBC                   14157 __str_99:
   0FBC 0A                14158 	.db 0x0A
   0FBD 0D                14159 	.db 0x0D
   0FBE 46 75 6E 63 74 69 14160 	.ascii "Function 5:Enter Advanced Mode"
        6F 6E 20 35 3A 45
        6E 74 65 72 20 41
        64 76 61 6E 63 65
        64 20 4D 6F 64 65
   0FDC 00                14161 	.db 0x00
   0FDD                   14162 __str_100:
   0FDD 0A                14163 	.db 0x0A
   0FDE 0D                14164 	.db 0x0D
   0FDF 46 75 6E 63 74 69 14165 	.ascii "Function 0:Go Back to Main Menu"
        6F 6E 20 30 3A 47
        6F 20 42 61 63 6B
        20 74 6F 20 4D 61
        69 6E 20 4D 65 6E
        75
   0FFE 00                14166 	.db 0x00
   0FFF                   14167 __str_101:
   0FFF 0A                14168 	.db 0x0A
   1000 0A                14169 	.db 0x0A
   1001 0D                14170 	.db 0x0D
   1002 54 69 6D 65 72 30 14171 	.ascii "Timer0 has been paused"
        20 68 61 73 20 62
        65 65 6E 20 70 61
        75 73 65 64
   1018 00                14172 	.db 0x00
   1019                   14173 __str_102:
   1019 0A                14174 	.db 0x0A
   101A 0A                14175 	.db 0x0A
   101B 0D                14176 	.db 0x0D
   101C 54 69 6D 65 72 20 14177 	.ascii "Timer has been started"
        68 61 73 20 62 65
        65 6E 20 73 74 61
        72 74 65 64
   1032 00                14178 	.db 0x00
   1033                   14179 __str_103:
   1033 0A                14180 	.db 0x0A
   1034 0A                14181 	.db 0x0A
   1035 0D                14182 	.db 0x0D
   1036 20 54 68 65 20 54 14183 	.ascii " The Timer has been reset"
        69 6D 65 72 20 68
        61 73 20 62 65 65
        6E 20 72 65 73 65
        74
   104F 00                14184 	.db 0x00
   1050                   14185 __str_104:
   1050 0A                14186 	.db 0x0A
   1051 0A                14187 	.db 0x0A
   1052 0D                14188 	.db 0x0D
   1053 54 68 65 20 74 69 14189 	.ascii "The time read is MM:SS:SS %d%d:%d%d.%d%d"
        6D 65 20 72 65 61
        64 20 69 73 20 4D
        4D 3A 53 53 3A 53
        53 20 25 64 25 64
        3A 25 64 25 64 2E
        25 64 25 64
   107B 00                14190 	.db 0x00
   107C                   14191 __str_105:
   107C 0A                14192 	.db 0x0A
   107D 0A                14193 	.db 0x0A
   107E 0D                14194 	.db 0x0D
   107F 59 6F 75 20 61 72 14195 	.ascii "You are already in advance mode"
        65 20 61 6C 72 65
        61 64 79 20 69 6E
        20 61 64 76 61 6E
        63 65 20 6D 6F 64
        65
   109E 00                14196 	.db 0x00
   109F                   14197 __str_106:
   109F 0A                14198 	.db 0x0A
   10A0 0D                14199 	.db 0x0D
   10A1 41 64 76 61 6E 63 14200 	.ascii "Advanced mode activated"
        65 64 20 6D 6F 64
        65 20 61 63 74 69
        76 61 74 65 64
   10B8 00                14201 	.db 0x00
   10B9                   14202 __str_107:
   10B9 0A                14203 	.db 0x0A
   10BA 0A                14204 	.db 0x0A
   10BB 0D                14205 	.db 0x0D
   10BC 59 6F 75 20 61 72 14206 	.ascii "You are already in advanced mode"
        65 20 61 6C 72 65
        61 64 79 20 69 6E
        20 61 64 76 61 6E
        63 65 64 20 6D 6F
        64 65
   10DC 00                14207 	.db 0x00
   10DD                   14208 __str_108:
   10DD 0A                14209 	.db 0x0A
   10DE 0A                14210 	.db 0x0A
   10DF 0D                14211 	.db 0x0D
   10E0 54 68 69 73 20 69 14212 	.ascii "This is the rise of the Pheonix Error.Invalid Input"
        73 20 74 68 65 20
        72 69 73 65 20 6F
        66 20 74 68 65 20
        50 68 65 6F 6E 69
        78 20 45 72 72 6F
        72 2E 49 6E 76 61
        6C 69 64 20 49 6E
        70 75 74
   1113 00                14213 	.db 0x00
   1114                   14214 __str_109:
   1114 0A                14215 	.db 0x0A
   1115 0D                14216 	.db 0x0D
   1116 57 65 6C 63 6F 6D 14217 	.ascii "Welcome to the create custom character mode"
        65 20 74 6F 20 74
        68 65 20 63 72 65
        61 74 65 20 63 75
        73 74 6F 6D 20 63
        68 61 72 61 63 74
        65 72 20 6D 6F 64
        65
   1141 00                14218 	.db 0x00
   1142                   14219 __str_110:
   1142 0A                14220 	.db 0x0A
   1143 0D                14221 	.db 0x0D
   1144 50 6C 65 61 73 65 14222 	.ascii "Please enter the ccode(0-7) :"
        20 65 6E 74 65 72
        20 74 68 65 20 63
        63 6F 64 65 28 30
        2D 37 29 20 3A
   1161 00                14223 	.db 0x00
   1162                   14224 __str_111:
   1162 49 6E 76 61 6C 69 14225 	.ascii "Invalid Input, Try Again"
        64 20 49 6E 70 75
        74 2C 20 54 72 79
        20 41 67 61 69 6E
   117A 00                14226 	.db 0x00
   117B                   14227 __str_112:
   117B 0A                14228 	.db 0x0A
   117C 0D                14229 	.db 0x0D
   117D 50 6C 65 61 73 65 14230 	.ascii "Please enter the pattern in hex for Row %d "
        20 65 6E 74 65 72
        20 74 68 65 20 70
        61 74 74 65 72 6E
        20 69 6E 20 68 65
        78 20 66 6F 72 20
        52 6F 77 20 25 64
        20
   11A8 00                14231 	.db 0x00
   11A9                   14232 __str_113:
   11A9 50 6C 65 61 73 65 14233 	.ascii "Please enter enter the location where you want to print a cu"
        20 65 6E 74 65 72
        20 65 6E 74 65 72
        20 74 68 65 20 6C
        6F 63 61 74 69 6F
        6E 20 77 68 65 72
        65 20 79 6F 75 20
        77 61 6E 74 20 74
        6F 20 70 72 69 6E
        74 20 61 20 63 75
   11E5 73 74 6F 6D 20 63 14234 	.ascii "stom character :"
        68 61 72 61 63 74
        65 72 20 3A
   11F5 00                14235 	.db 0x00
   11F6                   14236 __str_114:
   11F6 0A                14237 	.db 0x0A
   11F7 0D                14238 	.db 0x0D
   11F8 20 20 20 20 20 20 14239 	.ascii "                              I2C PORT EXPANDER Functions"
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        20 20 20 20 20 20
        49 32 43 20 50 4F
        52 54 20 45 58 50
        41 4E 44 45 52 20
        46 75 6E 63 74 69
        6F 6E 73
   1231 00                14240 	.db 0x00
   1232                   14241 __str_115:
   1232 0A                14242 	.db 0x0A
   1233 0D                14243 	.db 0x0D
   1234 46 75 6E 63 74 69 14244 	.ascii "Function 1:Write Port Pins functions and write the outputs"
        6F 6E 20 31 3A 57
        72 69 74 65 20 50
        6F 72 74 20 50 69
        6E 73 20 66 75 6E
        63 74 69 6F 6E 73
        20 61 6E 64 20 77
        72 69 74 65 20 74
        68 65 20 6F 75 74
        70 75 74 73
   126E 00                14245 	.db 0x00
   126F                   14246 __str_116:
   126F 0A                14247 	.db 0x0A
   1270 0D                14248 	.db 0x0D
   1271 46 75 6E 63 74 69 14249 	.ascii "Function 2:Read Port Pins"
        6F 6E 20 32 3A 52
        65 61 64 20 50 6F
        72 74 20 50 69 6E
        73
   128A 00                14250 	.db 0x00
   128B                   14251 __str_117:
   128B 0A                14252 	.db 0x0A
   128C 0D                14253 	.db 0x0D
   128D 46 75 6E 63 74 69 14254 	.ascii "Function 3:Toggle Port P0"
        6F 6E 20 33 3A 54
        6F 67 67 6C 65 20
        50 6F 72 74 20 50
        30
   12A6 00                14255 	.db 0x00
   12A7                   14256 __str_118:
   12A7 0A                14257 	.db 0x0A
   12A8 0D                14258 	.db 0x0D
   12A9 46 75 6E 63 74 69 14259 	.ascii "Function 4:Enable Interrupt for PORT EXPANDER"
        6F 6E 20 34 3A 45
        6E 61 62 6C 65 20
        49 6E 74 65 72 72
        75 70 74 20 66 6F
        72 20 50 4F 52 54
        20 45 58 50 41 4E
        44 45 52
   12D6 00                14260 	.db 0x00
   12D7                   14261 __str_119:
   12D7 0A                14262 	.db 0x0A
   12D8 0D                14263 	.db 0x0D
   12D9 50 6C 65 61 73 65 14264 	.ascii "Please select the function of the pins"
        20 73 65 6C 65 63
        74 20 74 68 65 20
        66 75 6E 63 74 69
        6F 6E 20 6F 66 20
        74 68 65 20 70 69
        6E 73
   12FF 00                14265 	.db 0x00
   1300                   14266 __str_120:
   1300 0A                14267 	.db 0x0A
   1301 0D                14268 	.db 0x0D
   1302 50 6C 65 61 73 65 14269 	.ascii "Please select the function for Pin%d"
        20 73 65 6C 65 63
        74 20 74 68 65 20
        66 75 6E 63 74 69
        6F 6E 20 66 6F 72
        20 50 69 6E 25 64
   1326 00                14270 	.db 0x00
   1327                   14271 __str_121:
   1327 54 68 65 20 50 69 14272 	.ascii "The Pinconfig is %X"
        6E 63 6F 6E 66 69
        67 20 69 73 20 25
        58
   133A 00                14273 	.db 0x00
   133B                   14274 __str_122:
   133B 0A                14275 	.db 0x0A
   133C 0D                14276 	.db 0x0D
   133D 50 6C 65 61 73 65 14277 	.ascii "Please write data on the output port pins"
        20 77 72 69 74 65
        20 64 61 74 61 20
        6F 6E 20 74 68 65
        20 6F 75 74 70 75
        74 20 70 6F 72 74
        20 70 69 6E 73
   1366 00                14278 	.db 0x00
   1367                   14279 __str_123:
   1367 0A                14280 	.db 0x0A
   1368 0D                14281 	.db 0x0D
   1369 50 6C 65 61 73 65 14282 	.ascii "Please enter the output on pin %d"
        20 65 6E 74 65 72
        20 74 68 65 20 6F
        75 74 70 75 74 20
        6F 6E 20 70 69 6E
        20 25 64
   138A 00                14283 	.db 0x00
   138B                   14284 __str_124:
   138B 0A                14285 	.db 0x0A
   138C 0A                14286 	.db 0x0A
   138D 0D                14287 	.db 0x0D
   138E 54 68 65 20 73 74 14288 	.ascii "The status of the I/O port Pins are "
        61 74 75 73 20 6F
        66 20 74 68 65 20
        49 2F 4F 20 70 6F
        72 74 20 50 69 6E
        73 20 61 72 65 20
   13B2 00                14289 	.db 0x00
   13B3                   14290 __str_125:
   13B3 0A                14291 	.db 0x0A
   13B4 0D                14292 	.db 0x0D
   13B5 2D 2D 2D 2D 2D 2D 14293 	.ascii "----------------------------------------"
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D 2D 2D
        2D 2D 2D 2D
   13DD 00                14294 	.db 0x00
   13DE                   14295 __str_126:
   13DE 0A                14296 	.db 0x0A
   13DF 0D                14297 	.db 0x0D
   13E0 7C 20 50 30 20 7C 14298 	.ascii "| P0 | P1 | P2 | P3 | P4 | P5 | P6 | P7|"
        20 50 31 20 7C 20
        50 32 20 7C 20 50
        33 20 7C 20 50 34
        20 7C 20 50 35 20
        7C 20 50 36 20 7C
        20 50 37 7C
   1408 00                14299 	.db 0x00
   1409                   14300 __str_127:
   1409 0A                14301 	.db 0x0A
   140A 0D                14302 	.db 0x0D
   140B 3D 3D 3D 3D 3D 3D 14303 	.ascii "========================================="
        3D 3D 3D 3D 3D 3D
        3D 3D 3D 3D 3D 3D
        3D 3D 3D 3D 3D 3D
        3D 3D 3D 3D 3D 3D
        3D 3D 3D 3D 3D 3D
        3D 3D 3D 3D 3D
   1434 00                14304 	.db 0x00
   1435                   14305 __str_128:
   1435 0A                14306 	.db 0x0A
   1436 0D                14307 	.db 0x0D
   1437 7C 20 25 32 64 20 14308 	.ascii "| %2d | %2d | %2d | %2d | %2d | %2d | %2d | %2d |"
        7C 20 25 32 64 20
        7C 20 25 32 64 20
        7C 20 25 32 64 20
        7C 20 25 32 64 20
        7C 20 25 32 64 20
        7C 20 25 32 64 20
        7C 20 25 32 64 20
        7C
   1468 00                14309 	.db 0x00
   1469                   14310 __str_129:
   1469 0A                14311 	.db 0x0A
   146A 0A                14312 	.db 0x0A
   146B 0D                14313 	.db 0x0D
   146C 50 72 65 73 73 20 14314 	.ascii "Press any key to Continue . . ."
        61 6E 79 20 6B 65
        79 20 74 6F 20 43
        6F 6E 74 69 6E 75
        65 20 2E 20 2E 20
        2E
   148B 00                14315 	.db 0x00
   148C                   14316 __str_130:
   148C 0A                14317 	.db 0x0A
   148D 0D                14318 	.db 0x0D
   148E 54 6F 67 67 6C 69 14319 	.ascii "Toggling pin P0"
        6E 67 20 70 69 6E
        20 50 30
   149D 00                14320 	.db 0x00
   149E                   14321 __str_131:
   149E 0A                14322 	.db 0x0A
   149F 0D                14323 	.db 0x0D
   14A0 45 6E 61 62 6C 65 14324 	.ascii "Enable Interrupts from PORT EXPANDER"
        20 49 6E 74 65 72
        72 75 70 74 73 20
        66 72 6F 6D 20 50
        4F 52 54 20 45 58
        50 41 4E 44 45 52
   14C4 00                14325 	.db 0x00
   14C5                   14326 __str_132:
   14C5 45 72 72 6F 72 21 14327 	.ascii "Error! Invalid Input."
        20 49 6E 76 61 6C
        69 64 20 49 6E 70
        75 74 2E
   14DA 00                14328 	.db 0x00
   14DB                   14329 __str_133:
   14DB 0A                14330 	.db 0x0A
   14DC 0A                14331 	.db 0x0A
   14DD 0D                14332 	.db 0x0D
   14DE 49 6E 74 65 72 72 14333 	.ascii "Interrupt has been triggered"
        75 70 74 20 68 61
        73 20 62 65 65 6E
        20 74 72 69 67 67
        65 72 65 64
   14FA 00                14334 	.db 0x00
                          14335 	.area XINIT   (CODE)
